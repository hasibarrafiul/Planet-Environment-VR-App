Shader "Nature/Terrain/Moon_surface" {
	Properties {
		_Color ("Main Color", Vector) = (1,1,1,1)
		_SpecColor ("Specular Color", Vector) = (0.5,0.5,0.5,1)
		_Shininess ("Shininess", Range(0.01, 1)) = 0.078125
		[HideInInspector] _Control ("Control (RGBA)", 2D) = "red" {}
		_Mask1 ("Mask1 (RGBA)", 2D) = "red" {}
		[HideInInspector] _Splat3 ("Layer 3 (A)", 2D) = "black" {}
		[HideInInspector] _Splat2 ("Layer 2 (B)", 2D) = "black" {}
		[HideInInspector] _Splat1 ("Layer 1 (G)", 2D) = "black" {}
		[HideInInspector] _Splat0 ("Layer 0 (R)", 2D) = "white" {}
		[HideInInspector] _Normal3 ("Normal 3 (A)", 2D) = "bump" {}
		[HideInInspector] _Normal2 ("Normal 2 (B)", 2D) = "bump" {}
		[HideInInspector] _Normal1 ("Normal 1 (G)", 2D) = "bump" {}
		[HideInInspector] _Normal0 ("Normal 0 (R)", 2D) = "bump" {}
		[HideInInspector] _MainTex ("BaseMap (RGB)", 2D) = "white" {}
		[HideInInspector] _Color ("Main Color", Vector) = (1,1,1,1)
		_Blur ("Blur", Range(0.01, 1)) = 0.02
		_ColorTex ("ColorMap (RGB)", 2D) = "black" {}
		_Normalmap ("Normalmap (RGB)", 2D) = "white" {}
		_HeightSplatAll ("Grass(R) Cliff(G) Stones(B) Snow(a)", 2D) = "black" {}
		_Parallax ("Height", Range(0.005, 0.08)) = 0.02
	}
	SubShader {
		Tags { "QUEUE" = "Geometry-100" "RenderType" = "Opaque" "SplatCount" = "4" }
		Pass {
			Name "FORWARD"
			Tags { "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Geometry-100" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" "SplatCount" = "4" }
			ZClip Off
			GpuProgramID 38960
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _Control_ST                c16      1
					//   _Splat0_ST                 c17      1
					//   _Splat1_ST                 c18      1
					//   _Splat2_ST                 c19      1
					//   _Splat3_ST                 c20      1
					//
					
					    vs_3_0
					    def c21, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.xy
					    dcl_texcoord9 o9
					    mad r0, v0.xyzx, c21.yyyx, c21.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r4.x, c4, r1
					    dp4 r4.y, c5, r1
					    dp4 r4.z, c6, r1
					    dp4 r4.w, c7, r1
					    mad o1.xy, v2, c16, c16.zwzw
					    mad o1.zw, v2.xyxy, c17.xyxy, c17
					    mad o2.xy, v2, c18, c18.zwzw
					    mad o2.zw, v2.xyxy, c19.xyxy, c19
					    mad o3.xy, v2, c20, c20.zwzw
					    dp4 o4.w, c0, v0
					    dp4 o5.w, c1, v0
					    dp4 o6.w, c2, v0
					    mul r0, c9.xyzz, v1.y
					    mad r0, v1.x, c8.xyzz, r0
					    mad r0, v1.z, c10.xyzz, r0
					    dp3 r1.x, r0.xyww, r0.xyww
					    rsq r1.x, r1.x
					    mul r0, r0, r1.x
					    mul r1.x, r0.y, r0.y
					    mad r1.x, r0.x, r0.x, -r1.x
					    mul r2, r0.ywzx, r0
					    dp4 r3.x, c11, r2
					    dp4 r3.y, c12, r2
					    dp4 r3.z, c13, r2
					    mad o7.xyz, c14, r1.x, r3
					    mul r1.xyz, c21.xyxw, v1.zxyw
					    mad r1.xyz, v1.yzxw, c21.yxxw, -r1
					    dp3 r2.z, c0, r1
					    dp3 r2.x, c1, r1
					    dp3 r2.y, c2, r1
					    dp3 r0.z, r2, r2
					    rsq r0.z, r0.z
					    mul r1.xyz, r0.z, r2
					    mov o4.x, r1.z
					    mul r2.xyz, r0.wxyw, r1
					    mad r2.xyz, r0.ywxw, r1.yzxw, -r2
					    mul r2.xyz, r2, -c15.w
					    mov o4.y, r2.x
					    mov o4.z, r0.x
					    mov o5.x, r1.x
					    mov o6.x, r1.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r0.y
					    mov o6.z, r0.w
					    mov o8.xy, c21.x
					    mov o9, c21.x
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 54 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat1.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.y;
					    vs_TEXCOORD5.z = u_xlat2.w;
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_SHBr                 c12      1
					//   unity_SHBg                 c13      1
					//   unity_SHBb                 c14      1
					//   unity_SHC                  c15      1
					//   unity_WorldTransformParams c16      1
					//   _Control_ST                c17      1
					//   _Splat0_ST                 c18      1
					//   _Splat1_ST                 c19      1
					//   _Splat2_ST                 c20      1
					//   _Splat3_ST                 c21      1
					//
					
					    vs_3_0
					    def c22, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8
					    dcl_texcoord9 o9
					    mad o1.xy, v2, c17, c17.zwzw
					    mad o1.zw, v2.xyxy, c18.xyxy, c18
					    mad o2.xy, v2, c19, c19.zwzw
					    mad o2.zw, v2.xyxy, c20.xyxy, c20
					    mad o3.xy, v2, c21, c21.zwzw
					    dp4 o4.w, c0, v0
					    dp4 o5.w, c1, v0
					    dp4 o6.w, c2, v0
					    mul r0, c9.xyzz, v1.y
					    mad r0, v1.x, c8.xyzz, r0
					    mad r0, v1.z, c10.xyzz, r0
					    dp3 r1.x, r0.xyww, r0.xyww
					    rsq r1.x, r1.x
					    mul r0, r0, r1.x
					    mul r1.x, r0.y, r0.y
					    mad r1.x, r0.x, r0.x, -r1.x
					    mul r2, r0.ywzx, r0
					    dp4 r3.x, c12, r2
					    dp4 r3.y, c13, r2
					    dp4 r3.z, c14, r2
					    mad o7.xyz, c15, r1.x, r3
					    mad r1, v0.xyzx, c22.yyyx, c22.xxxy
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp4 r2.w, c3, r1
					    dp4 r1.x, c4, r2
					    dp4 r1.w, c7, r2
					    mul r3.xz, r1.xyww, c22.z
					    dp4 r1.y, c5, r2
					    dp4 r1.z, c6, r2
					    mul r0.z, r1.y, c11.x
					    mov r4, r1
					    mov o8.zw, r1
					    mul r3.w, r0.z, c22.z
					    add o8.xy, r3.z, r3.xwzw
					    mul r1.xyz, c22.xyxw, v1.zxyw
					    mad r1.xyz, v1.yzxw, c22.yxxw, -r1
					    dp3 r2.z, c0, r1
					    dp3 r2.x, c1, r1
					    dp3 r2.y, c2, r1
					    dp3 r0.z, r2, r2
					    rsq r0.z, r0.z
					    mul r1.xyz, r0.z, r2
					    mov o4.x, r1.z
					    mul r2.xyz, r0.wxyw, r1
					    mad r2.xyz, r0.ywxw, r1.yzxw, -r2
					    mul r2.xyz, r2, -c16.w
					    mov o4.y, r2.x
					    mov o4.z, r0.x
					    mov o5.x, r1.x
					    mov o6.x, r1.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r0.y
					    mov o6.z, r0.w
					    mov o9, c22.x
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 59 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.z = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    vs_TEXCOORD4.z = u_xlat3.y;
					    vs_TEXCOORD5.z = u_xlat3.w;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   unity_ObjectToWorld        c4       4
					//   unity_MatrixVP             c8       4
					//   unity_WorldToObject        c12      3
					//   unity_4LightPosX0          c15      1
					//   unity_4LightPosY0          c16      1
					//   unity_4LightPosZ0          c17      1
					//   unity_4LightAtten0         c18      1
					//   unity_SHBr                 c19      1
					//   unity_SHBg                 c20      1
					//   unity_SHBb                 c21      1
					//   unity_SHC                  c22      1
					//   unity_WorldTransformParams c23      1
					//   _Control_ST                c24      1
					//   _Splat0_ST                 c25      1
					//   _Splat1_ST                 c26      1
					//   _Splat2_ST                 c27      1
					//   _Splat3_ST                 c28      1
					//
					
					    vs_3_0
					    def c29, 0, 1, 9.99999997e-007, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.xy
					    dcl_texcoord9 o9
					    mad r0, v0.xyzx, c29.yyyx, c29.xxxy
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp4 r1.w, c7, r0
					    dp4 r7.x, c8, r1
					    dp4 r7.y, c9, r1
					    dp4 r7.z, c10, r1
					    dp4 r7.w, c11, r1
					    mad o1.xy, v2, c24, c24.zwzw
					    mad o1.zw, v2.xyxy, c25.xyxy, c25
					    mad o2.xy, v2, c26, c26.zwzw
					    mad o2.zw, v2.xyxy, c27.xyxy, c27
					    mad o3.xy, v2, c28, c28.zwzw
					    dp4 r0.x, c5, v0
					    add r1, -r0.x, c16
					    mov o5.w, r0.x
					    mul r0, r1, r1
					    dp4 r2.x, c4, v0
					    add r3, -r2.x, c15
					    mov o4.w, r2.x
					    mad r0, r3, r3, r0
					    dp4 r2.x, c6, v0
					    add r4, -r2.x, c17
					    mov o6.w, r2.x
					    mad r0, r4, r4, r0
					    max r0, r0, c29.z
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r5.y, c29.y
					    mad r0, r0, c18, r5.y
					    mul r5, c13.xyzz, v1.y
					    mad r5, v1.x, c12.xyzz, r5
					    mad r5, v1.z, c14.xyzz, r5
					    dp3 r6.x, r5.xyww, r5.xyww
					    rsq r6.x, r6.x
					    mul r5, r5, r6.x
					    mul r1, r1, r5.y
					    mad r1, r3, r5.x, r1
					    mad r1, r4, r5.wwzw, r1
					    mul r1, r2, r1
					    max r1, r1, c29.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r1, r5.ywzx, r5
					    dp4 r2.x, c19, r1
					    dp4 r2.y, c20, r1
					    dp4 r2.z, c21, r1
					    mad r1.xyz, c22, r0.w, r2
					    add o7.xyz, r0, r1
					    mul r0.xyz, c29.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c29.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, r0, r5.wxyw
					    mad r1.xyz, r5.ywxw, r0.yzxw, -r1
					    mul r1.xyz, r1, -c23.w
					    mov o4.y, r1.x
					    mov o4.z, r5.x
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r1.y
					    mov o6.y, r1.z
					    mov o5.z, r5.y
					    mov o6.z, r5.w
					    mov o8.xy, c29.x
					    mov o9, c29.x
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 85 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat6.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2 = vec4(u_xlat15) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    vs_TEXCOORD3.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD4.z = u_xlat2.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   unity_ObjectToWorld        c4       4
					//   unity_MatrixVP             c8       4
					//   unity_WorldToObject        c12      3
					//   _ProjectionParams          c15      1
					//   unity_4LightPosX0          c16      1
					//   unity_4LightPosY0          c17      1
					//   unity_4LightPosZ0          c18      1
					//   unity_4LightAtten0         c19      1
					//   unity_SHBr                 c20      1
					//   unity_SHBg                 c21      1
					//   unity_SHBb                 c22      1
					//   unity_SHC                  c23      1
					//   unity_WorldTransformParams c24      1
					//   _Control_ST                c25      1
					//   _Splat0_ST                 c26      1
					//   _Splat1_ST                 c27      1
					//   _Splat2_ST                 c28      1
					//   _Splat3_ST                 c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 9.99999997e-007, 0.5
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8
					    dcl_texcoord9 o9
					    mad o1.xy, v2, c25, c25.zwzw
					    mad o1.zw, v2.xyxy, c26.xyxy, c26
					    mad o2.xy, v2, c27, c27.zwzw
					    mad o2.zw, v2.xyxy, c28.xyxy, c28
					    mad o3.xy, v2, c29, c29.zwzw
					    dp4 r0.x, c5, v0
					    add r1, -r0.x, c17
					    mov o5.w, r0.x
					    mul r0, r1, r1
					    dp4 r2.x, c4, v0
					    add r3, -r2.x, c16
					    mov o4.w, r2.x
					    mad r0, r3, r3, r0
					    dp4 r2.x, c6, v0
					    add r4, -r2.x, c18
					    mov o6.w, r2.x
					    mad r0, r4, r4, r0
					    max r0, r0, c30.z
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r5.y, c30.y
					    mad r0, r0, c19, r5.y
					    mul r5, c13.xyzz, v1.y
					    mad r5, v1.x, c12.xyzz, r5
					    mad r5, v1.z, c14.xyzz, r5
					    dp3 r6.x, r5.xyww, r5.xyww
					    rsq r6.x, r6.x
					    mul r5, r5, r6.x
					    mul r1, r1, r5.y
					    mad r1, r3, r5.x, r1
					    mad r1, r4, r5.wwzw, r1
					    mul r1, r2, r1
					    max r1, r1, c30.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r1, r5.ywzx, r5
					    dp4 r2.x, c20, r1
					    dp4 r2.y, c21, r1
					    dp4 r2.z, c22, r1
					    mad r1.xyz, c23, r0.w, r2
					    add o7.xyz, r0, r1
					    mad r0, v0.xyzx, c30.yyyx, c30.xxxy
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp4 r1.w, c7, r0
					    dp4 r0.x, c8, r1
					    dp4 r0.w, c11, r1
					    mul r2.xz, r0.xyww, c30.w
					    dp4 r0.y, c9, r1
					    dp4 r0.z, c10, r1
					    mul r1.x, r0.y, c15.x
					    mov r7, r0
					    mov o8.zw, r0
					    mul r2.w, r1.x, c30.w
					    add o8.xy, r2.z, r2.xwzw
					    mul r0.xyz, c30.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c30.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, r0, r5.wxyw
					    mad r1.xyz, r5.ywxw, r0.yzxw, -r1
					    mul r1.xyz, r1, -c24.w
					    mov o4.y, r1.x
					    mov o4.z, r5.x
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r1.y
					    mov o6.y, r1.z
					    mov o5.z, r5.y
					    mov o6.z, r5.w
					    mov o9, c30.x
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 90 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat8;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat8.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat8.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3 = vec4(u_xlat18) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    vs_TEXCOORD3.z = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD4.z = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat3.w;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_SHBr                 c11      1
					//   unity_SHBg                 c12      1
					//   unity_SHBb                 c13      1
					//   unity_SHC                  c14      1
					//   unity_WorldTransformParams c15      1
					//   _Control_ST                c16      1
					//   _Splat0_ST                 c17      1
					//   _Splat1_ST                 c18      1
					//   _Splat2_ST                 c19      1
					//   _Splat3_ST                 c20      1
					//
					
					    vs_3_0
					    def c21, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.xy
					    dcl_texcoord8 o9.x
					    dcl_texcoord9 o10
					    mad r0, v0.xyzx, c21.yyyx, c21.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r4.x, c4, r1
					    dp4 r4.y, c5, r1
					    dp4 r4.w, c7, r1
					    dp4 r0.x, c6, r1
					    mad o1.xy, v2, c16, c16.zwzw
					    mad o1.zw, v2.xyxy, c17.xyxy, c17
					    mad o2.xy, v2, c18, c18.zwzw
					    mad o2.zw, v2.xyxy, c19.xyxy, c19
					    mad o3.xy, v2, c20, c20.zwzw
					    dp4 o4.w, c0, v0
					    dp4 o5.w, c1, v0
					    dp4 o6.w, c2, v0
					    mul r1, c9.xyzz, v1.y
					    mad r1, v1.x, c8.xyzz, r1
					    mad r1, v1.z, c10.xyzz, r1
					    dp3 r0.y, r1.xyww, r1.xyww
					    rsq r0.y, r0.y
					    mul r1, r0.y, r1
					    mul r0.y, r1.y, r1.y
					    mad r0.y, r1.x, r1.x, -r0.y
					    mul r2, r1.ywzx, r1
					    dp4 r3.x, c11, r2
					    dp4 r3.y, c12, r2
					    dp4 r3.z, c13, r2
					    mad o7.xyz, c14, r0.y, r3
					    mov r4.z, r0.x
					    mov o9.x, r0.x
					    mul r0.xyz, c21.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c21.yxxw, -r0
					    dp3 r2.z, c0, r0
					    dp3 r2.x, c1, r0
					    dp3 r2.y, c2, r0
					    dp3 r0.x, r2, r2
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r2
					    mov o4.x, r0.z
					    mul r2.xyz, r0, r1.wxyw
					    mad r2.xyz, r1.ywxw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c15.w
					    mov o4.y, r2.x
					    mov o4.z, r1.x
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.y
					    mov o6.z, r1.w
					    mov o8.xy, c21.x
					    mov o10, c21.x
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 56 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat1.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD4.z = u_xlat2.y;
					    vs_TEXCOORD5.z = u_xlat2.w;
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _ProjectionParams          c11      1
					//   unity_SHBr                 c12      1
					//   unity_SHBg                 c13      1
					//   unity_SHBb                 c14      1
					//   unity_SHC                  c15      1
					//   unity_WorldTransformParams c16      1
					//   _Control_ST                c17      1
					//   _Splat0_ST                 c18      1
					//   _Splat1_ST                 c19      1
					//   _Splat2_ST                 c20      1
					//   _Splat3_ST                 c21      1
					//
					
					    vs_3_0
					    def c22, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8
					    dcl_texcoord8 o9.x
					    dcl_texcoord9 o10
					    mad o1.xy, v2, c17, c17.zwzw
					    mad o1.zw, v2.xyxy, c18.xyxy, c18
					    mad o2.xy, v2, c19, c19.zwzw
					    mad o2.zw, v2.xyxy, c20.xyxy, c20
					    mad o3.xy, v2, c21, c21.zwzw
					    dp4 o4.w, c0, v0
					    dp4 o5.w, c1, v0
					    dp4 o6.w, c2, v0
					    mul r0, c9.xyzz, v1.y
					    mad r0, v1.x, c8.xyzz, r0
					    mad r0, v1.z, c10.xyzz, r0
					    dp3 r1.x, r0.xyww, r0.xyww
					    rsq r1.x, r1.x
					    mul r0, r0, r1.x
					    mul r1.x, r0.y, r0.y
					    mad r1.x, r0.x, r0.x, -r1.x
					    mul r2, r0.ywzx, r0
					    dp4 r3.x, c12, r2
					    dp4 r3.y, c13, r2
					    dp4 r3.z, c14, r2
					    mad o7.xyz, c15, r1.x, r3
					    mad r1, v0.xyzx, c22.yyyx, c22.xxxy
					    dp4 r2.x, c0, r1
					    dp4 r2.y, c1, r1
					    dp4 r2.z, c2, r1
					    dp4 r2.w, c3, r1
					    dp4 r1.x, c4, r2
					    dp4 r1.w, c7, r2
					    mul r3.xz, r1.xyww, c22.z
					    dp4 r1.y, c5, r2
					    dp4 r1.z, c6, r2
					    mul r0.z, r1.y, c11.x
					    mov r4, r1
					    mov o8.zw, r1
					    mov o9.x, r1.z
					    mul r3.w, r0.z, c22.z
					    add o8.xy, r3.z, r3.xwzw
					    mul r1.xyz, c22.xyxw, v1.zxyw
					    mad r1.xyz, v1.yzxw, c22.yxxw, -r1
					    dp3 r2.z, c0, r1
					    dp3 r2.x, c1, r1
					    dp3 r2.y, c2, r1
					    dp3 r0.z, r2, r2
					    rsq r0.z, r0.z
					    mul r1.xyz, r0.z, r2
					    mov o4.x, r1.z
					    mul r2.xyz, r0.wxyw, r1
					    mad r2.xyz, r0.ywxw, r1.yzxw, -r2
					    mul r2.xyz, r2, -c16.w
					    mov o4.y, r2.x
					    mov o4.z, r0.x
					    mov o5.x, r1.x
					    mov o6.x, r1.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r0.y
					    mov o6.z, r0.w
					    mov o10, c22.x
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 60 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat2.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3 = u_xlat0.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.z = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    vs_TEXCOORD4.z = u_xlat3.y;
					    vs_TEXCOORD5.z = u_xlat3.w;
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    vs_TEXCOORD6.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   unity_ObjectToWorld        c4       4
					//   unity_MatrixVP             c8       4
					//   unity_WorldToObject        c12      3
					//   unity_4LightPosX0          c15      1
					//   unity_4LightPosY0          c16      1
					//   unity_4LightPosZ0          c17      1
					//   unity_4LightAtten0         c18      1
					//   unity_SHBr                 c19      1
					//   unity_SHBg                 c20      1
					//   unity_SHBb                 c21      1
					//   unity_SHC                  c22      1
					//   unity_WorldTransformParams c23      1
					//   _Control_ST                c24      1
					//   _Splat0_ST                 c25      1
					//   _Splat1_ST                 c26      1
					//   _Splat2_ST                 c27      1
					//   _Splat3_ST                 c28      1
					//
					
					    vs_3_0
					    def c29, 0, 1, 9.99999997e-007, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.xy
					    dcl_texcoord8 o9.x
					    dcl_texcoord9 o10
					    mad r0, v0.xyzx, c29.yyyx, c29.xxxy
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp4 r1.w, c7, r0
					    dp4 r7.x, c8, r1
					    dp4 r7.y, c9, r1
					    dp4 r7.w, c11, r1
					    dp4 r0.x, c10, r1
					    mad o1.xy, v2, c24, c24.zwzw
					    mad o1.zw, v2.xyxy, c25.xyxy, c25
					    mad o2.xy, v2, c26, c26.zwzw
					    mad o2.zw, v2.xyxy, c27.xyxy, c27
					    mad o3.xy, v2, c28, c28.zwzw
					    dp4 r0.y, c5, v0
					    add r1, -r0.y, c16
					    mov o5.w, r0.y
					    mul r2, r1, r1
					    dp4 r0.y, c4, v0
					    add r3, -r0.y, c15
					    mov o4.w, r0.y
					    mad r2, r3, r3, r2
					    dp4 r0.y, c6, v0
					    add r4, -r0.y, c17
					    mov o6.w, r0.y
					    mad r2, r4, r4, r2
					    max r2, r2, c29.z
					    rsq r5.x, r2.x
					    rsq r5.y, r2.y
					    rsq r5.z, r2.z
					    rsq r5.w, r2.w
					    mov r0.y, c29.y
					    mad r2, r2, c18, r0.y
					    mul r6, c13.xyzz, v1.y
					    mad r6, v1.x, c12.xyzz, r6
					    mad r6, v1.z, c14.xyzz, r6
					    dp3 r0.y, r6.xyww, r6.xyww
					    rsq r0.y, r0.y
					    mul r6, r0.y, r6
					    mul r1, r1, r6.y
					    mad r1, r3, r6.x, r1
					    mad r1, r4, r6.wwzw, r1
					    mul r1, r5, r1
					    max r1, r1, c29.x
					    rcp r3.x, r2.x
					    rcp r3.y, r2.y
					    rcp r3.z, r2.z
					    rcp r3.w, r2.w
					    mul r1, r1, r3
					    mul r0.yzw, r1.y, c1.xxyz
					    mad r0.yzw, c0.xxyz, r1.x, r0
					    mad r0.yzw, c2.xxyz, r1.z, r0
					    mad r0.yzw, c3.xxyz, r1.w, r0
					    mul r1.x, r6.y, r6.y
					    mad r1.x, r6.x, r6.x, -r1.x
					    mul r2, r6.ywzx, r6
					    dp4 r3.x, c19, r2
					    dp4 r3.y, c20, r2
					    dp4 r3.z, c21, r2
					    mad r1.xyz, c22, r1.x, r3
					    add o7.xyz, r0.yzww, r1
					    mov r7.z, r0.x
					    mov o9.x, r0.x
					    mul r0.xyz, c29.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c29.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, r0, r6.wxyw
					    mad r1.xyz, r6.ywxw, r0.yzxw, -r1
					    mul r1.xyz, r1, -c23.w
					    mov o4.y, r1.x
					    mov o4.z, r6.x
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r1.y
					    mov o6.y, r1.z
					    mov o5.z, r6.y
					    mov o6.z, r6.w
					    mov o8.xy, c29.x
					    mov o10, c29.x
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 87 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_1_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_1_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_3_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec3 u_xlat6;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat6.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat1.xxx + u_xlat6.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2 = vec4(u_xlat15) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    vs_TEXCOORD3.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD4.z = u_xlat2.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat2.w;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat15 = u_xlat2.y * u_xlat2.y;
					    u_xlat15 = u_xlat2.x * u_xlat2.x + (-u_xlat15);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat1.xyz = unity_SHC.xyz * vec3(u_xlat15) + u_xlat2.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   float4 unity_4LightAtten0;
					//   float4 unity_4LightPosX0;
					//   float4 unity_4LightPosY0;
					//   float4 unity_4LightPosZ0;
					//   float4 unity_LightColor[8];
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_LightColor           c0       4
					//   unity_ObjectToWorld        c4       4
					//   unity_MatrixVP             c8       4
					//   unity_WorldToObject        c12      3
					//   _ProjectionParams          c15      1
					//   unity_4LightPosX0          c16      1
					//   unity_4LightPosY0          c17      1
					//   unity_4LightPosZ0          c18      1
					//   unity_4LightAtten0         c19      1
					//   unity_SHBr                 c20      1
					//   unity_SHBg                 c21      1
					//   unity_SHBb                 c22      1
					//   unity_SHC                  c23      1
					//   unity_WorldTransformParams c24      1
					//   _Control_ST                c25      1
					//   _Splat0_ST                 c26      1
					//   _Splat1_ST                 c27      1
					//   _Splat2_ST                 c28      1
					//   _Splat3_ST                 c29      1
					//
					
					    vs_3_0
					    def c30, 0, 1, 9.99999997e-007, 0.5
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8
					    dcl_texcoord8 o9.x
					    dcl_texcoord9 o10
					    mad o1.xy, v2, c25, c25.zwzw
					    mad o1.zw, v2.xyxy, c26.xyxy, c26
					    mad o2.xy, v2, c27, c27.zwzw
					    mad o2.zw, v2.xyxy, c28.xyxy, c28
					    mad o3.xy, v2, c29, c29.zwzw
					    dp4 r0.x, c5, v0
					    add r1, -r0.x, c17
					    mov o5.w, r0.x
					    mul r0, r1, r1
					    dp4 r2.x, c4, v0
					    add r3, -r2.x, c16
					    mov o4.w, r2.x
					    mad r0, r3, r3, r0
					    dp4 r2.x, c6, v0
					    add r4, -r2.x, c18
					    mov o6.w, r2.x
					    mad r0, r4, r4, r0
					    max r0, r0, c30.z
					    rsq r2.x, r0.x
					    rsq r2.y, r0.y
					    rsq r2.z, r0.z
					    rsq r2.w, r0.w
					    mov r5.y, c30.y
					    mad r0, r0, c19, r5.y
					    mul r5, c13.xyzz, v1.y
					    mad r5, v1.x, c12.xyzz, r5
					    mad r5, v1.z, c14.xyzz, r5
					    dp3 r6.x, r5.xyww, r5.xyww
					    rsq r6.x, r6.x
					    mul r5, r5, r6.x
					    mul r1, r1, r5.y
					    mad r1, r3, r5.x, r1
					    mad r1, r4, r5.wwzw, r1
					    mul r1, r2, r1
					    max r1, r1, c30.x
					    rcp r2.x, r0.x
					    rcp r2.y, r0.y
					    rcp r2.z, r0.z
					    rcp r2.w, r0.w
					    mul r0, r1, r2
					    mul r1.xyz, r0.y, c1
					    mad r1.xyz, c0, r0.x, r1
					    mad r0.xyz, c2, r0.z, r1
					    mad r0.xyz, c3, r0.w, r0
					    mul r0.w, r5.y, r5.y
					    mad r0.w, r5.x, r5.x, -r0.w
					    mul r1, r5.ywzx, r5
					    dp4 r2.x, c20, r1
					    dp4 r2.y, c21, r1
					    dp4 r2.z, c22, r1
					    mad r1.xyz, c23, r0.w, r2
					    add o7.xyz, r0, r1
					    mad r0, v0.xyzx, c30.yyyx, c30.xxxy
					    dp4 r1.x, c4, r0
					    dp4 r1.y, c5, r0
					    dp4 r1.z, c6, r0
					    dp4 r1.w, c7, r0
					    dp4 r0.x, c8, r1
					    dp4 r0.w, c11, r1
					    mul r2.xz, r0.xyww, c30.w
					    dp4 r0.y, c9, r1
					    dp4 r0.z, c10, r1
					    mul r1.x, r0.y, c15.x
					    mov r7, r0
					    mov o8.zw, r0
					    mov o9.x, r0.z
					    mul r2.w, r1.x, c30.w
					    add o8.xy, r2.z, r2.xwzw
					    mul r0.xyz, c30.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c30.yxxw, -r0
					    dp3 r1.z, c4, r0
					    dp3 r1.x, c5, r0
					    dp3 r1.y, c6, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, r0, r5.wxyw
					    mad r1.xyz, r5.ywxw, r0.yzxw, -r1
					    mul r1.xyz, r1, -c24.w
					    mov o4.y, r1.x
					    mov o4.z, r5.x
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r1.y
					    mov o6.y, r1.z
					    mov o5.z, r5.y
					    mov o6.z, r5.w
					    mov o10, c30.x
					    mad o0.xy, r7.w, c255, r7
					    mov o0.zw, r7
					
					// approximately 91 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[2];
						vec4 unity_4LightPosX0;
						vec4 unity_4LightPosY0;
						vec4 unity_4LightPosZ0;
						vec4 unity_4LightAtten0;
						vec4 unity_LightColor[8];
						vec4 unused_2_6[34];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_11[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec4 vs_TEXCOORD9;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat8;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD7.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat8.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = unity_ObjectToWorld[0].yzx * u_xlat2.xxx + u_xlat8.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat3 = vec4(u_xlat18) * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat4.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat4.x;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    vs_TEXCOORD3.z = u_xlat3.x;
					    vs_TEXCOORD4.x = u_xlat2.x;
					    vs_TEXCOORD5.x = u_xlat2.y;
					    vs_TEXCOORD4.y = u_xlat4.y;
					    vs_TEXCOORD5.y = u_xlat4.z;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD4.z = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD5.z = u_xlat3.w;
					    u_xlat2 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat3.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat2 * u_xlat2 + u_xlat4;
					    u_xlat2 = u_xlat2 * u_xlat3.xxxx + u_xlat5;
					    u_xlat2 = u_xlat0 * u_xlat3.wwzw + u_xlat2;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat4;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat2 = u_xlat2 * u_xlat4;
					    u_xlat2 = max(u_xlat2, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat18 = u_xlat3.y * u_xlat3.y;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + (-u_xlat18);
					    u_xlat2 = u_xlat3.ywzx * u_xlat3;
					    u_xlat3.x = dot(unity_SHBr, u_xlat2);
					    u_xlat3.y = dot(unity_SHBg, u_xlat2);
					    u_xlat3.z = dot(unity_SHBb, u_xlat2);
					    u_xlat2.xyz = unity_SHC.xyz * vec3(u_xlat18) + u_xlat3.xyz;
					    vs_TEXCOORD6.xyz = u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD9 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   float4 _LightColor0;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   float _Shininess;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   _WorldSpaceLightPos0 c1       1
					//   unity_SHAr           c2       1
					//   unity_SHAg           c3       1
					//   unity_SHAb           c4       1
					//   _LightColor0         c5       1
					//   _SpecColor           c6       1
					//   _Shininess           c7       1
					//   _Parallax            c8       1
					//   _Color               c9       1
					//   _Blur                c10      1
					//   _Mask1               s0       1
					//   _Normalmap           s1       1
					//   _Splat0              s2       1
					//   _Splat1              s3       1
					//   _Splat2              s4       1
					//   _Splat3              s5       1
					//   _Normal0             s6       1
					//   _Normal1             s7       1
					//   _Normal2             s8       1
					//   _Normal3             s9       1
					//   _ColorTex            s10      1
					//   _HeightSplatAll      s11      1
					//
					
					    ps_3_0
					    def c11, 0.5, 0.419999987, 0, 6
					    def c12, 2, -1, 1, 20
					    def c13, 1.5, 128, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5
					    dcl_texcoord6_pp v6.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    mov r0.x, v3.w
					    mov r0.y, v4.w
					    mov r0.z, v5.w
					    add r0.xyz, -r0, c0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    mad_pp r0.xyz, r0, r0.w, c1
					    nrm_pp r2.xyz, r0
					    mul r0.xyz, r1.y, v4
					    mad r0.xyz, v3, r1.x, r0
					    mad_pp r0.xyz, v5, r1.z, r0
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    mad r0.z, r0.z, r0.w, c11.y
					    mul r0.xy, r0.w, r0
					    rcp r0.z, r0.z
					    mul r0.xy, r0.z, r0
					    texld_pp r1, v0.zwzw, s11
					    mov r3.x, c11.x
					    mul_pp r0.z, r3.x, c8.x
					    mad_pp r0.w, r1.x, c8.x, -r0.z
					    mad r1.yz, r0.w, r0.xxyw, v0.xzww
					    texld r3, r1.yzzw, s2
					    texld r4, r1.yzzw, s6
					    texld_pp r5, v0, s10
					    mul_pp r3, r3, r5
					    texld_pp r6, v1, s11
					    mad_pp r0.w, r6.y, c8.x, -r0.z
					    mad r1.yz, r0.w, r0.xxyw, v1.xxyw
					    texld r7, r1.yzzw, s3
					    texld r8, r1.yzzw, s7
					    mul_pp r7, r5, r7
					    texld_pp r9, v0, s0
					    add r0.w, r1.x, r9.x
					    add r1.x, r6.y, r9.y
					    max r2.w, r0.w, r1.x
					    texld_pp r6, v1.zwzw, s11
					    add r1.y, r9.z, r6.z
					    max r4.x, r2.w, r1.y
					    texld_pp r6, v2, s11
					    add r1.z, r9.w, r6.w
					    mad_pp r0.z, r6.w, c8.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    max r0.z, r4.x, r1.z
					    add r0.z, r0.z, -c10.x
					    add r1.x, -r0.z, r1.x
					    max r2.w, r1.x, c11.z
					    mul r6, r2.w, r7
					    add r0.w, -r0.z, r0.w
					    max r1.x, r0.w, c11.z
					    mad r3, r3, r1.x, r6
					    add r0.w, -r0.z, r1.y
					    add r0.z, -r0.z, r1.z
					    max r1.y, r0.w, c11.z
					    texld r6, v1.zwzw, s4
					    mul_pp r6, r5, r6
					    mad r3, r6, r1.y, r3
					    texld r6, r0, s5
					    texld r7, r0, s9
					    mul_pp r5, r5, r6
					    mul r0.x, r0.z, c11.w
					    cmp r0.x, r0.z, r0.x, c11.z
					    mad r3, r5, r0.x, r3
					    add r0.y, r2.w, r1.x
					    mul r0.zw, r2.w, r8.xywy
					    mad r0.zw, r4.xywy, r1.x, r0
					    add r0.y, r1.y, r0.y
					    add r0.y, r0.x, r0.y
					    rcp r0.y, r0.y
					    mul_pp r3, r0.y, r3
					    texld r4, v1.zwzw, s8
					    mad r0.zw, r4.xywy, r1.y, r0
					    mad r0.xz, r7.wyyw, r0.x, r0.zyww
					    mul_pp r0.xy, r0.y, r0.xzzw
					    mad_pp r0.xy, r0, c12.x, c12.y
					    dp2add_sat_pp r0.w, r0, r0, c11.z
					    add_pp r0.w, -r0.w, c12.z
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.z, r0.w
					    texld_pp r1, v0, s1
					    mad_pp r1.xy, r1.wyzw, c12.x, c12.y
					    dp2add_sat_pp r0.w, r1, r1, c11.z
					    add_pp r0.w, -r0.w, c12.z
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    mad_pp r0.xyz, r0, c12.w, r1
					    nrm_pp r1.xyz, r0
					    mul_pp r0.xyz, r1, c13.x
					    dp3_pp r1.x, v3, r0
					    dp3_pp r1.y, v4, r0
					    dp3_pp r1.z, v5, r0
					    dp3_pp r0.x, r1, r2
					    max r2.x, r0.x, c11.z
					    mov r0.y, c13.y
					    mul r0.x, r0.y, c7.x
					    pow r4.x, r2.x, r0.x
					    mul r0.x, r3.w, r4.x
					    mul_pp r0.yzw, r3.xxyz, c9.xxyz
					    mov r2.xyz, c5
					    mul r2.xyz, r2, c6
					    mul r2.xyz, r0.x, r2
					    mul_pp r3.xyz, r0.yzww, c5
					    dp3_pp r0.x, r1, c1
					    max_pp r2.w, r0.x, c11.z
					    mad_pp r2.xyz, r3, r2.w, r2
					    mov_pp r1.w, c12.z
					    dp4_pp r3.x, c2, r1
					    dp4_pp r3.y, c3, r1
					    dp4_pp r3.z, c4, r1
					    add_pp r1.xyz, r3, v6
					    max_pp r3.xyz, r1, c11.z
					    mad_pp oC0.xyz, r0.yzww, r3, r2
					    mov_pp oC0.w, c12.z
					
					// approximately 122 instruction slots used (15 texture, 107 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _Shininess;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_7[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					float u_xlat17;
					float u_xlat26;
					vec2 u_xlat28;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					bool u_xlatb41;
					float u_xlat43;
					void main()
					{
					    u_xlat13.x = vs_TEXCOORD3.w;
					    u_xlat13.y = vs_TEXCOORD4.w;
					    u_xlat13.z = vs_TEXCOORD5.w;
					    u_xlat1.xyz = (-u_xlat13.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD4.xyz;
					    u_xlat2.xyw = vs_TEXCOORD3.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD5.xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat16.xy = vec2(_Parallax, _Shininess) * vec2(0.5, 128.0);
					    u_xlat40 = u_xlat3.x * _Parallax + (-u_xlat16.x);
					    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat2.xy = vec2(u_xlat41) * u_xlat2.xy;
					    u_xlat28.x = u_xlat2.z * u_xlat41 + 0.419999987;
					    u_xlat2.xy = u_xlat2.xy / u_xlat28.xx;
					    u_xlat28.xy = vec2(u_xlat40) * u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat4 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat40 = u_xlat4.y * _Parallax + (-u_xlat16.x);
					    u_xlat4.xz = vec2(u_xlat40) * u_xlat2.xy + vs_TEXCOORD1.xy;
					    u_xlat5 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat40 = u_xlat5.w * _Parallax + (-u_xlat16.x);
					    u_xlat2.xy = vec2(u_xlat40) * u_xlat2.xy + vs_TEXCOORD2.xy;
					    u_xlat6 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat7 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat8 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat9 = texture(_Splat0, u_xlat28.xy);
					    u_xlat9 = u_xlat6 * u_xlat9;
					    u_xlat10 = texture(_Splat1, u_xlat4.xz);
					    u_xlat10 = u_xlat6 * u_xlat10;
					    u_xlat11 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat11 = u_xlat6 * u_xlat11;
					    u_xlat12 = texture(_Splat3, u_xlat2.xy);
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat12 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat40 = u_xlat3.x + u_xlat7.x;
					    u_xlat3.x = u_xlat4.y + u_xlat7.y;
					    u_xlat16.x = max(u_xlat40, u_xlat3.x);
					    u_xlat3.w = u_xlat7.z + u_xlat12.z;
					    u_xlat16.x = max(u_xlat3.w, u_xlat16.x);
					    u_xlat17 = u_xlat5.w + u_xlat7.w;
					    u_xlat16.x = max(u_xlat16.x, u_xlat17);
					    u_xlat16.x = u_xlat16.x + (-_Blur);
					    u_xlat40 = u_xlat40 + (-u_xlat16.x);
					    u_xlat40 = max(u_xlat40, 0.0);
					    u_xlat3.xw = (-u_xlat16.xx) + u_xlat3.xw;
					    u_xlat3.y = (-u_xlat16.x) + u_xlat17;
					    u_xlat3.xyw = max(u_xlat3.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat17 = u_xlat3.y * 6.0;
					    u_xlat5 = u_xlat3.xxxx * u_xlat10;
					    u_xlat5 = u_xlat9 * vec4(u_xlat40) + u_xlat5;
					    u_xlat5 = u_xlat11 * u_xlat3.wwww + u_xlat5;
					    u_xlat5 = u_xlat6 * vec4(u_xlat17) + u_xlat5;
					    u_xlat43 = u_xlat40 + u_xlat3.x;
					    u_xlat43 = u_xlat3.w + u_xlat43;
					    u_xlat16.x = u_xlat3.y * 6.0 + u_xlat43;
					    u_xlat5 = u_xlat5 / u_xlat16.xxxx;
					    u_xlat6 = texture(_Normal0, u_xlat28.xy);
					    u_xlat7 = texture(_Normal1, u_xlat4.xz);
					    u_xlat9 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Normal3, u_xlat2.xy);
					    u_xlat2.xz = u_xlat3.xx * u_xlat7.wy;
					    u_xlat2.xz = u_xlat6.wy * vec2(u_xlat40) + u_xlat2.xz;
					    u_xlat2.xz = u_xlat9.wy * u_xlat3.ww + u_xlat2.xz;
					    u_xlat2.xy = u_xlat2.wy * vec2(u_xlat17) + u_xlat2.xz;
					    u_xlat2.xy = u_xlat2.xy / u_xlat16.xx;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat40 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat40 = min(u_xlat40, 1.0);
					    u_xlat40 = (-u_xlat40) + 1.0;
					    u_xlat2.z = sqrt(u_xlat40);
					    u_xlat4.xy = u_xlat8.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat40 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat40 = min(u_xlat40, 1.0);
					    u_xlat40 = (-u_xlat40) + 1.0;
					    u_xlat4.z = sqrt(u_xlat40);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(20.0, 20.0, 20.0) + u_xlat4.xyz;
					    u_xlat40 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.xyw = u_xlat5.xyz * _Color.xyz;
					    u_xlatb40 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb40){
					        u_xlatb41 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb41)) ? u_xlat4.xyz : u_xlat13.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat41 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat17 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat41, u_xlat17);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat41 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
					    u_xlat4.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = vec3(u_xlat41) * _LightColor0.xyz;
					    if(u_xlatb40){
					        u_xlatb40 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat13.xyz = (bool(u_xlatb40)) ? u_xlat5.xyz : u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat13.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat13.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat6.y * 0.25;
					        u_xlat26 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat39 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat13.x = max(u_xlat26, u_xlat13.x);
					        u_xlat6.x = min(u_xlat39, u_xlat13.x);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat13.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat13.xyz);
					        u_xlat13.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat13.xyz);
					        u_xlat4.w = 1.0;
					        u_xlat5.x = dot(u_xlat7, u_xlat4);
					        u_xlat5.y = dot(u_xlat8, u_xlat4);
					        u_xlat5.z = dot(u_xlat6, u_xlat4);
					    } else {
					        u_xlat4.w = 1.0;
					        u_xlat5.x = dot(unity_SHAr, u_xlat4);
					        u_xlat5.y = dot(unity_SHAg, u_xlat4);
					        u_xlat5.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat0.yzw = u_xlat5.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat16.y;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat5.w * u_xlat1.x;
					    u_xlat14.xyz = u_xlat2.xyz * u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat14.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat3.xyw * u_xlat0.yzw + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   sampler2D _ShadowMapTexture;
					//   float _Shininess;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   _WorldSpaceCameraPos          c3       1
					//   _WorldSpaceLightPos0          c4       1
					//   unity_SHAr                    c5       1
					//   unity_SHAg                    c6       1
					//   unity_SHAb                    c7       1
					//   _LightShadowData              c8       1
					//   unity_ShadowFadeCenterAndType c9       1
					//   _LightColor0                  c10      1
					//   _SpecColor                    c11      1
					//   _Shininess                    c12      1
					//   _Parallax                     c13      1
					//   _Color                        c14      1
					//   _Blur                         c15      1
					//   _ShadowMapTexture             s0       1
					//   _Mask1                        s1       1
					//   _Normalmap                    s2       1
					//   _Splat0                       s3       1
					//   _Splat1                       s4       1
					//   _Splat2                       s5       1
					//   _Splat3                       s6       1
					//   _Normal0                      s7       1
					//   _Normal1                      s8       1
					//   _Normal2                      s9       1
					//   _Normal3                      s10      1
					//   _ColorTex                     s11      1
					//   _HeightSplatAll               s12      1
					//
					
					    ps_3_0
					    def c16, 0.5, 0.419999987, 0, 6
					    def c17, 2, -1, 1, 20
					    def c18, 1.5, 128, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5
					    dcl_texcoord6_pp v6.xyz
					    dcl_texcoord7 v7
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    dcl_2d s12
					    mov r0.x, v3.w
					    mov r0.y, v4.w
					    mov r0.z, v5.w
					    add r1.xyz, -r0, c3
					    add r0.xyz, r0, -c9
					    dp3 r0.x, r0, r0
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul_pp r2.xyz, r0.y, r1
					    mad_pp r0.yzw, r1.xxyz, r0.y, c4.xxyz
					    dp3 r1.x, r1, c2
					    lrp r2.w, c9.w, r0.x, r1.x
					    mad_sat_pp r0.x, r2.w, c8.z, c8.w
					    nrm_pp r1.xyz, r0.yzww
					    mul r0.yzw, r2.y, v4.xxyz
					    mad r0.yzw, v3.xxyz, r2.x, r0
					    mad_pp r0.yzw, v5.xxyz, r2.z, r0
					    dp3_pp r1.w, r0.yzww, r0.yzww
					    rsq_pp r1.w, r1.w
					    mad r0.w, r0.w, r1.w, c16.y
					    mul r0.yz, r0, r1.w
					    rcp r0.w, r0.w
					    mul r0.yz, r0.w, r0
					    texld_pp r2, v1, s12
					    mov r2.x, c16.x
					    mul_pp r0.w, r2.x, c13.x
					    mad_pp r1.w, r2.y, c13.x, -r0.w
					    mad r2.xz, r1.w, r0.yyzw, v1.xyyw
					    texld r3, r2.xzzw, s4
					    texld r4, r2.xzzw, s8
					    texld_pp r5, v0, s11
					    mul_pp r3, r3, r5
					    texld_pp r6, v0, s1
					    add r1.w, r2.y, r6.y
					    texld_pp r2, v0.zwzw, s12
					    add r2.y, r6.x, r2.x
					    mad_pp r2.x, r2.x, c13.x, -r0.w
					    mad r2.xz, r2.x, r0.yyzw, v0.zyww
					    max r4.x, r2.y, r1.w
					    texld_pp r7, v1.zwzw, s12
					    add r2.w, r6.z, r7.z
					    max r6.x, r4.x, r2.w
					    texld_pp r7, v2, s12
					    add r4.x, r6.w, r7.w
					    mad_pp r0.w, r7.w, c13.x, -r0.w
					    mad r0.yz, r0.w, r0, v2.xxyw
					    max r0.w, r6.x, r4.x
					    add r0.w, r0.w, -c15.x
					    add r1.w, -r0.w, r1.w
					    max r4.z, r1.w, c16.z
					    mul r3, r3, r4.z
					    texld r6, r2.xzzw, s3
					    texld r7, r2.xzzw, s7
					    mul_pp r6, r5, r6
					    add r1.w, -r0.w, r2.y
					    max r2.x, r1.w, c16.z
					    mad r3, r6, r2.x, r3
					    add r1.w, -r0.w, r2.w
					    add r0.w, -r0.w, r4.x
					    max r2.y, r1.w, c16.z
					    texld r6, v1.zwzw, s5
					    mul_pp r6, r5, r6
					    mad r3, r6, r2.y, r3
					    texld r6, r0.yzzw, s6
					    texld r8, r0.yzzw, s10
					    mul_pp r5, r5, r6
					    mul r0.y, r0.w, c16.w
					    cmp r0.y, r0.w, r0.y, c16.z
					    mad r3, r5, r0.y, r3
					    add r0.z, r4.z, r2.x
					    mul r2.zw, r4.z, r4.xywy
					    mad r2.xz, r7.wyyw, r2.x, r2.zyww
					    add r0.z, r2.y, r0.z
					    add r0.z, r0.y, r0.z
					    rcp r0.z, r0.z
					    mul_pp r3, r0.z, r3
					    texld r4, v1.zwzw, s9
					    mad r2.xy, r4.wyzw, r2.y, r2.xzzw
					    mad r0.yw, r8.xwzy, r0.y, r2.xxzy
					    mul_pp r0.yz, r0.z, r0.xyww
					    mad_pp r2.xy, r0.yzzw, c17.x, c17.y
					    dp2add_sat_pp r0.y, r2, r2, c16.z
					    add_pp r0.y, -r0.y, c17.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r2.z, r0.y
					    texld_pp r4, v0, s2
					    mad_pp r4.xy, r4.wyzw, c17.x, c17.y
					    dp2add_sat_pp r0.y, r4, r4, c16.z
					    add_pp r0.y, -r0.y, c17.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r4.z, r0.y
					    mad_pp r0.yzw, r2.xxyz, c17.w, r4.xxyz
					    nrm_pp r2.xyz, r0.yzww
					    mul_pp r0.yzw, r2.xxyz, c18.x
					    dp3_pp r2.x, v3, r0.yzww
					    dp3_pp r2.y, v4, r0.yzww
					    dp3_pp r2.z, v5, r0.yzww
					    dp3_pp r0.y, r2, r1
					    max r1.x, r0.y, c16.z
					    mov r0.y, c18.y
					    mul r0.y, r0.y, c12.x
					    pow r4.x, r1.x, r0.y
					    mul r0.y, r3.w, r4.x
					    mul_pp r1.xyz, r3, c14
					    texldp_pp r3, v7, s0
					    add_sat_pp r0.x, r0.x, r3.x
					    mul_pp r0.xzw, r0.x, c10.xyyz
					    mul r3.xyz, r0.xzww, c11
					    mul_pp r0.xzw, r0, r1.xyyz
					    mul r3.xyz, r0.y, r3
					    dp3_pp r0.y, r2, c4
					    max_pp r1.w, r0.y, c16.z
					    mad_pp r0.xyz, r0.xzww, r1.w, r3
					    mov_pp r2.w, c17.z
					    dp4_pp r3.x, c5, r2
					    dp4_pp r3.y, c6, r2
					    dp4_pp r3.z, c7, r2
					    add_pp r2.xyz, r3, v6
					    max_pp r3.xyz, r2, c16.z
					    mad_pp oC0.xyz, r1, r3, r0
					    mov_pp oC0.w, c17.z
					
					// approximately 131 instruction slots used (16 texture, 115 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _Shininess;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_7[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec3 u_xlat17;
					float u_xlat26;
					vec2 u_xlat28;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					bool u_xlatb41;
					float u_xlat43;
					void main()
					{
					    u_xlat13.x = vs_TEXCOORD3.w;
					    u_xlat13.y = vs_TEXCOORD4.w;
					    u_xlat13.z = vs_TEXCOORD5.w;
					    u_xlat1.xyz = (-u_xlat13.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD4.xyz;
					    u_xlat2.xyw = vs_TEXCOORD3.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD5.xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat16.xy = vec2(_Parallax, _Shininess) * vec2(0.5, 128.0);
					    u_xlat40 = u_xlat3.x * _Parallax + (-u_xlat16.x);
					    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat2.xy = vec2(u_xlat41) * u_xlat2.xy;
					    u_xlat28.x = u_xlat2.z * u_xlat41 + 0.419999987;
					    u_xlat2.xy = u_xlat2.xy / u_xlat28.xx;
					    u_xlat28.xy = vec2(u_xlat40) * u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat4 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat40 = u_xlat4.y * _Parallax + (-u_xlat16.x);
					    u_xlat4.xz = vec2(u_xlat40) * u_xlat2.xy + vs_TEXCOORD1.xy;
					    u_xlat5 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat40 = u_xlat5.w * _Parallax + (-u_xlat16.x);
					    u_xlat2.xy = vec2(u_xlat40) * u_xlat2.xy + vs_TEXCOORD2.xy;
					    u_xlat6 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat7 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat8 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat9 = texture(_Splat0, u_xlat28.xy);
					    u_xlat9 = u_xlat6 * u_xlat9;
					    u_xlat10 = texture(_Splat1, u_xlat4.xz);
					    u_xlat10 = u_xlat6 * u_xlat10;
					    u_xlat11 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat11 = u_xlat6 * u_xlat11;
					    u_xlat12 = texture(_Splat3, u_xlat2.xy);
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat12 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat40 = u_xlat3.x + u_xlat7.x;
					    u_xlat3.x = u_xlat4.y + u_xlat7.y;
					    u_xlat16.x = max(u_xlat40, u_xlat3.x);
					    u_xlat3.w = u_xlat7.z + u_xlat12.z;
					    u_xlat16.x = max(u_xlat3.w, u_xlat16.x);
					    u_xlat17.x = u_xlat5.w + u_xlat7.w;
					    u_xlat16.x = max(u_xlat16.x, u_xlat17.x);
					    u_xlat16.x = u_xlat16.x + (-_Blur);
					    u_xlat40 = u_xlat40 + (-u_xlat16.x);
					    u_xlat40 = max(u_xlat40, 0.0);
					    u_xlat3.xw = (-u_xlat16.xx) + u_xlat3.xw;
					    u_xlat3.y = (-u_xlat16.x) + u_xlat17.x;
					    u_xlat3.xyw = max(u_xlat3.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat17.x = u_xlat3.y * 6.0;
					    u_xlat5 = u_xlat3.xxxx * u_xlat10;
					    u_xlat5 = u_xlat9 * vec4(u_xlat40) + u_xlat5;
					    u_xlat5 = u_xlat11 * u_xlat3.wwww + u_xlat5;
					    u_xlat5 = u_xlat6 * u_xlat17.xxxx + u_xlat5;
					    u_xlat43 = u_xlat40 + u_xlat3.x;
					    u_xlat43 = u_xlat3.w + u_xlat43;
					    u_xlat16.x = u_xlat3.y * 6.0 + u_xlat43;
					    u_xlat5 = u_xlat5 / u_xlat16.xxxx;
					    u_xlat6 = texture(_Normal0, u_xlat28.xy);
					    u_xlat7 = texture(_Normal1, u_xlat4.xz);
					    u_xlat9 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Normal3, u_xlat2.xy);
					    u_xlat2.xz = u_xlat3.xx * u_xlat7.wy;
					    u_xlat2.xz = u_xlat6.wy * vec2(u_xlat40) + u_xlat2.xz;
					    u_xlat2.xz = u_xlat9.wy * u_xlat3.ww + u_xlat2.xz;
					    u_xlat2.xy = u_xlat2.wy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat2.xy = u_xlat2.xy / u_xlat16.xx;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat40 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat40 = min(u_xlat40, 1.0);
					    u_xlat40 = (-u_xlat40) + 1.0;
					    u_xlat2.z = sqrt(u_xlat40);
					    u_xlat4.xy = u_xlat8.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat40 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat40 = min(u_xlat40, 1.0);
					    u_xlat40 = (-u_xlat40) + 1.0;
					    u_xlat4.z = sqrt(u_xlat40);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(20.0, 20.0, 20.0) + u_xlat4.xyz;
					    u_xlat40 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.xyw = u_xlat5.xyz * _Color.xyz;
					    u_xlat4.x = unity_MatrixV[0].z;
					    u_xlat4.y = unity_MatrixV[1].z;
					    u_xlat4.z = unity_MatrixV[2].z;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat13.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat41 = sqrt(u_xlat41);
					    u_xlat41 = (-u_xlat40) + u_xlat41;
					    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat41 + u_xlat40;
					    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
					    u_xlatb41 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb41){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat17.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat17.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat17.xyz;
					        u_xlat17.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat17.xyz;
					        u_xlat17.xyz = u_xlat17.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat17.xyz : u_xlat13.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat17.x = u_xlat4.y * 0.25 + 0.75;
					        u_xlat5.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat17.x, u_xlat5.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat4.x = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6 = texture(_ShadowMapTexture, u_xlat17.xy);
					    u_xlat40 = u_xlat40 + u_xlat6.x;
					    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
					    u_xlat4.x = min(u_xlat40, u_xlat4.x);
					    u_xlat40 = (u_xlatb41) ? u_xlat4.x : u_xlat40;
					    u_xlat4.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = vec3(u_xlat40) * _LightColor0.xyz;
					    if(u_xlatb41){
					        u_xlatb40 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat13.xyz = (bool(u_xlatb40)) ? u_xlat5.xyz : u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat13.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat13.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat6.y * 0.25;
					        u_xlat26 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat39 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat13.x = max(u_xlat26, u_xlat13.x);
					        u_xlat6.x = min(u_xlat39, u_xlat13.x);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat13.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat13.xyz);
					        u_xlat13.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat13.xyz);
					        u_xlat4.w = 1.0;
					        u_xlat5.x = dot(u_xlat7, u_xlat4);
					        u_xlat5.y = dot(u_xlat8, u_xlat4);
					        u_xlat5.z = dot(u_xlat6, u_xlat4);
					    } else {
					        u_xlat4.w = 1.0;
					        u_xlat5.x = dot(unity_SHAr, u_xlat4);
					        u_xlat5.y = dot(unity_SHAg, u_xlat4);
					        u_xlat5.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat0.yzw = u_xlat5.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat16.y;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat5.w * u_xlat1.x;
					    u_xlat14.xyz = u_xlat2.xyz * u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat14.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat3.xyw * u_xlat0.yzw + u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   float4 _LightColor0;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   float _Shininess;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   _WorldSpaceLightPos0 c1       1
					//   unity_SHAr           c2       1
					//   unity_SHAg           c3       1
					//   unity_SHAb           c4       1
					//   unity_FogColor       c5       1
					//   unity_FogParams      c6       1
					//   _LightColor0         c7       1
					//   _SpecColor           c8       1
					//   _Shininess           c9       1
					//   _Parallax            c10      1
					//   _Color               c11      1
					//   _Blur                c12      1
					//   _Mask1               s0       1
					//   _Normalmap           s1       1
					//   _Splat0              s2       1
					//   _Splat1              s3       1
					//   _Splat2              s4       1
					//   _Splat3              s5       1
					//   _Normal0             s6       1
					//   _Normal1             s7       1
					//   _Normal2             s8       1
					//   _Normal3             s9       1
					//   _ColorTex            s10      1
					//   _HeightSplatAll      s11      1
					//
					
					    ps_3_0
					    def c13, 0.5, 0.419999987, 0, 6
					    def c14, 2, -1, 1, 20
					    def c15, 1.5, 128, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5
					    dcl_texcoord6_pp v6.xyz
					    dcl_texcoord8 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    mov r0.x, v3.w
					    mov r0.y, v4.w
					    mov r0.z, v5.w
					    add r0.xyz, -r0, c0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    mad_pp r0.xyz, r0, r0.w, c1
					    nrm_pp r2.xyz, r0
					    mul r0.xyz, r1.y, v4
					    mad r0.xyz, v3, r1.x, r0
					    mad_pp r0.xyz, v5, r1.z, r0
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    mad r0.z, r0.z, r0.w, c13.y
					    mul r0.xy, r0.w, r0
					    rcp r0.z, r0.z
					    mul r0.xy, r0.z, r0
					    texld_pp r1, v0.zwzw, s11
					    mov r3.x, c13.x
					    mul_pp r0.z, r3.x, c10.x
					    mad_pp r0.w, r1.x, c10.x, -r0.z
					    mad r1.yz, r0.w, r0.xxyw, v0.xzww
					    texld r3, r1.yzzw, s2
					    texld r4, r1.yzzw, s6
					    texld_pp r5, v0, s10
					    mul_pp r3, r3, r5
					    texld_pp r6, v1, s11
					    mad_pp r0.w, r6.y, c10.x, -r0.z
					    mad r1.yz, r0.w, r0.xxyw, v1.xxyw
					    texld r7, r1.yzzw, s3
					    texld r8, r1.yzzw, s7
					    mul_pp r7, r5, r7
					    texld_pp r9, v0, s0
					    add r0.w, r1.x, r9.x
					    add r1.x, r6.y, r9.y
					    max r2.w, r0.w, r1.x
					    texld_pp r6, v1.zwzw, s11
					    add r1.y, r9.z, r6.z
					    max r4.x, r2.w, r1.y
					    texld_pp r6, v2, s11
					    add r1.z, r9.w, r6.w
					    mad_pp r0.z, r6.w, c10.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    max r0.z, r4.x, r1.z
					    add r0.z, r0.z, -c12.x
					    add r1.x, -r0.z, r1.x
					    max r2.w, r1.x, c13.z
					    mul r6, r2.w, r7
					    add r0.w, -r0.z, r0.w
					    max r1.x, r0.w, c13.z
					    mad r3, r3, r1.x, r6
					    add r0.w, -r0.z, r1.y
					    add r0.z, -r0.z, r1.z
					    max r1.y, r0.w, c13.z
					    texld r6, v1.zwzw, s4
					    mul_pp r6, r5, r6
					    mad r3, r6, r1.y, r3
					    texld r6, r0, s5
					    texld r7, r0, s9
					    mul_pp r5, r5, r6
					    mul r0.x, r0.z, c13.w
					    cmp r0.x, r0.z, r0.x, c13.z
					    mad r3, r5, r0.x, r3
					    add r0.y, r2.w, r1.x
					    mul r0.zw, r2.w, r8.xywy
					    mad r0.zw, r4.xywy, r1.x, r0
					    add r0.y, r1.y, r0.y
					    add r0.y, r0.x, r0.y
					    rcp r0.y, r0.y
					    mul_pp r3, r0.y, r3
					    texld r4, v1.zwzw, s8
					    mad r0.zw, r4.xywy, r1.y, r0
					    mad r0.xz, r7.wyyw, r0.x, r0.zyww
					    mul_pp r0.xy, r0.y, r0.xzzw
					    mad_pp r0.xy, r0, c14.x, c14.y
					    dp2add_sat_pp r0.w, r0, r0, c13.z
					    add_pp r0.w, -r0.w, c14.z
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.z, r0.w
					    texld_pp r1, v0, s1
					    mad_pp r1.xy, r1.wyzw, c14.x, c14.y
					    dp2add_sat_pp r0.w, r1, r1, c13.z
					    add_pp r0.w, -r0.w, c14.z
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    mad_pp r0.xyz, r0, c14.w, r1
					    nrm_pp r1.xyz, r0
					    mul_pp r0.xyz, r1, c15.x
					    dp3_pp r1.x, v3, r0
					    dp3_pp r1.y, v4, r0
					    dp3_pp r1.z, v5, r0
					    dp3_pp r0.x, r1, r2
					    max r2.x, r0.x, c13.z
					    mov r0.y, c15.y
					    mul r0.x, r0.y, c9.x
					    pow r4.x, r2.x, r0.x
					    mul r0.x, r3.w, r4.x
					    mul_pp r0.yzw, r3.xxyz, c11.xxyz
					    mov r2.xyz, c7
					    mul r2.xyz, r2, c8
					    mul r2.xyz, r0.x, r2
					    mul_pp r3.xyz, r0.yzww, c7
					    dp3_pp r0.x, r1, c1
					    max_pp r2.w, r0.x, c13.z
					    mad_pp r2.xyz, r3, r2.w, r2
					    mov_pp r1.w, c14.z
					    dp4_pp r3.x, c2, r1
					    dp4_pp r3.y, c3, r1
					    dp4_pp r3.z, c4, r1
					    add_pp r1.xyz, r3, v6
					    max_pp r3.xyz, r1, c13.z
					    mad_pp r0.xyz, r0.yzww, r3, r2
					    add r0.xyz, r0, -c5
					    mad_sat r0.w, v7.x, c6.z, c6.w
					    mad_pp oC0.xyz, r0.w, r0, c5
					    mov_pp oC0.w, c14.z
					
					// approximately 125 instruction slots used (15 texture, 110 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _Shininess;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_7[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  float vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					float u_xlat17;
					float u_xlat26;
					vec2 u_xlat28;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					bool u_xlatb41;
					float u_xlat43;
					void main()
					{
					    u_xlat13.x = vs_TEXCOORD3.w;
					    u_xlat13.y = vs_TEXCOORD4.w;
					    u_xlat13.z = vs_TEXCOORD5.w;
					    u_xlat1.xyz = (-u_xlat13.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD4.xyz;
					    u_xlat2.xyw = vs_TEXCOORD3.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD5.xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat16.xy = vec2(_Parallax, _Shininess) * vec2(0.5, 128.0);
					    u_xlat40 = u_xlat3.x * _Parallax + (-u_xlat16.x);
					    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat2.xy = vec2(u_xlat41) * u_xlat2.xy;
					    u_xlat28.x = u_xlat2.z * u_xlat41 + 0.419999987;
					    u_xlat2.xy = u_xlat2.xy / u_xlat28.xx;
					    u_xlat28.xy = vec2(u_xlat40) * u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat4 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat40 = u_xlat4.y * _Parallax + (-u_xlat16.x);
					    u_xlat4.xz = vec2(u_xlat40) * u_xlat2.xy + vs_TEXCOORD1.xy;
					    u_xlat5 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat40 = u_xlat5.w * _Parallax + (-u_xlat16.x);
					    u_xlat2.xy = vec2(u_xlat40) * u_xlat2.xy + vs_TEXCOORD2.xy;
					    u_xlat6 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat7 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat8 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat9 = texture(_Splat0, u_xlat28.xy);
					    u_xlat9 = u_xlat6 * u_xlat9;
					    u_xlat10 = texture(_Splat1, u_xlat4.xz);
					    u_xlat10 = u_xlat6 * u_xlat10;
					    u_xlat11 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat11 = u_xlat6 * u_xlat11;
					    u_xlat12 = texture(_Splat3, u_xlat2.xy);
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat12 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat40 = u_xlat3.x + u_xlat7.x;
					    u_xlat3.x = u_xlat4.y + u_xlat7.y;
					    u_xlat16.x = max(u_xlat40, u_xlat3.x);
					    u_xlat3.w = u_xlat7.z + u_xlat12.z;
					    u_xlat16.x = max(u_xlat3.w, u_xlat16.x);
					    u_xlat17 = u_xlat5.w + u_xlat7.w;
					    u_xlat16.x = max(u_xlat16.x, u_xlat17);
					    u_xlat16.x = u_xlat16.x + (-_Blur);
					    u_xlat40 = u_xlat40 + (-u_xlat16.x);
					    u_xlat40 = max(u_xlat40, 0.0);
					    u_xlat3.xw = (-u_xlat16.xx) + u_xlat3.xw;
					    u_xlat3.y = (-u_xlat16.x) + u_xlat17;
					    u_xlat3.xyw = max(u_xlat3.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat17 = u_xlat3.y * 6.0;
					    u_xlat5 = u_xlat3.xxxx * u_xlat10;
					    u_xlat5 = u_xlat9 * vec4(u_xlat40) + u_xlat5;
					    u_xlat5 = u_xlat11 * u_xlat3.wwww + u_xlat5;
					    u_xlat5 = u_xlat6 * vec4(u_xlat17) + u_xlat5;
					    u_xlat43 = u_xlat40 + u_xlat3.x;
					    u_xlat43 = u_xlat3.w + u_xlat43;
					    u_xlat16.x = u_xlat3.y * 6.0 + u_xlat43;
					    u_xlat5 = u_xlat5 / u_xlat16.xxxx;
					    u_xlat6 = texture(_Normal0, u_xlat28.xy);
					    u_xlat7 = texture(_Normal1, u_xlat4.xz);
					    u_xlat9 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Normal3, u_xlat2.xy);
					    u_xlat2.xz = u_xlat3.xx * u_xlat7.wy;
					    u_xlat2.xz = u_xlat6.wy * vec2(u_xlat40) + u_xlat2.xz;
					    u_xlat2.xz = u_xlat9.wy * u_xlat3.ww + u_xlat2.xz;
					    u_xlat2.xy = u_xlat2.wy * vec2(u_xlat17) + u_xlat2.xz;
					    u_xlat2.xy = u_xlat2.xy / u_xlat16.xx;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat40 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat40 = min(u_xlat40, 1.0);
					    u_xlat40 = (-u_xlat40) + 1.0;
					    u_xlat2.z = sqrt(u_xlat40);
					    u_xlat4.xy = u_xlat8.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat40 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat40 = min(u_xlat40, 1.0);
					    u_xlat40 = (-u_xlat40) + 1.0;
					    u_xlat4.z = sqrt(u_xlat40);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(20.0, 20.0, 20.0) + u_xlat4.xyz;
					    u_xlat40 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.xyw = u_xlat5.xyz * _Color.xyz;
					    u_xlatb40 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb40){
					        u_xlatb41 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb41)) ? u_xlat4.xyz : u_xlat13.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat41 = u_xlat4.y * 0.25 + 0.75;
					        u_xlat17 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat41, u_xlat17);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat41 = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat41 = clamp(u_xlat41, 0.0, 1.0);
					    u_xlat4.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = vec3(u_xlat41) * _LightColor0.xyz;
					    if(u_xlatb40){
					        u_xlatb40 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat13.xyz = (bool(u_xlatb40)) ? u_xlat5.xyz : u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat13.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat13.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat6.y * 0.25;
					        u_xlat26 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat39 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat13.x = max(u_xlat26, u_xlat13.x);
					        u_xlat6.x = min(u_xlat39, u_xlat13.x);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat13.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat13.xyz);
					        u_xlat13.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat13.xyz);
					        u_xlat4.w = 1.0;
					        u_xlat5.x = dot(u_xlat7, u_xlat4);
					        u_xlat5.y = dot(u_xlat8, u_xlat4);
					        u_xlat5.z = dot(u_xlat6, u_xlat4);
					    } else {
					        u_xlat4.w = 1.0;
					        u_xlat5.x = dot(unity_SHAr, u_xlat4);
					        u_xlat5.y = dot(unity_SHAg, u_xlat4);
					        u_xlat5.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat0.yzw = u_xlat5.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat16.y;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat5.w * u_xlat1.x;
					    u_xlat14.xyz = u_xlat2.xyz * u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat14.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat3.xyw * u_xlat0.yzw + u_xlat1.xyz;
					    u_xlat39 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat39 = u_xlat39 * _ProjectionParams.z;
					    u_xlat39 = max(u_xlat39, 0.0);
					    u_xlat39 = u_xlat39 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   float4 _LightColor0;
					//   float4 _LightShadowData;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   sampler2D _ShadowMapTexture;
					//   float _Shininess;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_MatrixV;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_ShadowFadeCenterAndType;
					//
					//
					// Registers:
					//
					//   Name                          Reg   Size
					//   ----------------------------- ----- ----
					//   unity_MatrixV                 c0       3
					//   _WorldSpaceCameraPos          c3       1
					//   _WorldSpaceLightPos0          c4       1
					//   unity_SHAr                    c5       1
					//   unity_SHAg                    c6       1
					//   unity_SHAb                    c7       1
					//   _LightShadowData              c8       1
					//   unity_ShadowFadeCenterAndType c9       1
					//   unity_FogColor                c10      1
					//   unity_FogParams               c11      1
					//   _LightColor0                  c12      1
					//   _SpecColor                    c13      1
					//   _Shininess                    c14      1
					//   _Parallax                     c15      1
					//   _Color                        c16      1
					//   _Blur                         c17      1
					//   _ShadowMapTexture             s0       1
					//   _Mask1                        s1       1
					//   _Normalmap                    s2       1
					//   _Splat0                       s3       1
					//   _Splat1                       s4       1
					//   _Splat2                       s5       1
					//   _Splat3                       s6       1
					//   _Normal0                      s7       1
					//   _Normal1                      s8       1
					//   _Normal2                      s9       1
					//   _Normal3                      s10      1
					//   _ColorTex                     s11      1
					//   _HeightSplatAll               s12      1
					//
					
					    ps_3_0
					    def c18, 0.5, 0.419999987, 0, 6
					    def c19, 2, -1, 1, 20
					    def c20, 1.5, 128, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5
					    dcl_texcoord6_pp v6.xyz
					    dcl_texcoord7 v7
					    dcl_texcoord8 v8.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    dcl_2d s12
					    mov r0.x, v3.w
					    mov r0.y, v4.w
					    mov r0.z, v5.w
					    add r1.xyz, -r0, c3
					    add r0.xyz, r0, -c9
					    dp3 r0.x, r0, r0
					    rsq r0.x, r0.x
					    rcp r0.x, r0.x
					    dp3 r0.y, r1, r1
					    rsq r0.y, r0.y
					    mul_pp r2.xyz, r0.y, r1
					    mad_pp r0.yzw, r1.xxyz, r0.y, c4.xxyz
					    dp3 r1.x, r1, c2
					    lrp r2.w, c9.w, r0.x, r1.x
					    mad_sat_pp r0.x, r2.w, c8.z, c8.w
					    nrm_pp r1.xyz, r0.yzww
					    mul r0.yzw, r2.y, v4.xxyz
					    mad r0.yzw, v3.xxyz, r2.x, r0
					    mad_pp r0.yzw, v5.xxyz, r2.z, r0
					    dp3_pp r1.w, r0.yzww, r0.yzww
					    rsq_pp r1.w, r1.w
					    mad r0.w, r0.w, r1.w, c18.y
					    mul r0.yz, r0, r1.w
					    rcp r0.w, r0.w
					    mul r0.yz, r0.w, r0
					    texld_pp r2, v1, s12
					    mov r2.x, c18.x
					    mul_pp r0.w, r2.x, c15.x
					    mad_pp r1.w, r2.y, c15.x, -r0.w
					    mad r2.xz, r1.w, r0.yyzw, v1.xyyw
					    texld r3, r2.xzzw, s4
					    texld r4, r2.xzzw, s8
					    texld_pp r5, v0, s11
					    mul_pp r3, r3, r5
					    texld_pp r6, v0, s1
					    add r1.w, r2.y, r6.y
					    texld_pp r2, v0.zwzw, s12
					    add r2.y, r6.x, r2.x
					    mad_pp r2.x, r2.x, c15.x, -r0.w
					    mad r2.xz, r2.x, r0.yyzw, v0.zyww
					    max r4.x, r2.y, r1.w
					    texld_pp r7, v1.zwzw, s12
					    add r2.w, r6.z, r7.z
					    max r6.x, r4.x, r2.w
					    texld_pp r7, v2, s12
					    add r4.x, r6.w, r7.w
					    mad_pp r0.w, r7.w, c15.x, -r0.w
					    mad r0.yz, r0.w, r0, v2.xxyw
					    max r0.w, r6.x, r4.x
					    add r0.w, r0.w, -c17.x
					    add r1.w, -r0.w, r1.w
					    max r4.z, r1.w, c18.z
					    mul r3, r3, r4.z
					    texld r6, r2.xzzw, s3
					    texld r7, r2.xzzw, s7
					    mul_pp r6, r5, r6
					    add r1.w, -r0.w, r2.y
					    max r2.x, r1.w, c18.z
					    mad r3, r6, r2.x, r3
					    add r1.w, -r0.w, r2.w
					    add r0.w, -r0.w, r4.x
					    max r2.y, r1.w, c18.z
					    texld r6, v1.zwzw, s5
					    mul_pp r6, r5, r6
					    mad r3, r6, r2.y, r3
					    texld r6, r0.yzzw, s6
					    texld r8, r0.yzzw, s10
					    mul_pp r5, r5, r6
					    mul r0.y, r0.w, c18.w
					    cmp r0.y, r0.w, r0.y, c18.z
					    mad r3, r5, r0.y, r3
					    add r0.z, r4.z, r2.x
					    mul r2.zw, r4.z, r4.xywy
					    mad r2.xz, r7.wyyw, r2.x, r2.zyww
					    add r0.z, r2.y, r0.z
					    add r0.z, r0.y, r0.z
					    rcp r0.z, r0.z
					    mul_pp r3, r0.z, r3
					    texld r4, v1.zwzw, s9
					    mad r2.xy, r4.wyzw, r2.y, r2.xzzw
					    mad r0.yw, r8.xwzy, r0.y, r2.xxzy
					    mul_pp r0.yz, r0.z, r0.xyww
					    mad_pp r2.xy, r0.yzzw, c19.x, c19.y
					    dp2add_sat_pp r0.y, r2, r2, c18.z
					    add_pp r0.y, -r0.y, c19.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r2.z, r0.y
					    texld_pp r4, v0, s2
					    mad_pp r4.xy, r4.wyzw, c19.x, c19.y
					    dp2add_sat_pp r0.y, r4, r4, c18.z
					    add_pp r0.y, -r0.y, c19.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r4.z, r0.y
					    mad_pp r0.yzw, r2.xxyz, c19.w, r4.xxyz
					    nrm_pp r2.xyz, r0.yzww
					    mul_pp r0.yzw, r2.xxyz, c20.x
					    dp3_pp r2.x, v3, r0.yzww
					    dp3_pp r2.y, v4, r0.yzww
					    dp3_pp r2.z, v5, r0.yzww
					    dp3_pp r0.y, r2, r1
					    max r1.x, r0.y, c18.z
					    mov r0.y, c20.y
					    mul r0.y, r0.y, c14.x
					    pow r4.x, r1.x, r0.y
					    mul r0.y, r3.w, r4.x
					    mul_pp r1.xyz, r3, c16
					    texldp_pp r3, v7, s0
					    add_sat_pp r0.x, r0.x, r3.x
					    mul_pp r0.xzw, r0.x, c12.xyyz
					    mul r3.xyz, r0.xzww, c13
					    mul_pp r0.xzw, r0, r1.xyyz
					    mul r3.xyz, r0.y, r3
					    dp3_pp r0.y, r2, c4
					    max_pp r1.w, r0.y, c18.z
					    mad_pp r0.xyz, r0.xzww, r1.w, r3
					    mov_pp r2.w, c19.z
					    dp4_pp r3.x, c5, r2
					    dp4_pp r3.y, c6, r2
					    dp4_pp r3.z, c7, r2
					    add_pp r2.xyz, r3, v6
					    max_pp r3.xyz, r2, c18.z
					    mad_pp r0.xyz, r1, r3, r0
					    add r0.xyz, r0, -c10
					    mad_sat r0.w, v8.x, c11.z, c11.w
					    mad_pp oC0.xyz, r0.w, r0, c10
					    mov_pp oC0.w, c19.z
					
					// approximately 134 instruction slots used (16 texture, 118 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _Shininess;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_7[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[37];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_2_5[4];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_7;
					};
					layout(std140) uniform UnityShadows {
						vec4 unused_3_0[24];
						vec4 _LightShadowData;
						vec4 unity_ShadowFadeCenterAndType;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[9];
						mat4x4 unity_MatrixV;
						vec4 unused_4_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _ShadowMapTexture;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec4 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					bool u_xlatb4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec3 u_xlat13;
					vec3 u_xlat14;
					vec2 u_xlat16;
					vec3 u_xlat17;
					float u_xlat26;
					vec2 u_xlat28;
					float u_xlat39;
					float u_xlat40;
					bool u_xlatb40;
					float u_xlat41;
					bool u_xlatb41;
					float u_xlat43;
					void main()
					{
					    u_xlat13.x = vs_TEXCOORD3.w;
					    u_xlat13.y = vs_TEXCOORD4.w;
					    u_xlat13.z = vs_TEXCOORD5.w;
					    u_xlat1.xyz = (-u_xlat13.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD4.xyz;
					    u_xlat2.xyw = vs_TEXCOORD3.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat2.xyz = vs_TEXCOORD5.xyz * u_xlat2.zzz + u_xlat2.xyw;
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat16.xy = vec2(_Parallax, _Shininess) * vec2(0.5, 128.0);
					    u_xlat40 = u_xlat3.x * _Parallax + (-u_xlat16.x);
					    u_xlat41 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat41 = inversesqrt(u_xlat41);
					    u_xlat2.xy = vec2(u_xlat41) * u_xlat2.xy;
					    u_xlat28.x = u_xlat2.z * u_xlat41 + 0.419999987;
					    u_xlat2.xy = u_xlat2.xy / u_xlat28.xx;
					    u_xlat28.xy = vec2(u_xlat40) * u_xlat2.xy + vs_TEXCOORD0.zw;
					    u_xlat4 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat40 = u_xlat4.y * _Parallax + (-u_xlat16.x);
					    u_xlat4.xz = vec2(u_xlat40) * u_xlat2.xy + vs_TEXCOORD1.xy;
					    u_xlat5 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat40 = u_xlat5.w * _Parallax + (-u_xlat16.x);
					    u_xlat2.xy = vec2(u_xlat40) * u_xlat2.xy + vs_TEXCOORD2.xy;
					    u_xlat6 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat7 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat8 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat9 = texture(_Splat0, u_xlat28.xy);
					    u_xlat9 = u_xlat6 * u_xlat9;
					    u_xlat10 = texture(_Splat1, u_xlat4.xz);
					    u_xlat10 = u_xlat6 * u_xlat10;
					    u_xlat11 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat11 = u_xlat6 * u_xlat11;
					    u_xlat12 = texture(_Splat3, u_xlat2.xy);
					    u_xlat6 = u_xlat6 * u_xlat12;
					    u_xlat12 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat40 = u_xlat3.x + u_xlat7.x;
					    u_xlat3.x = u_xlat4.y + u_xlat7.y;
					    u_xlat16.x = max(u_xlat40, u_xlat3.x);
					    u_xlat3.w = u_xlat7.z + u_xlat12.z;
					    u_xlat16.x = max(u_xlat3.w, u_xlat16.x);
					    u_xlat17.x = u_xlat5.w + u_xlat7.w;
					    u_xlat16.x = max(u_xlat16.x, u_xlat17.x);
					    u_xlat16.x = u_xlat16.x + (-_Blur);
					    u_xlat40 = u_xlat40 + (-u_xlat16.x);
					    u_xlat40 = max(u_xlat40, 0.0);
					    u_xlat3.xw = (-u_xlat16.xx) + u_xlat3.xw;
					    u_xlat3.y = (-u_xlat16.x) + u_xlat17.x;
					    u_xlat3.xyw = max(u_xlat3.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat17.x = u_xlat3.y * 6.0;
					    u_xlat5 = u_xlat3.xxxx * u_xlat10;
					    u_xlat5 = u_xlat9 * vec4(u_xlat40) + u_xlat5;
					    u_xlat5 = u_xlat11 * u_xlat3.wwww + u_xlat5;
					    u_xlat5 = u_xlat6 * u_xlat17.xxxx + u_xlat5;
					    u_xlat43 = u_xlat40 + u_xlat3.x;
					    u_xlat43 = u_xlat3.w + u_xlat43;
					    u_xlat16.x = u_xlat3.y * 6.0 + u_xlat43;
					    u_xlat5 = u_xlat5 / u_xlat16.xxxx;
					    u_xlat6 = texture(_Normal0, u_xlat28.xy);
					    u_xlat7 = texture(_Normal1, u_xlat4.xz);
					    u_xlat9 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat2 = texture(_Normal3, u_xlat2.xy);
					    u_xlat2.xz = u_xlat3.xx * u_xlat7.wy;
					    u_xlat2.xz = u_xlat6.wy * vec2(u_xlat40) + u_xlat2.xz;
					    u_xlat2.xz = u_xlat9.wy * u_xlat3.ww + u_xlat2.xz;
					    u_xlat2.xy = u_xlat2.wy * u_xlat17.xx + u_xlat2.xz;
					    u_xlat2.xy = u_xlat2.xy / u_xlat16.xx;
					    u_xlat2.xy = u_xlat2.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat40 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat40 = min(u_xlat40, 1.0);
					    u_xlat40 = (-u_xlat40) + 1.0;
					    u_xlat2.z = sqrt(u_xlat40);
					    u_xlat4.xy = u_xlat8.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat40 = dot(u_xlat4.xy, u_xlat4.xy);
					    u_xlat40 = min(u_xlat40, 1.0);
					    u_xlat40 = (-u_xlat40) + 1.0;
					    u_xlat4.z = sqrt(u_xlat40);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(20.0, 20.0, 20.0) + u_xlat4.xyz;
					    u_xlat40 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat40 = inversesqrt(u_xlat40);
					    u_xlat2.xyz = vec3(u_xlat40) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat3.xyw = u_xlat5.xyz * _Color.xyz;
					    u_xlat4.x = unity_MatrixV[0].z;
					    u_xlat4.y = unity_MatrixV[1].z;
					    u_xlat4.z = unity_MatrixV[2].z;
					    u_xlat40 = dot(u_xlat1.xyz, u_xlat4.xyz);
					    u_xlat4.xyz = u_xlat13.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat41 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat41 = sqrt(u_xlat41);
					    u_xlat41 = (-u_xlat40) + u_xlat41;
					    u_xlat40 = unity_ShadowFadeCenterAndType.w * u_xlat41 + u_xlat40;
					    u_xlat40 = u_xlat40 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
					    u_xlatb41 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb41){
					        u_xlatb4 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat17.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat17.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat17.xyz;
					        u_xlat17.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat17.xyz;
					        u_xlat17.xyz = u_xlat17.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb4)) ? u_xlat17.xyz : u_xlat13.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat4.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat17.x = u_xlat4.y * 0.25 + 0.75;
					        u_xlat5.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat4.x = max(u_xlat17.x, u_xlat5.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat4.xzw);
					    } else {
					        u_xlat4.x = float(1.0);
					        u_xlat4.y = float(1.0);
					        u_xlat4.z = float(1.0);
					        u_xlat4.w = float(1.0);
					    }
					    u_xlat4.x = dot(u_xlat4, unity_OcclusionMaskSelector);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat17.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
					    u_xlat6 = texture(_ShadowMapTexture, u_xlat17.xy);
					    u_xlat40 = u_xlat40 + u_xlat6.x;
					    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
					    u_xlat4.x = min(u_xlat40, u_xlat4.x);
					    u_xlat40 = (u_xlatb41) ? u_xlat4.x : u_xlat40;
					    u_xlat4.x = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);
					    u_xlat4.y = dot(vs_TEXCOORD4.xyz, u_xlat2.xyz);
					    u_xlat4.z = dot(vs_TEXCOORD5.xyz, u_xlat2.xyz);
					    u_xlat2.xyz = vec3(u_xlat40) * _LightColor0.xyz;
					    if(u_xlatb41){
					        u_xlatb40 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat5.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat5.xyz;
					        u_xlat5.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat5.xyz;
					        u_xlat5.xyz = u_xlat5.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat13.xyz = (bool(u_xlatb40)) ? u_xlat5.xyz : u_xlat13.xyz;
					        u_xlat13.xyz = u_xlat13.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat6.yzw = u_xlat13.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat13.x = u_xlat6.y * 0.25;
					        u_xlat26 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat39 = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat13.x = max(u_xlat26, u_xlat13.x);
					        u_xlat6.x = min(u_xlat39, u_xlat13.x);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat6.xzw);
					        u_xlat13.xyz = u_xlat6.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat8 = texture(unity_ProbeVolumeSH, u_xlat13.xyz);
					        u_xlat13.xyz = u_xlat6.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat6 = texture(unity_ProbeVolumeSH, u_xlat13.xyz);
					        u_xlat4.w = 1.0;
					        u_xlat5.x = dot(u_xlat7, u_xlat4);
					        u_xlat5.y = dot(u_xlat8, u_xlat4);
					        u_xlat5.z = dot(u_xlat6, u_xlat4);
					    } else {
					        u_xlat4.w = 1.0;
					        u_xlat5.x = dot(unity_SHAr, u_xlat4);
					        u_xlat5.y = dot(unity_SHAg, u_xlat4);
					        u_xlat5.z = dot(unity_SHAb, u_xlat4);
					    }
					    u_xlat0.yzw = u_xlat5.xyz + vs_TEXCOORD6.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1.x = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * u_xlat16.y;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = u_xlat5.w * u_xlat1.x;
					    u_xlat14.xyz = u_xlat2.xyz * u_xlat3.xyw;
					    u_xlat2.xyz = u_xlat2.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    u_xlat1.xyz = u_xlat14.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat3.xyw * u_xlat0.yzw + u_xlat1.xyz;
					    u_xlat39 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat39 = u_xlat39 * _ProjectionParams.z;
					    u_xlat39 = max(u_xlat39, 0.0);
					    u_xlat39 = u_xlat39 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    SV_Target0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "FORWARD"
			Tags { "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Geometry-100" "RenderType" = "Opaque" "SplatCount" = "4" }
			Blend One One, One One
			ZClip Off
			ZWrite Off
			GpuProgramID 78048
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "POINT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.xy
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o7.x, c0, v0
					    dp4 o7.y, c1, v0
					    dp4 o7.z, c2, v0
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c0, r0
					    dp3 r1.x, c1, r0
					    dp3 r1.y, c2, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c9.zxyw, v1.y
					    mad r1.xyz, v1.x, c8.zxyw, r1
					    mad r1.xyz, v1.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c11.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c17.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 46 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
					    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
					    u_xlat3.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD4.x = u_xlat0.x;
					    vs_TEXCOORD5.x = u_xlat0.y;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.xy
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o7.x, c0, v0
					    dp4 o7.y, c1, v0
					    dp4 o7.z, c2, v0
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c0, r0
					    dp3 r1.x, c1, r0
					    dp3 r1.y, c2, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c9.zxyw, v1.y
					    mad r1.xyz, v1.x, c8.zxyw, r1
					    mad r1.xyz, v1.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c11.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c17.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 46 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
					    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
					    u_xlat3.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD4.x = u_xlat0.x;
					    vs_TEXCOORD5.x = u_xlat0.y;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.xy
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o7.x, c0, v0
					    dp4 o7.y, c1, v0
					    dp4 o7.z, c2, v0
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c0, r0
					    dp3 r1.x, c1, r0
					    dp3 r1.y, c2, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c9.zxyw, v1.y
					    mad r1.xyz, v1.x, c8.zxyw, r1
					    mad r1.xyz, v1.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c11.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c17.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 46 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
					    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
					    u_xlat3.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD4.x = u_xlat0.x;
					    vs_TEXCOORD5.x = u_xlat0.y;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.xy
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o7.x, c0, v0
					    dp4 o7.y, c1, v0
					    dp4 o7.z, c2, v0
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c0, r0
					    dp3 r1.x, c1, r0
					    dp3 r1.y, c2, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c9.zxyw, v1.y
					    mad r1.xyz, v1.x, c8.zxyw, r1
					    mad r1.xyz, v1.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c11.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c17.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 46 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
					    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
					    u_xlat3.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD4.x = u_xlat0.x;
					    vs_TEXCOORD5.x = u_xlat0.y;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.xy
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o7.x, c0, v0
					    dp4 o7.y, c1, v0
					    dp4 o7.z, c2, v0
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c0, r0
					    dp3 r1.x, c1, r0
					    dp3 r1.y, c2, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c9.zxyw, v1.y
					    mad r1.xyz, v1.x, c8.zxyw, r1
					    mad r1.xyz, v1.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c11.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c17.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 46 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
					    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
					    u_xlat3.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD4.x = u_xlat0.x;
					    vs_TEXCOORD5.x = u_xlat0.y;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.xy
					    dcl_texcoord8 o9.x
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o7.x, c0, v0
					    dp4 o7.y, c1, v0
					    dp4 o7.z, c2, v0
					    mov r3.z, r0.x
					    mov o9.x, r0.x
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c0, r0
					    dp3 r1.x, c1, r0
					    dp3 r1.y, c2, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c9.zxyw, v1.y
					    mad r1.xyz, v1.x, c8.zxyw, r1
					    mad r1.xyz, v1.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c11.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c17.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 48 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
					    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
					    u_xlat3.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD4.x = u_xlat0.x;
					    vs_TEXCOORD5.x = u_xlat0.y;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.xy
					    dcl_texcoord8 o9.x
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o7.x, c0, v0
					    dp4 o7.y, c1, v0
					    dp4 o7.z, c2, v0
					    mov r3.z, r0.x
					    mov o9.x, r0.x
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c0, r0
					    dp3 r1.x, c1, r0
					    dp3 r1.y, c2, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c9.zxyw, v1.y
					    mad r1.xyz, v1.x, c8.zxyw, r1
					    mad r1.xyz, v1.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c11.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c17.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 48 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
					    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
					    u_xlat3.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD4.x = u_xlat0.x;
					    vs_TEXCOORD5.x = u_xlat0.y;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.xy
					    dcl_texcoord8 o9.x
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o7.x, c0, v0
					    dp4 o7.y, c1, v0
					    dp4 o7.z, c2, v0
					    mov r3.z, r0.x
					    mov o9.x, r0.x
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c0, r0
					    dp3 r1.x, c1, r0
					    dp3 r1.y, c2, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c9.zxyw, v1.y
					    mad r1.xyz, v1.x, c8.zxyw, r1
					    mad r1.xyz, v1.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c11.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c17.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 48 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
					    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
					    u_xlat3.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD4.x = u_xlat0.x;
					    vs_TEXCOORD5.x = u_xlat0.y;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.xy
					    dcl_texcoord8 o9.x
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o7.x, c0, v0
					    dp4 o7.y, c1, v0
					    dp4 o7.z, c2, v0
					    mov r3.z, r0.x
					    mov o9.x, r0.x
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c0, r0
					    dp3 r1.x, c1, r0
					    dp3 r1.y, c2, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c9.zxyw, v1.y
					    mad r1.xyz, v1.x, c8.zxyw, r1
					    mad r1.xyz, v1.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c11.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c17.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 48 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
					    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
					    u_xlat3.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD4.x = u_xlat0.x;
					    vs_TEXCOORD5.x = u_xlat0.y;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6.xyz
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8.xy
					    dcl_texcoord8 o9.x
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.w, c7, r1
					    dp4 r0.x, c6, r1
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o7.x, c0, v0
					    dp4 o7.y, c1, v0
					    dp4 o7.z, c2, v0
					    mov r3.z, r0.x
					    mov o9.x, r0.x
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c0, r0
					    dp3 r1.x, c1, r0
					    dp3 r1.y, c2, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c9.zxyw, v1.y
					    mad r1.xyz, v1.x, c8.zxyw, r1
					    mad r1.xyz, v1.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c11.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mov o8.xy, c17.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 48 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[11];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD3;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD4;
					out vec3 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    vs_TEXCOORD6.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat0 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD8 = u_xlat0.z;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD7.xy = vec2(0.0, 0.0);
					    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
					    u_xlat3.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat3.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD4.x = u_xlat0.x;
					    vs_TEXCOORD5.x = u_xlat0.y;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "POINT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   float _Shininess;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _WorldSpaceCameraPos c3       1
					//   _WorldSpaceLightPos0 c4       1
					//   _LightColor0         c5       1
					//   _SpecColor           c6       1
					//   _Shininess           c7       1
					//   _Parallax            c8       1
					//   _Color               c9       1
					//   _Blur                c10      1
					//   _LightTexture0       s0       1
					//   _Mask1               s1       1
					//   _Normalmap           s2       1
					//   _Splat0              s3       1
					//   _Splat1              s4       1
					//   _Splat2              s5       1
					//   _Splat3              s6       1
					//   _Normal0             s7       1
					//   _Normal1             s8       1
					//   _Normal2             s9       1
					//   _Normal3             s10      1
					//   _ColorTex            s11      1
					//   _HeightSplatAll      s12      1
					//
					
					    ps_3_0
					    def c11, 0.5, 0.419999987, 0, 6
					    def c12, 2, -1, 1, 20
					    def c13, 1.5, 1, 0, 128
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    dcl_2d s12
					    add r0.xyz, c3, -v6
					    nrm_pp r1.xyz, r0
					    mul_pp r0.xyz, r1.y, v4
					    mad_pp r0.xyz, v3, r1.x, r0
					    mad_pp r0.xyz, v5, r1.z, r0
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    mad r0.z, r0.z, r0.w, c11.y
					    mul r0.xy, r0.w, r0
					    rcp r0.z, r0.z
					    mul r0.xy, r0.z, r0
					    texld_pp r2, v0.zwzw, s12
					    mov r3.x, c11.x
					    mul_pp r0.z, r3.x, c8.x
					    mad_pp r0.w, r2.x, c8.x, -r0.z
					    mad r2.yz, r0.w, r0.xxyw, v0.xzww
					    texld r3, r2.yzzw, s7
					    texld r4, r2.yzzw, s3
					    texld_pp r5, v1, s12
					    mad_pp r0.w, r5.y, c8.x, -r0.z
					    mad r2.yz, r0.w, r0.xxyw, v1.xxyw
					    texld r6, r2.yzzw, s8
					    texld r7, r2.yzzw, s4
					    texld_pp r8, v0, s1
					    add r0.w, r2.x, r8.x
					    add r1.w, r5.y, r8.y
					    max r2.x, r0.w, r1.w
					    texld_pp r5, v1.zwzw, s12
					    add r2.y, r8.z, r5.z
					    max r3.x, r2.x, r2.y
					    texld_pp r5, v2, s12
					    add r2.x, r8.w, r5.w
					    mad_pp r0.z, r5.w, c8.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    max r0.z, r3.x, r2.x
					    add r0.z, r0.z, -c10.x
					    add r1.w, -r0.z, r1.w
					    max r2.z, r1.w, c11.z
					    mul r3.xz, r2.z, r6.wyyw
					    add r0.w, -r0.z, r0.w
					    max r1.w, r0.w, c11.z
					    mad r3.xy, r3.wyzw, r1.w, r3.xzzw
					    texld r5, v1.zwzw, s9
					    add r0.w, -r0.z, r2.y
					    add r0.z, -r0.z, r2.x
					    max r2.x, r0.w, c11.z
					    mad r2.yw, r5.xwzy, r2.x, r3.xxzy
					    texld r3, r0, s10
					    texld r5, r0, s6
					    mul r0.x, r0.z, c11.w
					    cmp r0.x, r0.z, r0.x, c11.z
					    mad r0.yz, r3.xwyw, r0.x, r2.xyww
					    add r0.w, r2.z, r1.w
					    add r0.w, r2.x, r0.w
					    add r0.w, r0.x, r0.w
					    rcp r0.w, r0.w
					    mul_pp r0.yz, r0.w, r0
					    mad_pp r3.xy, r0.yzzw, c12.x, c12.y
					    dp2add_sat_pp r0.y, r3, r3, c11.z
					    add_pp r0.y, -r0.y, c12.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r3.z, r0.y
					    texld_pp r6, v0, s2
					    mad_pp r6.xy, r6.wyzw, c12.x, c12.y
					    dp2add_sat_pp r0.y, r6, r6, c11.z
					    add_pp r0.y, -r0.y, c12.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r6.z, r0.y
					    mad_pp r3.xyz, r3, c12.w, r6
					    nrm_pp r6.xyz, r3
					    mul_pp r3.xyz, r6, c13.x
					    dp3_pp r6.x, v3, r3
					    dp3_pp r6.y, v4, r3
					    dp3_pp r6.z, v5, r3
					    add r3.xyz, c4, -v6
					    dp3 r0.y, r3, r3
					    rsq r0.y, r0.y
					    mad_pp r1.xyz, r3, r0.y, r1
					    mul_pp r3.xyz, r0.y, r3
					    dp3_pp r0.y, r6, r3
					    max_pp r2.y, r0.y, c11.z
					    nrm_pp r3.xyz, r1
					    dp3_pp r0.y, r6, r3
					    max r1.x, r0.y, c11.z
					    mov r2.w, c13.w
					    mul r0.y, r2.w, c7.x
					    pow r2.w, r1.x, r0.y
					    texld_pp r3, v0, s11
					    mul_pp r6, r3, r7
					    mul r6, r2.z, r6
					    mul_pp r4, r3, r4
					    mad r1, r4, r1.w, r6
					    texld r4, v1.zwzw, s5
					    mul_pp r4, r3, r4
					    mul_pp r3, r3, r5
					    mad r1, r4, r2.x, r1
					    mad r1, r3, r0.x, r1
					    mul_pp r0, r0.w, r1
					    mul r0.w, r0.w, r2.w
					    mul_pp r0.xyz, r0, c9
					    mad r1, v6.xyzx, c13.yyyz, c13.zzzy
					    dp4 r3.x, c0, r1
					    dp4 r3.y, c1, r1
					    dp4 r3.z, c2, r1
					    dp3 r1.x, r3, r3
					    texld_pp r1, r1.x, s0
					    mul_pp r1.xyz, r1.x, c5
					    mul r2.xzw, r1.xyyz, c6.xyyz
					    mul_pp r0.xyz, r0, r1
					    mul r1.xyz, r0.w, r2.xzww
					    mad_pp oC0.xyz, r0, r2.y, r1
					    mov_pp oC0.w, c12.z
					
					// approximately 122 instruction slots used (16 texture, 106 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _Shininess;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_8[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat31;
					float u_xlat42;
					float u_xlat43;
					bool u_xlatb43;
					float u_xlat44;
					float u_xlat46;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat43 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat2.xyz = vec3(u_xlat43) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat4 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat18.xy = vec2(_Parallax, _Shininess) * vec2(0.5, 128.0);
					    u_xlat43 = u_xlat4.x * _Parallax + (-u_xlat18.x);
					    u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat44 = inversesqrt(u_xlat44);
					    u_xlat3.xy = vec2(u_xlat44) * u_xlat3.xy;
					    u_xlat44 = u_xlat3.z * u_xlat44 + 0.419999987;
					    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat44);
					    u_xlat31.xy = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat5 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat43 = u_xlat5.y * _Parallax + (-u_xlat18.x);
					    u_xlat5.xz = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD1.xy;
					    u_xlat6 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat43 = u_xlat6.w * _Parallax + (-u_xlat18.x);
					    u_xlat3.xy = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD2.xy;
					    u_xlat7 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat8 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat9 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat10 = texture(_Splat0, u_xlat31.xy);
					    u_xlat10 = u_xlat7 * u_xlat10;
					    u_xlat11 = texture(_Splat1, u_xlat5.xz);
					    u_xlat11 = u_xlat7 * u_xlat11;
					    u_xlat12 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat12 = u_xlat7 * u_xlat12;
					    u_xlat13 = texture(_Splat3, u_xlat3.xy);
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat13 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat43 = u_xlat4.x + u_xlat8.x;
					    u_xlat44 = u_xlat5.y + u_xlat8.y;
					    u_xlat4.x = max(u_xlat43, u_xlat44);
					    u_xlat18.x = u_xlat8.z + u_xlat13.z;
					    u_xlat4.x = max(u_xlat18.x, u_xlat4.x);
					    u_xlat46 = u_xlat6.w + u_xlat8.w;
					    u_xlat4.x = max(u_xlat46, u_xlat4.x);
					    u_xlat4.x = u_xlat4.x + (-_Blur);
					    u_xlat43 = u_xlat43 + (-u_xlat4.x);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat44 = u_xlat44 + (-u_xlat4.x);
					    u_xlat44 = max(u_xlat44, 0.0);
					    u_xlat4.y = (-u_xlat4.x) + u_xlat18.x;
					    u_xlat4.x = (-u_xlat4.x) + u_xlat46;
					    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
					    u_xlat46 = u_xlat4.x * 6.0;
					    u_xlat6 = vec4(u_xlat44) * u_xlat11;
					    u_xlat6 = u_xlat10 * vec4(u_xlat43) + u_xlat6;
					    u_xlat6 = u_xlat12 * u_xlat4.yyyy + u_xlat6;
					    u_xlat6 = u_xlat7 * vec4(u_xlat46) + u_xlat6;
					    u_xlat19 = u_xlat43 + u_xlat44;
					    u_xlat19 = u_xlat4.y + u_xlat19;
					    u_xlat4.x = u_xlat4.x * 6.0 + u_xlat19;
					    u_xlat6 = u_xlat6 / u_xlat4.xxxx;
					    u_xlat7 = texture(_Normal0, u_xlat31.xy);
					    u_xlat5 = texture(_Normal1, u_xlat5.xz);
					    u_xlat8 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat3 = texture(_Normal3, u_xlat3.xy);
					    u_xlat3.xz = vec2(u_xlat44) * u_xlat5.wy;
					    u_xlat3.xz = u_xlat7.wy * vec2(u_xlat43) + u_xlat3.xz;
					    u_xlat3.xz = u_xlat8.wy * u_xlat4.yy + u_xlat3.xz;
					    u_xlat3.xy = u_xlat3.wy * vec2(u_xlat46) + u_xlat3.xz;
					    u_xlat3.xy = u_xlat3.xy / u_xlat4.xx;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat3.z = sqrt(u_xlat43);
					    u_xlat5.xy = u_xlat9.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat5.z = sqrt(u_xlat43);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(20.0, 20.0, 20.0) + u_xlat5.xyz;
					    u_xlat43 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat3.xyz = vec3(u_xlat43) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat4.xyw = u_xlat6.xyz * _Color.xyz;
					    u_xlat5.xyz = vs_TEXCOORD6.yyy * unity_WorldToLight[1].xyz;
					    u_xlat5.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD6.xxx + u_xlat5.xyz;
					    u_xlat5.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD6.zzz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD6.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat7.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat7.y * 0.25 + 0.75;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat7.x = max(u_xlat43, u_xlat44);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
					    } else {
					        u_xlat7.x = float(1.0);
					        u_xlat7.y = float(1.0);
					        u_xlat7.z = float(1.0);
					        u_xlat7.w = float(1.0);
					    }
					    u_xlat43 = dot(u_xlat7, unity_OcclusionMaskSelector);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5 = texture(_LightTexture0, vec2(u_xlat44));
					    u_xlat43 = u_xlat43 * u_xlat5.x;
					    u_xlat5.x = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD5.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat43) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42) + u_xlat2.xyz;
					    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat18.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat6.w * u_xlat0.x;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat4.xyw;
					    u_xlat2.xyz = u_xlat3.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   float4 _LightColor0;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   float _Shininess;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   _WorldSpaceLightPos0 c1       1
					//   _LightColor0         c2       1
					//   _SpecColor           c3       1
					//   _Shininess           c4       1
					//   _Parallax            c5       1
					//   _Color               c6       1
					//   _Blur                c7       1
					//   _Mask1               s0       1
					//   _Normalmap           s1       1
					//   _Splat0              s2       1
					//   _Splat1              s3       1
					//   _Splat2              s4       1
					//   _Splat3              s5       1
					//   _Normal0             s6       1
					//   _Normal1             s7       1
					//   _Normal2             s8       1
					//   _Normal3             s9       1
					//   _ColorTex            s10      1
					//   _HeightSplatAll      s11      1
					//
					
					    ps_3_0
					    def c8, 0.5, 0.419999987, 0, 6
					    def c9, 2, -1, 1, 20
					    def c10, 1.5, 128, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    add r0.xyz, c0, -v6
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    mad_pp r0.xyz, r0, r0.w, c1
					    nrm_pp r2.xyz, r0
					    mul_pp r0.xyz, r1.y, v4
					    mad_pp r0.xyz, v3, r1.x, r0
					    mad_pp r0.xyz, v5, r1.z, r0
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    mad r0.z, r0.z, r0.w, c8.y
					    mul r0.xy, r0.w, r0
					    rcp r0.z, r0.z
					    mul r0.xy, r0.z, r0
					    texld_pp r1, v0.zwzw, s11
					    mov r3.x, c8.x
					    mul_pp r0.z, r3.x, c5.x
					    mad_pp r0.w, r1.x, c5.x, -r0.z
					    mad r1.yz, r0.w, r0.xxyw, v0.xzww
					    texld r3, r1.yzzw, s6
					    texld r4, r1.yzzw, s2
					    texld_pp r5, v1, s11
					    mad_pp r0.w, r5.y, c5.x, -r0.z
					    mad r1.yz, r0.w, r0.xxyw, v1.xxyw
					    texld r6, r1.yzzw, s7
					    texld r7, r1.yzzw, s3
					    texld_pp r8, v0, s0
					    add r0.w, r1.x, r8.x
					    add r1.x, r5.y, r8.y
					    max r2.w, r0.w, r1.x
					    texld_pp r5, v1.zwzw, s11
					    add r1.y, r8.z, r5.z
					    max r3.x, r2.w, r1.y
					    texld_pp r5, v2, s11
					    add r1.z, r8.w, r5.w
					    mad_pp r0.z, r5.w, c5.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    max r0.z, r3.x, r1.z
					    add r0.z, r0.z, -c7.x
					    add r1.x, -r0.z, r1.x
					    max r2.w, r1.x, c8.z
					    mul r1.xw, r2.w, r6.wyzy
					    add r0.w, -r0.z, r0.w
					    max r3.x, r0.w, c8.z
					    mad r1.xw, r3.wyzy, r3.x, r1
					    texld r5, v1.zwzw, s8
					    add r0.w, -r0.z, r1.y
					    add r0.z, -r0.z, r1.z
					    max r1.y, r0.w, c8.z
					    mad r1.xz, r5.wyyw, r1.y, r1.xyww
					    texld r5, r0, s9
					    texld r6, r0, s5
					    mul r0.x, r0.z, c8.w
					    cmp r0.x, r0.z, r0.x, c8.z
					    mad r0.yz, r5.xwyw, r0.x, r1.xxzw
					    add r0.w, r2.w, r3.x
					    add r0.w, r1.y, r0.w
					    add r0.w, r0.x, r0.w
					    rcp r0.w, r0.w
					    mul_pp r0.yz, r0.w, r0
					    mad_pp r5.xy, r0.yzzw, c9.x, c9.y
					    dp2add_sat_pp r0.y, r5, r5, c8.z
					    add_pp r0.y, -r0.y, c9.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r5.z, r0.y
					    texld_pp r8, v0, s1
					    mad_pp r8.xy, r8.wyzw, c9.x, c9.y
					    dp2add_sat_pp r0.y, r8, r8, c8.z
					    add_pp r0.y, -r0.y, c9.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r8.z, r0.y
					    mad_pp r1.xzw, r5.xyyz, c9.w, r8.xyyz
					    nrm_pp r5.xyz, r1.xzww
					    mul_pp r1.xzw, r5.xyyz, c10.x
					    dp3_pp r5.x, v3, r1.xzww
					    dp3_pp r5.y, v4, r1.xzww
					    dp3_pp r5.z, v5, r1.xzww
					    dp3_pp r0.y, r5, r2
					    dp3_pp r0.z, r5, c1
					    max_pp r1.x, r0.z, c8.z
					    max r1.z, r0.y, c8.z
					    mov r0.y, c10.y
					    mul r0.y, r0.y, c4.x
					    pow r2.x, r1.z, r0.y
					    texld_pp r5, v0, s10
					    mul_pp r7, r5, r7
					    mul r7, r2.w, r7
					    mul_pp r4, r4, r5
					    mad r3, r4, r3.x, r7
					    texld r4, v1.zwzw, s4
					    mul_pp r4, r5, r4
					    mul_pp r5, r5, r6
					    mad r3, r4, r1.y, r3
					    mad r3, r5, r0.x, r3
					    mul_pp r0, r0.w, r3
					    mul r0.w, r0.w, r2.x
					    mul_pp r0.xyz, r0, c6
					    mul_pp r0.xyz, r0, c2
					    mov r2.xyz, c2
					    mul r1.yzw, r2.xxyz, c3.xxyz
					    mul r1.yzw, r0.w, r1
					    mad_pp oC0.xyz, r0, r1.x, r1.yzww
					    mov_pp oC0.w, c9.z
					
					// approximately 112 instruction slots used (15 texture, 97 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _Shininess;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_7[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec2 u_xlat14;
					float u_xlat15;
					vec2 u_xlat25;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					float u_xlat39;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = vs_TEXCOORD3.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat14.xy = vec2(_Parallax, _Shininess) * vec2(0.5, 128.0);
					    u_xlat37 = u_xlat2.x * _Parallax + (-u_xlat14.x);
					    u_xlat38 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
					    u_xlat25.x = u_xlat1.z * u_xlat38 + 0.419999987;
					    u_xlat1.xy = u_xlat1.xy / u_xlat25.xx;
					    u_xlat25.xy = vec2(u_xlat37) * u_xlat1.xy + vs_TEXCOORD0.zw;
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat38 = u_xlat3.y * _Parallax + (-u_xlat14.x);
					    u_xlat3.xz = vec2(u_xlat38) * u_xlat1.xy + vs_TEXCOORD1.xy;
					    u_xlat4 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat14.x = u_xlat4.w * _Parallax + (-u_xlat14.x);
					    u_xlat1.xy = u_xlat14.xx * u_xlat1.xy + vs_TEXCOORD2.xy;
					    u_xlat5 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat6 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat7 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat8 = texture(_Splat0, u_xlat25.xy);
					    u_xlat8 = u_xlat5 * u_xlat8;
					    u_xlat9 = texture(_Splat1, u_xlat3.xz);
					    u_xlat9 = u_xlat5 * u_xlat9;
					    u_xlat10 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat10 = u_xlat5 * u_xlat10;
					    u_xlat11 = texture(_Splat3, u_xlat1.xy);
					    u_xlat5 = u_xlat5 * u_xlat11;
					    u_xlat11 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat2.x = u_xlat2.x + u_xlat6.x;
					    u_xlat2.y = u_xlat3.y + u_xlat6.y;
					    u_xlat38 = max(u_xlat2.y, u_xlat2.x);
					    u_xlat15 = u_xlat6.z + u_xlat11.z;
					    u_xlat38 = max(u_xlat38, u_xlat15);
					    u_xlat39 = u_xlat4.w + u_xlat6.w;
					    u_xlat38 = max(u_xlat38, u_xlat39);
					    u_xlat38 = u_xlat38 + (-_Blur);
					    u_xlat2.xy = (-vec2(u_xlat38)) + u_xlat2.xy;
					    u_xlat15 = (-u_xlat38) + u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat2.w = (-u_xlat38) + u_xlat39;
					    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat39 = u_xlat2.w * 6.0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat9;
					    u_xlat4 = u_xlat8 * u_xlat2.xxxx + u_xlat4;
					    u_xlat4 = u_xlat10 * vec4(u_xlat15) + u_xlat4;
					    u_xlat4 = u_xlat5 * vec4(u_xlat39) + u_xlat4;
					    u_xlat5.x = u_xlat2.y + u_xlat2.x;
					    u_xlat5.x = u_xlat15 + u_xlat5.x;
					    u_xlat38 = u_xlat2.w * 6.0 + u_xlat5.x;
					    u_xlat4 = u_xlat4 / vec4(u_xlat38);
					    u_xlat5 = texture(_Normal0, u_xlat25.xy);
					    u_xlat6 = texture(_Normal1, u_xlat3.xz);
					    u_xlat8 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Normal3, u_xlat1.xy);
					    u_xlat1.xz = u_xlat2.yy * u_xlat6.wy;
					    u_xlat1.xz = u_xlat5.wy * u_xlat2.xx + u_xlat1.xz;
					    u_xlat1.xz = u_xlat8.wy * vec2(u_xlat15) + u_xlat1.xz;
					    u_xlat1.xy = u_xlat1.wy * vec2(u_xlat39) + u_xlat1.xz;
					    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat38);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat37 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat37 = min(u_xlat37, 1.0);
					    u_xlat37 = (-u_xlat37) + 1.0;
					    u_xlat1.z = sqrt(u_xlat37);
					    u_xlat3.xy = u_xlat7.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat37 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat37 = min(u_xlat37, 1.0);
					    u_xlat37 = (-u_xlat37) + 1.0;
					    u_xlat3.z = sqrt(u_xlat37);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(20.0, 20.0, 20.0) + u_xlat3.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat2.xyw = u_xlat4.xyz * _Color.xyz;
					    u_xlatb37 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb37){
					        u_xlatb37 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD6.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb37)) ? u_xlat3.xyz : vs_TEXCOORD6.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat37 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat15 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat37, u_xlat15);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat37 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vec3(u_xlat37) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat4.w * u_xlat0.x;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   float _Shininess;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       4
					//   _WorldSpaceCameraPos c4       1
					//   _WorldSpaceLightPos0 c5       1
					//   _LightColor0         c6       1
					//   _SpecColor           c7       1
					//   _Shininess           c8       1
					//   _Parallax            c9       1
					//   _Color               c10      1
					//   _Blur                c11      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _Mask1               s2       1
					//   _Normalmap           s3       1
					//   _Splat0              s4       1
					//   _Splat1              s5       1
					//   _Splat2              s6       1
					//   _Splat3              s7       1
					//   _Normal0             s8       1
					//   _Normal1             s9       1
					//   _Normal2             s10      1
					//   _Normal3             s11      1
					//   _ColorTex            s12      1
					//   _HeightSplatAll      s13      1
					//
					
					    ps_3_0
					    def c12, 0.5, 0.419999987, 0, 6
					    def c13, 2, -1, 1, 20
					    def c14, 1.5, 1, 0, 128
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    dcl_2d s12
					    dcl_2d s13
					    add r0.xyz, c4, -v6
					    nrm_pp r1.xyz, r0
					    mul_pp r0.xyz, r1.y, v4
					    mad_pp r0.xyz, v3, r1.x, r0
					    mad_pp r0.xyz, v5, r1.z, r0
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    mad r0.z, r0.z, r0.w, c12.y
					    mul r0.xy, r0.w, r0
					    rcp r0.z, r0.z
					    mul r0.xy, r0.z, r0
					    texld_pp r2, v0.zwzw, s13
					    mov r3.x, c12.x
					    mul_pp r0.z, r3.x, c9.x
					    mad_pp r0.w, r2.x, c9.x, -r0.z
					    mad r2.yz, r0.w, r0.xxyw, v0.xzww
					    texld r3, r2.yzzw, s8
					    texld r4, r2.yzzw, s4
					    texld_pp r5, v1, s13
					    mad_pp r0.w, r5.y, c9.x, -r0.z
					    mad r2.yz, r0.w, r0.xxyw, v1.xxyw
					    texld r6, r2.yzzw, s9
					    texld r7, r2.yzzw, s5
					    texld_pp r8, v0, s2
					    add r0.w, r2.x, r8.x
					    add r1.w, r5.y, r8.y
					    max r2.x, r0.w, r1.w
					    texld_pp r5, v1.zwzw, s13
					    add r2.y, r8.z, r5.z
					    max r3.x, r2.x, r2.y
					    texld_pp r5, v2, s13
					    add r2.x, r8.w, r5.w
					    mad_pp r0.z, r5.w, c9.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    max r0.z, r3.x, r2.x
					    add r0.z, r0.z, -c11.x
					    add r1.w, -r0.z, r1.w
					    max r2.z, r1.w, c12.z
					    mul r3.xz, r2.z, r6.wyyw
					    add r0.w, -r0.z, r0.w
					    max r1.w, r0.w, c12.z
					    mad r3.xy, r3.wyzw, r1.w, r3.xzzw
					    texld r5, v1.zwzw, s10
					    add r0.w, -r0.z, r2.y
					    add r0.z, -r0.z, r2.x
					    max r2.x, r0.w, c12.z
					    mad r2.yw, r5.xwzy, r2.x, r3.xxzy
					    texld r3, r0, s11
					    texld r5, r0, s7
					    mul r0.x, r0.z, c12.w
					    cmp r0.x, r0.z, r0.x, c12.z
					    mad r0.yz, r3.xwyw, r0.x, r2.xyww
					    add r0.w, r2.z, r1.w
					    add r0.w, r2.x, r0.w
					    add r0.w, r0.x, r0.w
					    rcp r0.w, r0.w
					    mul_pp r0.yz, r0.w, r0
					    mad_pp r3.xy, r0.yzzw, c13.x, c13.y
					    dp2add_sat_pp r0.y, r3, r3, c12.z
					    add_pp r0.y, -r0.y, c13.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r3.z, r0.y
					    texld_pp r6, v0, s3
					    mad_pp r6.xy, r6.wyzw, c13.x, c13.y
					    dp2add_sat_pp r0.y, r6, r6, c12.z
					    add_pp r0.y, -r0.y, c13.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r6.z, r0.y
					    mad_pp r3.xyz, r3, c13.w, r6
					    nrm_pp r6.xyz, r3
					    mul_pp r3.xyz, r6, c14.x
					    dp3_pp r6.x, v3, r3
					    dp3_pp r6.y, v4, r3
					    dp3_pp r6.z, v5, r3
					    add r3.xyz, c5, -v6
					    dp3 r0.y, r3, r3
					    rsq r0.y, r0.y
					    mad_pp r1.xyz, r3, r0.y, r1
					    mul_pp r3.xyz, r0.y, r3
					    dp3_pp r0.y, r6, r3
					    max_pp r2.y, r0.y, c12.z
					    nrm_pp r3.xyz, r1
					    dp3_pp r0.y, r6, r3
					    max r1.x, r0.y, c12.z
					    mov r2.w, c14.w
					    mul r0.y, r2.w, c8.x
					    pow r2.w, r1.x, r0.y
					    texld_pp r3, v0, s12
					    mul_pp r6, r3, r7
					    mul r6, r2.z, r6
					    mul_pp r4, r3, r4
					    mad r1, r4, r1.w, r6
					    texld r4, v1.zwzw, s6
					    mul_pp r4, r3, r4
					    mul_pp r3, r3, r5
					    mad r1, r4, r2.x, r1
					    mad r1, r3, r0.x, r1
					    mul_pp r0, r0.w, r1
					    mul r0.w, r0.w, r2.w
					    mul_pp r0.xyz, r0, c10
					    mad r1, v6.xyzx, c14.yyyz, c14.zzzy
					    dp4 r2.x, c3, r1
					    rcp r2.x, r2.x
					    dp4 r3.x, c0, r1
					    dp4 r3.y, c1, r1
					    dp4 r3.z, c2, r1
					    mad r1.xy, r3, r2.x, c12.x
					    dp3 r1.z, r3, r3
					    texld_pp r4, r1.z, s1
					    texld_pp r1, r1, s0
					    mul r1.x, r4.x, r1.w
					    mul_pp r1.xyz, r1.x, c6
					    cmp_pp r1.xyz, -r3.z, c12.z, r1
					    mul r2.xzw, r1.xyyz, c7.xyyz
					    mul_pp r0.xyz, r0, r1
					    mul r1.xyz, r0.w, r2.xzww
					    mad_pp oC0.xyz, r0, r2.y, r1
					    mov_pp oC0.w, c13.z
					
					// approximately 128 instruction slots used (17 texture, 111 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _Shininess;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_8[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat31;
					float u_xlat42;
					float u_xlat43;
					bool u_xlatb43;
					float u_xlat44;
					bool u_xlatb44;
					float u_xlat45;
					float u_xlat46;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat43 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat2.xyz = vec3(u_xlat43) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat4 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat18.xy = vec2(_Parallax, _Shininess) * vec2(0.5, 128.0);
					    u_xlat43 = u_xlat4.x * _Parallax + (-u_xlat18.x);
					    u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat44 = inversesqrt(u_xlat44);
					    u_xlat3.xy = vec2(u_xlat44) * u_xlat3.xy;
					    u_xlat44 = u_xlat3.z * u_xlat44 + 0.419999987;
					    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat44);
					    u_xlat31.xy = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat5 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat43 = u_xlat5.y * _Parallax + (-u_xlat18.x);
					    u_xlat5.xz = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD1.xy;
					    u_xlat6 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat43 = u_xlat6.w * _Parallax + (-u_xlat18.x);
					    u_xlat3.xy = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD2.xy;
					    u_xlat7 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat8 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat9 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat10 = texture(_Splat0, u_xlat31.xy);
					    u_xlat10 = u_xlat7 * u_xlat10;
					    u_xlat11 = texture(_Splat1, u_xlat5.xz);
					    u_xlat11 = u_xlat7 * u_xlat11;
					    u_xlat12 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat12 = u_xlat7 * u_xlat12;
					    u_xlat13 = texture(_Splat3, u_xlat3.xy);
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat13 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat43 = u_xlat4.x + u_xlat8.x;
					    u_xlat44 = u_xlat5.y + u_xlat8.y;
					    u_xlat4.x = max(u_xlat43, u_xlat44);
					    u_xlat18.x = u_xlat8.z + u_xlat13.z;
					    u_xlat4.x = max(u_xlat18.x, u_xlat4.x);
					    u_xlat46 = u_xlat6.w + u_xlat8.w;
					    u_xlat4.x = max(u_xlat46, u_xlat4.x);
					    u_xlat4.x = u_xlat4.x + (-_Blur);
					    u_xlat43 = u_xlat43 + (-u_xlat4.x);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat44 = u_xlat44 + (-u_xlat4.x);
					    u_xlat44 = max(u_xlat44, 0.0);
					    u_xlat4.y = (-u_xlat4.x) + u_xlat18.x;
					    u_xlat4.x = (-u_xlat4.x) + u_xlat46;
					    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
					    u_xlat46 = u_xlat4.x * 6.0;
					    u_xlat6 = vec4(u_xlat44) * u_xlat11;
					    u_xlat6 = u_xlat10 * vec4(u_xlat43) + u_xlat6;
					    u_xlat6 = u_xlat12 * u_xlat4.yyyy + u_xlat6;
					    u_xlat6 = u_xlat7 * vec4(u_xlat46) + u_xlat6;
					    u_xlat19 = u_xlat43 + u_xlat44;
					    u_xlat19 = u_xlat4.y + u_xlat19;
					    u_xlat4.x = u_xlat4.x * 6.0 + u_xlat19;
					    u_xlat6 = u_xlat6 / u_xlat4.xxxx;
					    u_xlat7 = texture(_Normal0, u_xlat31.xy);
					    u_xlat5 = texture(_Normal1, u_xlat5.xz);
					    u_xlat8 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat3 = texture(_Normal3, u_xlat3.xy);
					    u_xlat3.xz = vec2(u_xlat44) * u_xlat5.wy;
					    u_xlat3.xz = u_xlat7.wy * vec2(u_xlat43) + u_xlat3.xz;
					    u_xlat3.xz = u_xlat8.wy * u_xlat4.yy + u_xlat3.xz;
					    u_xlat3.xy = u_xlat3.wy * vec2(u_xlat46) + u_xlat3.xz;
					    u_xlat3.xy = u_xlat3.xy / u_xlat4.xx;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat3.z = sqrt(u_xlat43);
					    u_xlat5.xy = u_xlat9.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat5.z = sqrt(u_xlat43);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(20.0, 20.0, 20.0) + u_xlat5.xyz;
					    u_xlat43 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat3.xyz = vec3(u_xlat43) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat4.xyw = u_xlat6.xyz * _Color.xyz;
					    u_xlat5 = vs_TEXCOORD6.yyyy * unity_WorldToLight[1];
					    u_xlat5 = unity_WorldToLight[0] * vs_TEXCOORD6.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToLight[2] * vs_TEXCOORD6.zzzz + u_xlat5;
					    u_xlat5 = u_xlat5 + unity_WorldToLight[3];
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD6.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat7.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat7.y * 0.25 + 0.75;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat7.x = max(u_xlat43, u_xlat44);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
					    } else {
					        u_xlat7.x = float(1.0);
					        u_xlat7.y = float(1.0);
					        u_xlat7.z = float(1.0);
					        u_xlat7.w = float(1.0);
					    }
					    u_xlat43 = dot(u_xlat7, unity_OcclusionMaskSelector);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlatb44 = 0.0<u_xlat5.z;
					    u_xlat44 = u_xlatb44 ? 1.0 : float(0.0);
					    u_xlat6.xy = u_xlat5.xy / u_xlat5.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat7 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlat44 = u_xlat44 * u_xlat7.w;
					    u_xlat45 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat45));
					    u_xlat44 = u_xlat44 * u_xlat5.x;
					    u_xlat43 = u_xlat43 * u_xlat44;
					    u_xlat5.x = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD5.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat43) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42) + u_xlat2.xyz;
					    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat18.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat6.w * u_xlat0.x;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat4.xyw;
					    u_xlat2.xyz = u_xlat3.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   float _Shininess;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _WorldSpaceCameraPos c3       1
					//   _WorldSpaceLightPos0 c4       1
					//   _LightColor0         c5       1
					//   _SpecColor           c6       1
					//   _Shininess           c7       1
					//   _Parallax            c8       1
					//   _Color               c9       1
					//   _Blur                c10      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _Mask1               s2       1
					//   _Normalmap           s3       1
					//   _Splat0              s4       1
					//   _Splat1              s5       1
					//   _Splat2              s6       1
					//   _Splat3              s7       1
					//   _Normal0             s8       1
					//   _Normal1             s9       1
					//   _Normal2             s10      1
					//   _Normal3             s11      1
					//   _ColorTex            s12      1
					//   _HeightSplatAll      s13      1
					//
					
					    ps_3_0
					    def c11, 0.5, 0.419999987, 0, 6
					    def c12, 2, -1, 1, 20
					    def c13, 1.5, 1, 0, 128
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    dcl_2d s12
					    dcl_2d s13
					    add r0.xyz, c3, -v6
					    nrm_pp r1.xyz, r0
					    mul_pp r0.xyz, r1.y, v4
					    mad_pp r0.xyz, v3, r1.x, r0
					    mad_pp r0.xyz, v5, r1.z, r0
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    mad r0.z, r0.z, r0.w, c11.y
					    mul r0.xy, r0.w, r0
					    rcp r0.z, r0.z
					    mul r0.xy, r0.z, r0
					    texld_pp r2, v0.zwzw, s13
					    mov r3.x, c11.x
					    mul_pp r0.z, r3.x, c8.x
					    mad_pp r0.w, r2.x, c8.x, -r0.z
					    mad r2.yz, r0.w, r0.xxyw, v0.xzww
					    texld r3, r2.yzzw, s8
					    texld r4, r2.yzzw, s4
					    texld_pp r5, v1, s13
					    mad_pp r0.w, r5.y, c8.x, -r0.z
					    mad r2.yz, r0.w, r0.xxyw, v1.xxyw
					    texld r6, r2.yzzw, s9
					    texld r7, r2.yzzw, s5
					    texld_pp r8, v0, s2
					    add r0.w, r2.x, r8.x
					    add r1.w, r5.y, r8.y
					    max r2.x, r0.w, r1.w
					    texld_pp r5, v1.zwzw, s13
					    add r2.y, r8.z, r5.z
					    max r3.x, r2.x, r2.y
					    texld_pp r5, v2, s13
					    add r2.x, r8.w, r5.w
					    mad_pp r0.z, r5.w, c8.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    max r0.z, r3.x, r2.x
					    add r0.z, r0.z, -c10.x
					    add r1.w, -r0.z, r1.w
					    max r2.z, r1.w, c11.z
					    mul r3.xz, r2.z, r6.wyyw
					    add r0.w, -r0.z, r0.w
					    max r1.w, r0.w, c11.z
					    mad r3.xy, r3.wyzw, r1.w, r3.xzzw
					    texld r5, v1.zwzw, s10
					    add r0.w, -r0.z, r2.y
					    add r0.z, -r0.z, r2.x
					    max r2.x, r0.w, c11.z
					    mad r2.yw, r5.xwzy, r2.x, r3.xxzy
					    texld r3, r0, s11
					    texld r5, r0, s7
					    mul r0.x, r0.z, c11.w
					    cmp r0.x, r0.z, r0.x, c11.z
					    mad r0.yz, r3.xwyw, r0.x, r2.xyww
					    add r0.w, r2.z, r1.w
					    add r0.w, r2.x, r0.w
					    add r0.w, r0.x, r0.w
					    rcp r0.w, r0.w
					    mul_pp r0.yz, r0.w, r0
					    mad_pp r3.xy, r0.yzzw, c12.x, c12.y
					    dp2add_sat_pp r0.y, r3, r3, c11.z
					    add_pp r0.y, -r0.y, c12.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r3.z, r0.y
					    texld_pp r6, v0, s3
					    mad_pp r6.xy, r6.wyzw, c12.x, c12.y
					    dp2add_sat_pp r0.y, r6, r6, c11.z
					    add_pp r0.y, -r0.y, c12.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r6.z, r0.y
					    mad_pp r3.xyz, r3, c12.w, r6
					    nrm_pp r6.xyz, r3
					    mul_pp r3.xyz, r6, c13.x
					    dp3_pp r6.x, v3, r3
					    dp3_pp r6.y, v4, r3
					    dp3_pp r6.z, v5, r3
					    add r3.xyz, c4, -v6
					    dp3 r0.y, r3, r3
					    rsq r0.y, r0.y
					    mad_pp r1.xyz, r3, r0.y, r1
					    mul_pp r3.xyz, r0.y, r3
					    dp3_pp r0.y, r6, r3
					    max_pp r2.y, r0.y, c11.z
					    nrm_pp r3.xyz, r1
					    dp3_pp r0.y, r6, r3
					    max r1.x, r0.y, c11.z
					    mov r2.w, c13.w
					    mul r0.y, r2.w, c7.x
					    pow r2.w, r1.x, r0.y
					    texld_pp r3, v0, s12
					    mul_pp r6, r3, r7
					    mul r6, r2.z, r6
					    mul_pp r4, r3, r4
					    mad r1, r4, r1.w, r6
					    texld r4, v1.zwzw, s6
					    mul_pp r4, r3, r4
					    mul_pp r3, r3, r5
					    mad r1, r4, r2.x, r1
					    mad r1, r3, r0.x, r1
					    mul_pp r0, r0.w, r1
					    mul r0.w, r0.w, r2.w
					    mul_pp r0.xyz, r0, c9
					    mad r1, v6.xyzx, c13.yyyz, c13.zzzy
					    dp4 r3.x, c0, r1
					    dp4 r3.y, c1, r1
					    dp4 r3.z, c2, r1
					    dp3 r1.x, r3, r3
					    texld r3, r3, s0
					    texld r1, r1.x, s1
					    mul_pp r1.x, r3.w, r1.x
					    mul_pp r1.xyz, r1.x, c5
					    mul r2.xzw, r1.xyyz, c6.xyyz
					    mul_pp r0.xyz, r0, r1
					    mul r1.xyz, r0.w, r2.xzww
					    mad_pp oC0.xyz, r0, r2.y, r1
					    mov_pp oC0.w, c12.z
					
					// approximately 124 instruction slots used (17 texture, 107 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _Shininess;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_8[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat31;
					float u_xlat42;
					float u_xlat43;
					bool u_xlatb43;
					float u_xlat44;
					float u_xlat46;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat43 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat2.xyz = vec3(u_xlat43) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat4 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat18.xy = vec2(_Parallax, _Shininess) * vec2(0.5, 128.0);
					    u_xlat43 = u_xlat4.x * _Parallax + (-u_xlat18.x);
					    u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat44 = inversesqrt(u_xlat44);
					    u_xlat3.xy = vec2(u_xlat44) * u_xlat3.xy;
					    u_xlat44 = u_xlat3.z * u_xlat44 + 0.419999987;
					    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat44);
					    u_xlat31.xy = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat5 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat43 = u_xlat5.y * _Parallax + (-u_xlat18.x);
					    u_xlat5.xz = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD1.xy;
					    u_xlat6 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat43 = u_xlat6.w * _Parallax + (-u_xlat18.x);
					    u_xlat3.xy = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD2.xy;
					    u_xlat7 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat8 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat9 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat10 = texture(_Splat0, u_xlat31.xy);
					    u_xlat10 = u_xlat7 * u_xlat10;
					    u_xlat11 = texture(_Splat1, u_xlat5.xz);
					    u_xlat11 = u_xlat7 * u_xlat11;
					    u_xlat12 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat12 = u_xlat7 * u_xlat12;
					    u_xlat13 = texture(_Splat3, u_xlat3.xy);
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat13 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat43 = u_xlat4.x + u_xlat8.x;
					    u_xlat44 = u_xlat5.y + u_xlat8.y;
					    u_xlat4.x = max(u_xlat43, u_xlat44);
					    u_xlat18.x = u_xlat8.z + u_xlat13.z;
					    u_xlat4.x = max(u_xlat18.x, u_xlat4.x);
					    u_xlat46 = u_xlat6.w + u_xlat8.w;
					    u_xlat4.x = max(u_xlat46, u_xlat4.x);
					    u_xlat4.x = u_xlat4.x + (-_Blur);
					    u_xlat43 = u_xlat43 + (-u_xlat4.x);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat44 = u_xlat44 + (-u_xlat4.x);
					    u_xlat44 = max(u_xlat44, 0.0);
					    u_xlat4.y = (-u_xlat4.x) + u_xlat18.x;
					    u_xlat4.x = (-u_xlat4.x) + u_xlat46;
					    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
					    u_xlat46 = u_xlat4.x * 6.0;
					    u_xlat6 = vec4(u_xlat44) * u_xlat11;
					    u_xlat6 = u_xlat10 * vec4(u_xlat43) + u_xlat6;
					    u_xlat6 = u_xlat12 * u_xlat4.yyyy + u_xlat6;
					    u_xlat6 = u_xlat7 * vec4(u_xlat46) + u_xlat6;
					    u_xlat19 = u_xlat43 + u_xlat44;
					    u_xlat19 = u_xlat4.y + u_xlat19;
					    u_xlat4.x = u_xlat4.x * 6.0 + u_xlat19;
					    u_xlat6 = u_xlat6 / u_xlat4.xxxx;
					    u_xlat7 = texture(_Normal0, u_xlat31.xy);
					    u_xlat5 = texture(_Normal1, u_xlat5.xz);
					    u_xlat8 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat3 = texture(_Normal3, u_xlat3.xy);
					    u_xlat3.xz = vec2(u_xlat44) * u_xlat5.wy;
					    u_xlat3.xz = u_xlat7.wy * vec2(u_xlat43) + u_xlat3.xz;
					    u_xlat3.xz = u_xlat8.wy * u_xlat4.yy + u_xlat3.xz;
					    u_xlat3.xy = u_xlat3.wy * vec2(u_xlat46) + u_xlat3.xz;
					    u_xlat3.xy = u_xlat3.xy / u_xlat4.xx;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat3.z = sqrt(u_xlat43);
					    u_xlat5.xy = u_xlat9.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat5.z = sqrt(u_xlat43);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(20.0, 20.0, 20.0) + u_xlat5.xyz;
					    u_xlat43 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat3.xyz = vec3(u_xlat43) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat4.xyw = u_xlat6.xyz * _Color.xyz;
					    u_xlat5.xyz = vs_TEXCOORD6.yyy * unity_WorldToLight[1].xyz;
					    u_xlat5.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD6.xxx + u_xlat5.xyz;
					    u_xlat5.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD6.zzz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD6.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat7.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat7.y * 0.25 + 0.75;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat7.x = max(u_xlat43, u_xlat44);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
					    } else {
					        u_xlat7.x = float(1.0);
					        u_xlat7.y = float(1.0);
					        u_xlat7.z = float(1.0);
					        u_xlat7.w = float(1.0);
					    }
					    u_xlat43 = dot(u_xlat7, unity_OcclusionMaskSelector);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat44));
					    u_xlat5 = texture(_LightTexture0, u_xlat5.xyz);
					    u_xlat44 = u_xlat5.w * u_xlat7.x;
					    u_xlat43 = u_xlat43 * u_xlat44;
					    u_xlat5.x = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD5.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat43) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42) + u_xlat2.xyz;
					    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat18.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat6.w * u_xlat0.x;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat4.xyw;
					    u_xlat2.xyz = u_xlat3.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   float _Shininess;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       2
					//   _WorldSpaceCameraPos c2       1
					//   _WorldSpaceLightPos0 c3       1
					//   _LightColor0         c4       1
					//   _SpecColor           c5       1
					//   _Shininess           c6       1
					//   _Parallax            c7       1
					//   _Color               c8       1
					//   _Blur                c9       1
					//   _LightTexture0       s0       1
					//   _Mask1               s1       1
					//   _Normalmap           s2       1
					//   _Splat0              s3       1
					//   _Splat1              s4       1
					//   _Splat2              s5       1
					//   _Splat3              s6       1
					//   _Normal0             s7       1
					//   _Normal1             s8       1
					//   _Normal2             s9       1
					//   _Normal3             s10      1
					//   _ColorTex            s11      1
					//   _HeightSplatAll      s12      1
					//
					
					    ps_3_0
					    def c10, 0.5, 0.419999987, 0, 6
					    def c11, 2, -1, 1, 20
					    def c12, 1.5, 1, 0, 128
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    dcl_2d s12
					    add r0.xyz, c2, -v6
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    mad_pp r0.xyz, r0, r0.w, c3
					    nrm_pp r2.xyz, r0
					    mul_pp r0.xyz, r1.y, v4
					    mad_pp r0.xyz, v3, r1.x, r0
					    mad_pp r0.xyz, v5, r1.z, r0
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    mad r0.z, r0.z, r0.w, c10.y
					    mul r0.xy, r0.w, r0
					    rcp r0.z, r0.z
					    mul r0.xy, r0.z, r0
					    texld_pp r1, v0.zwzw, s12
					    mov r3.x, c10.x
					    mul_pp r0.z, r3.x, c7.x
					    mad_pp r0.w, r1.x, c7.x, -r0.z
					    mad r1.yz, r0.w, r0.xxyw, v0.xzww
					    texld r3, r1.yzzw, s7
					    texld r4, r1.yzzw, s3
					    texld_pp r5, v1, s12
					    mad_pp r0.w, r5.y, c7.x, -r0.z
					    mad r1.yz, r0.w, r0.xxyw, v1.xxyw
					    texld r6, r1.yzzw, s8
					    texld r7, r1.yzzw, s4
					    texld_pp r8, v0, s1
					    add r0.w, r1.x, r8.x
					    add r1.x, r5.y, r8.y
					    max r2.w, r0.w, r1.x
					    texld_pp r5, v1.zwzw, s12
					    add r1.y, r8.z, r5.z
					    max r3.x, r2.w, r1.y
					    texld_pp r5, v2, s12
					    add r1.z, r8.w, r5.w
					    mad_pp r0.z, r5.w, c7.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    max r0.z, r3.x, r1.z
					    add r0.z, r0.z, -c9.x
					    add r1.x, -r0.z, r1.x
					    max r2.w, r1.x, c10.z
					    mul r1.xw, r2.w, r6.wyzy
					    add r0.w, -r0.z, r0.w
					    max r3.x, r0.w, c10.z
					    mad r1.xw, r3.wyzy, r3.x, r1
					    texld r5, v1.zwzw, s9
					    add r0.w, -r0.z, r1.y
					    add r0.z, -r0.z, r1.z
					    max r1.y, r0.w, c10.z
					    mad r1.xz, r5.wyyw, r1.y, r1.xyww
					    texld r5, r0, s10
					    texld r6, r0, s6
					    mul r0.x, r0.z, c10.w
					    cmp r0.x, r0.z, r0.x, c10.z
					    mad r0.yz, r5.xwyw, r0.x, r1.xxzw
					    add r0.w, r2.w, r3.x
					    add r0.w, r1.y, r0.w
					    add r0.w, r0.x, r0.w
					    rcp r0.w, r0.w
					    mul_pp r0.yz, r0.w, r0
					    mad_pp r5.xy, r0.yzzw, c11.x, c11.y
					    dp2add_sat_pp r0.y, r5, r5, c10.z
					    add_pp r0.y, -r0.y, c11.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r5.z, r0.y
					    texld_pp r8, v0, s2
					    mad_pp r8.xy, r8.wyzw, c11.x, c11.y
					    dp2add_sat_pp r0.y, r8, r8, c10.z
					    add_pp r0.y, -r0.y, c11.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r8.z, r0.y
					    mad_pp r1.xzw, r5.xyyz, c11.w, r8.xyyz
					    nrm_pp r5.xyz, r1.xzww
					    mul_pp r1.xzw, r5.xyyz, c12.x
					    dp3_pp r5.x, v3, r1.xzww
					    dp3_pp r5.y, v4, r1.xzww
					    dp3_pp r5.z, v5, r1.xzww
					    dp3_pp r0.y, r5, r2
					    dp3_pp r0.z, r5, c3
					    max_pp r1.x, r0.z, c10.z
					    max r1.z, r0.y, c10.z
					    mov r1.w, c12.w
					    mul r0.y, r1.w, c6.x
					    pow r2.x, r1.z, r0.y
					    texld_pp r5, v0, s11
					    mul_pp r7, r5, r7
					    mul r7, r2.w, r7
					    mul_pp r4, r4, r5
					    mad r3, r4, r3.x, r7
					    texld r4, v1.zwzw, s5
					    mul_pp r4, r5, r4
					    mul_pp r5, r5, r6
					    mad r3, r4, r1.y, r3
					    mad r3, r5, r0.x, r3
					    mul_pp r0, r0.w, r3
					    mul r0.w, r0.w, r2.x
					    mul_pp r0.xyz, r0, c8
					    mad r2, v6.xyzx, c12.yyyz, c12.zzzy
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    texld_pp r2, r3, s0
					    mul_pp r1.yzw, r2.w, c4.xxyz
					    mul r2.xyz, r1.yzww, c5
					    mul_pp r0.xyz, r0, r1.yzww
					    mul r1.yzw, r0.w, r2.xxyz
					    mad_pp oC0.xyz, r0, r1.x, r1.yzww
					    mov_pp oC0.w, c11.z
					
					// approximately 116 instruction slots used (16 texture, 100 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _Shininess;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_8[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec2 u_xlat14;
					float u_xlat15;
					vec2 u_xlat25;
					float u_xlat27;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					float u_xlat39;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = vs_TEXCOORD3.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat14.xy = vec2(_Parallax, _Shininess) * vec2(0.5, 128.0);
					    u_xlat37 = u_xlat2.x * _Parallax + (-u_xlat14.x);
					    u_xlat38 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
					    u_xlat25.x = u_xlat1.z * u_xlat38 + 0.419999987;
					    u_xlat1.xy = u_xlat1.xy / u_xlat25.xx;
					    u_xlat25.xy = vec2(u_xlat37) * u_xlat1.xy + vs_TEXCOORD0.zw;
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat38 = u_xlat3.y * _Parallax + (-u_xlat14.x);
					    u_xlat3.xz = vec2(u_xlat38) * u_xlat1.xy + vs_TEXCOORD1.xy;
					    u_xlat4 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat14.x = u_xlat4.w * _Parallax + (-u_xlat14.x);
					    u_xlat1.xy = u_xlat14.xx * u_xlat1.xy + vs_TEXCOORD2.xy;
					    u_xlat5 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat6 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat7 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat8 = texture(_Splat0, u_xlat25.xy);
					    u_xlat8 = u_xlat5 * u_xlat8;
					    u_xlat9 = texture(_Splat1, u_xlat3.xz);
					    u_xlat9 = u_xlat5 * u_xlat9;
					    u_xlat10 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat10 = u_xlat5 * u_xlat10;
					    u_xlat11 = texture(_Splat3, u_xlat1.xy);
					    u_xlat5 = u_xlat5 * u_xlat11;
					    u_xlat11 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat2.x = u_xlat2.x + u_xlat6.x;
					    u_xlat2.y = u_xlat3.y + u_xlat6.y;
					    u_xlat38 = max(u_xlat2.y, u_xlat2.x);
					    u_xlat15 = u_xlat6.z + u_xlat11.z;
					    u_xlat38 = max(u_xlat38, u_xlat15);
					    u_xlat39 = u_xlat4.w + u_xlat6.w;
					    u_xlat38 = max(u_xlat38, u_xlat39);
					    u_xlat38 = u_xlat38 + (-_Blur);
					    u_xlat2.xy = (-vec2(u_xlat38)) + u_xlat2.xy;
					    u_xlat15 = (-u_xlat38) + u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat2.w = (-u_xlat38) + u_xlat39;
					    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat39 = u_xlat2.w * 6.0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat9;
					    u_xlat4 = u_xlat8 * u_xlat2.xxxx + u_xlat4;
					    u_xlat4 = u_xlat10 * vec4(u_xlat15) + u_xlat4;
					    u_xlat4 = u_xlat5 * vec4(u_xlat39) + u_xlat4;
					    u_xlat5.x = u_xlat2.y + u_xlat2.x;
					    u_xlat5.x = u_xlat15 + u_xlat5.x;
					    u_xlat38 = u_xlat2.w * 6.0 + u_xlat5.x;
					    u_xlat4 = u_xlat4 / vec4(u_xlat38);
					    u_xlat5 = texture(_Normal0, u_xlat25.xy);
					    u_xlat6 = texture(_Normal1, u_xlat3.xz);
					    u_xlat8 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Normal3, u_xlat1.xy);
					    u_xlat1.xz = u_xlat2.yy * u_xlat6.wy;
					    u_xlat1.xz = u_xlat5.wy * u_xlat2.xx + u_xlat1.xz;
					    u_xlat1.xz = u_xlat8.wy * vec2(u_xlat15) + u_xlat1.xz;
					    u_xlat1.xy = u_xlat1.wy * vec2(u_xlat39) + u_xlat1.xz;
					    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat38);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat37 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat37 = min(u_xlat37, 1.0);
					    u_xlat37 = (-u_xlat37) + 1.0;
					    u_xlat1.z = sqrt(u_xlat37);
					    u_xlat3.xy = u_xlat7.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat37 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat37 = min(u_xlat37, 1.0);
					    u_xlat37 = (-u_xlat37) + 1.0;
					    u_xlat3.z = sqrt(u_xlat37);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(20.0, 20.0, 20.0) + u_xlat3.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat2.xyw = u_xlat4.xyz * _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD6.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * vs_TEXCOORD6.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * vs_TEXCOORD6.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy + unity_WorldToLight[3].xy;
					    u_xlatb37 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb37){
					        u_xlatb37 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD6.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb37)) ? u_xlat4.xyz : vs_TEXCOORD6.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat37 = u_xlat5.y * 0.25 + 0.75;
					        u_xlat27 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat37, u_xlat27);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat37 = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xy);
					    u_xlat37 = u_xlat37 * u_xlat3.w;
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vec3(u_xlat37) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat4.w * u_xlat0.x;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat2.xyz * u_xlat0.www + u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   float _Shininess;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _WorldSpaceCameraPos c3       1
					//   _WorldSpaceLightPos0 c4       1
					//   unity_FogParams      c5       1
					//   _LightColor0         c6       1
					//   _SpecColor           c7       1
					//   _Shininess           c8       1
					//   _Parallax            c9       1
					//   _Color               c10      1
					//   _Blur                c11      1
					//   _LightTexture0       s0       1
					//   _Mask1               s1       1
					//   _Normalmap           s2       1
					//   _Splat0              s3       1
					//   _Splat1              s4       1
					//   _Splat2              s5       1
					//   _Splat3              s6       1
					//   _Normal0             s7       1
					//   _Normal1             s8       1
					//   _Normal2             s9       1
					//   _Normal3             s10      1
					//   _ColorTex            s11      1
					//   _HeightSplatAll      s12      1
					//
					
					    ps_3_0
					    def c12, 0.5, 0.419999987, 0, 6
					    def c13, 2, -1, 1, 20
					    def c14, 1.5, 1, 0, 128
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord8 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    dcl_2d s12
					    add r0.xyz, c3, -v6
					    nrm_pp r1.xyz, r0
					    mul_pp r0.xyz, r1.y, v4
					    mad_pp r0.xyz, v3, r1.x, r0
					    mad_pp r0.xyz, v5, r1.z, r0
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    mad r0.z, r0.z, r0.w, c12.y
					    mul r0.xy, r0.w, r0
					    rcp r0.z, r0.z
					    mul r0.xy, r0.z, r0
					    texld_pp r2, v0.zwzw, s12
					    mov r3.x, c12.x
					    mul_pp r0.z, r3.x, c9.x
					    mad_pp r0.w, r2.x, c9.x, -r0.z
					    mad r2.yz, r0.w, r0.xxyw, v0.xzww
					    texld r3, r2.yzzw, s7
					    texld r4, r2.yzzw, s3
					    texld_pp r5, v1, s12
					    mad_pp r0.w, r5.y, c9.x, -r0.z
					    mad r2.yz, r0.w, r0.xxyw, v1.xxyw
					    texld r6, r2.yzzw, s8
					    texld r7, r2.yzzw, s4
					    texld_pp r8, v0, s1
					    add r0.w, r2.x, r8.x
					    add r1.w, r5.y, r8.y
					    max r2.x, r0.w, r1.w
					    texld_pp r5, v1.zwzw, s12
					    add r2.y, r8.z, r5.z
					    max r3.x, r2.x, r2.y
					    texld_pp r5, v2, s12
					    add r2.x, r8.w, r5.w
					    mad_pp r0.z, r5.w, c9.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    max r0.z, r3.x, r2.x
					    add r0.z, r0.z, -c11.x
					    add r1.w, -r0.z, r1.w
					    max r2.z, r1.w, c12.z
					    mul r3.xz, r2.z, r6.wyyw
					    add r0.w, -r0.z, r0.w
					    max r1.w, r0.w, c12.z
					    mad r3.xy, r3.wyzw, r1.w, r3.xzzw
					    texld r5, v1.zwzw, s9
					    add r0.w, -r0.z, r2.y
					    add r0.z, -r0.z, r2.x
					    max r2.x, r0.w, c12.z
					    mad r2.yw, r5.xwzy, r2.x, r3.xxzy
					    texld r3, r0, s10
					    texld r5, r0, s6
					    mul r0.x, r0.z, c12.w
					    cmp r0.x, r0.z, r0.x, c12.z
					    mad r0.yz, r3.xwyw, r0.x, r2.xyww
					    add r0.w, r2.z, r1.w
					    add r0.w, r2.x, r0.w
					    add r0.w, r0.x, r0.w
					    rcp r0.w, r0.w
					    mul_pp r0.yz, r0.w, r0
					    mad_pp r3.xy, r0.yzzw, c13.x, c13.y
					    dp2add_sat_pp r0.y, r3, r3, c12.z
					    add_pp r0.y, -r0.y, c13.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r3.z, r0.y
					    texld_pp r6, v0, s2
					    mad_pp r6.xy, r6.wyzw, c13.x, c13.y
					    dp2add_sat_pp r0.y, r6, r6, c12.z
					    add_pp r0.y, -r0.y, c13.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r6.z, r0.y
					    mad_pp r3.xyz, r3, c13.w, r6
					    nrm_pp r6.xyz, r3
					    mul_pp r3.xyz, r6, c14.x
					    dp3_pp r6.x, v3, r3
					    dp3_pp r6.y, v4, r3
					    dp3_pp r6.z, v5, r3
					    add r3.xyz, c4, -v6
					    dp3 r0.y, r3, r3
					    rsq r0.y, r0.y
					    mad_pp r1.xyz, r3, r0.y, r1
					    mul_pp r3.xyz, r0.y, r3
					    dp3_pp r0.y, r6, r3
					    max_pp r2.y, r0.y, c12.z
					    nrm_pp r3.xyz, r1
					    dp3_pp r0.y, r6, r3
					    max r1.x, r0.y, c12.z
					    mov r2.w, c14.w
					    mul r0.y, r2.w, c8.x
					    pow r2.w, r1.x, r0.y
					    texld_pp r3, v0, s11
					    mul_pp r6, r3, r7
					    mul r6, r2.z, r6
					    mul_pp r4, r3, r4
					    mad r1, r4, r1.w, r6
					    texld r4, v1.zwzw, s5
					    mul_pp r4, r3, r4
					    mul_pp r3, r3, r5
					    mad r1, r4, r2.x, r1
					    mad r1, r3, r0.x, r1
					    mul_pp r0, r0.w, r1
					    mul r0.w, r0.w, r2.w
					    mul_pp r0.xyz, r0, c10
					    mad r1, v6.xyzx, c14.yyyz, c14.zzzy
					    dp4 r3.x, c0, r1
					    dp4 r3.y, c1, r1
					    dp4 r3.z, c2, r1
					    dp3 r1.x, r3, r3
					    texld_pp r1, r1.x, s0
					    mul_pp r1.xyz, r1.x, c6
					    mul r2.xzw, r1.xyyz, c7.xyyz
					    mul_pp r0.xyz, r0, r1
					    mul r1.xyz, r0.w, r2.xzww
					    mad_pp r0.xyz, r0, r2.y, r1
					    mad_sat r0.w, v7.x, c5.z, c5.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c13.z
					
					// approximately 124 instruction slots used (16 texture, 108 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _Shininess;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_8[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat31;
					float u_xlat42;
					float u_xlat43;
					bool u_xlatb43;
					float u_xlat44;
					float u_xlat46;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat43 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat2.xyz = vec3(u_xlat43) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat4 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat18.xy = vec2(_Parallax, _Shininess) * vec2(0.5, 128.0);
					    u_xlat43 = u_xlat4.x * _Parallax + (-u_xlat18.x);
					    u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat44 = inversesqrt(u_xlat44);
					    u_xlat3.xy = vec2(u_xlat44) * u_xlat3.xy;
					    u_xlat44 = u_xlat3.z * u_xlat44 + 0.419999987;
					    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat44);
					    u_xlat31.xy = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat5 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat43 = u_xlat5.y * _Parallax + (-u_xlat18.x);
					    u_xlat5.xz = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD1.xy;
					    u_xlat6 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat43 = u_xlat6.w * _Parallax + (-u_xlat18.x);
					    u_xlat3.xy = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD2.xy;
					    u_xlat7 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat8 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat9 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat10 = texture(_Splat0, u_xlat31.xy);
					    u_xlat10 = u_xlat7 * u_xlat10;
					    u_xlat11 = texture(_Splat1, u_xlat5.xz);
					    u_xlat11 = u_xlat7 * u_xlat11;
					    u_xlat12 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat12 = u_xlat7 * u_xlat12;
					    u_xlat13 = texture(_Splat3, u_xlat3.xy);
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat13 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat43 = u_xlat4.x + u_xlat8.x;
					    u_xlat44 = u_xlat5.y + u_xlat8.y;
					    u_xlat4.x = max(u_xlat43, u_xlat44);
					    u_xlat18.x = u_xlat8.z + u_xlat13.z;
					    u_xlat4.x = max(u_xlat18.x, u_xlat4.x);
					    u_xlat46 = u_xlat6.w + u_xlat8.w;
					    u_xlat4.x = max(u_xlat46, u_xlat4.x);
					    u_xlat4.x = u_xlat4.x + (-_Blur);
					    u_xlat43 = u_xlat43 + (-u_xlat4.x);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat44 = u_xlat44 + (-u_xlat4.x);
					    u_xlat44 = max(u_xlat44, 0.0);
					    u_xlat4.y = (-u_xlat4.x) + u_xlat18.x;
					    u_xlat4.x = (-u_xlat4.x) + u_xlat46;
					    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
					    u_xlat46 = u_xlat4.x * 6.0;
					    u_xlat6 = vec4(u_xlat44) * u_xlat11;
					    u_xlat6 = u_xlat10 * vec4(u_xlat43) + u_xlat6;
					    u_xlat6 = u_xlat12 * u_xlat4.yyyy + u_xlat6;
					    u_xlat6 = u_xlat7 * vec4(u_xlat46) + u_xlat6;
					    u_xlat19 = u_xlat43 + u_xlat44;
					    u_xlat19 = u_xlat4.y + u_xlat19;
					    u_xlat4.x = u_xlat4.x * 6.0 + u_xlat19;
					    u_xlat6 = u_xlat6 / u_xlat4.xxxx;
					    u_xlat7 = texture(_Normal0, u_xlat31.xy);
					    u_xlat5 = texture(_Normal1, u_xlat5.xz);
					    u_xlat8 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat3 = texture(_Normal3, u_xlat3.xy);
					    u_xlat3.xz = vec2(u_xlat44) * u_xlat5.wy;
					    u_xlat3.xz = u_xlat7.wy * vec2(u_xlat43) + u_xlat3.xz;
					    u_xlat3.xz = u_xlat8.wy * u_xlat4.yy + u_xlat3.xz;
					    u_xlat3.xy = u_xlat3.wy * vec2(u_xlat46) + u_xlat3.xz;
					    u_xlat3.xy = u_xlat3.xy / u_xlat4.xx;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat3.z = sqrt(u_xlat43);
					    u_xlat5.xy = u_xlat9.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat5.z = sqrt(u_xlat43);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(20.0, 20.0, 20.0) + u_xlat5.xyz;
					    u_xlat43 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat3.xyz = vec3(u_xlat43) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat4.xyw = u_xlat6.xyz * _Color.xyz;
					    u_xlat5.xyz = vs_TEXCOORD6.yyy * unity_WorldToLight[1].xyz;
					    u_xlat5.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD6.xxx + u_xlat5.xyz;
					    u_xlat5.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD6.zzz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD6.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat7.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat7.y * 0.25 + 0.75;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat7.x = max(u_xlat43, u_xlat44);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
					    } else {
					        u_xlat7.x = float(1.0);
					        u_xlat7.y = float(1.0);
					        u_xlat7.z = float(1.0);
					        u_xlat7.w = float(1.0);
					    }
					    u_xlat43 = dot(u_xlat7, unity_OcclusionMaskSelector);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5 = texture(_LightTexture0, vec2(u_xlat44));
					    u_xlat43 = u_xlat43 * u_xlat5.x;
					    u_xlat5.x = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD5.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat43) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42) + u_xlat2.xyz;
					    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat18.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat6.w * u_xlat0.x;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat4.xyw;
					    u_xlat2.xyz = u_xlat3.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat42 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat42);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   float4 _LightColor0;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   float _Shininess;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   _WorldSpaceLightPos0 c1       1
					//   unity_FogParams      c2       1
					//   _LightColor0         c3       1
					//   _SpecColor           c4       1
					//   _Shininess           c5       1
					//   _Parallax            c6       1
					//   _Color               c7       1
					//   _Blur                c8       1
					//   _Mask1               s0       1
					//   _Normalmap           s1       1
					//   _Splat0              s2       1
					//   _Splat1              s3       1
					//   _Splat2              s4       1
					//   _Splat3              s5       1
					//   _Normal0             s6       1
					//   _Normal1             s7       1
					//   _Normal2             s8       1
					//   _Normal3             s9       1
					//   _ColorTex            s10      1
					//   _HeightSplatAll      s11      1
					//
					
					    ps_3_0
					    def c9, 0.5, 0.419999987, 0, 6
					    def c10, 2, -1, 1, 20
					    def c11, 1.5, 128, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord8 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    add r0.xyz, c0, -v6
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    mad_pp r0.xyz, r0, r0.w, c1
					    nrm_pp r2.xyz, r0
					    mul_pp r0.xyz, r1.y, v4
					    mad_pp r0.xyz, v3, r1.x, r0
					    mad_pp r0.xyz, v5, r1.z, r0
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    mad r0.z, r0.z, r0.w, c9.y
					    mul r0.xy, r0.w, r0
					    rcp r0.z, r0.z
					    mul r0.xy, r0.z, r0
					    texld_pp r1, v0.zwzw, s11
					    mov r3.x, c9.x
					    mul_pp r0.z, r3.x, c6.x
					    mad_pp r0.w, r1.x, c6.x, -r0.z
					    mad r1.yz, r0.w, r0.xxyw, v0.xzww
					    texld r3, r1.yzzw, s6
					    texld r4, r1.yzzw, s2
					    texld_pp r5, v1, s11
					    mad_pp r0.w, r5.y, c6.x, -r0.z
					    mad r1.yz, r0.w, r0.xxyw, v1.xxyw
					    texld r6, r1.yzzw, s7
					    texld r7, r1.yzzw, s3
					    texld_pp r8, v0, s0
					    add r0.w, r1.x, r8.x
					    add r1.x, r5.y, r8.y
					    max r2.w, r0.w, r1.x
					    texld_pp r5, v1.zwzw, s11
					    add r1.y, r8.z, r5.z
					    max r3.x, r2.w, r1.y
					    texld_pp r5, v2, s11
					    add r1.z, r8.w, r5.w
					    mad_pp r0.z, r5.w, c6.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    max r0.z, r3.x, r1.z
					    add r0.z, r0.z, -c8.x
					    add r1.x, -r0.z, r1.x
					    max r2.w, r1.x, c9.z
					    mul r1.xw, r2.w, r6.wyzy
					    add r0.w, -r0.z, r0.w
					    max r3.x, r0.w, c9.z
					    mad r1.xw, r3.wyzy, r3.x, r1
					    texld r5, v1.zwzw, s8
					    add r0.w, -r0.z, r1.y
					    add r0.z, -r0.z, r1.z
					    max r1.y, r0.w, c9.z
					    mad r1.xz, r5.wyyw, r1.y, r1.xyww
					    texld r5, r0, s9
					    texld r6, r0, s5
					    mul r0.x, r0.z, c9.w
					    cmp r0.x, r0.z, r0.x, c9.z
					    mad r0.yz, r5.xwyw, r0.x, r1.xxzw
					    add r0.w, r2.w, r3.x
					    add r0.w, r1.y, r0.w
					    add r0.w, r0.x, r0.w
					    rcp r0.w, r0.w
					    mul_pp r0.yz, r0.w, r0
					    mad_pp r5.xy, r0.yzzw, c10.x, c10.y
					    dp2add_sat_pp r0.y, r5, r5, c9.z
					    add_pp r0.y, -r0.y, c10.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r5.z, r0.y
					    texld_pp r8, v0, s1
					    mad_pp r8.xy, r8.wyzw, c10.x, c10.y
					    dp2add_sat_pp r0.y, r8, r8, c9.z
					    add_pp r0.y, -r0.y, c10.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r8.z, r0.y
					    mad_pp r1.xzw, r5.xyyz, c10.w, r8.xyyz
					    nrm_pp r5.xyz, r1.xzww
					    mul_pp r1.xzw, r5.xyyz, c11.x
					    dp3_pp r5.x, v3, r1.xzww
					    dp3_pp r5.y, v4, r1.xzww
					    dp3_pp r5.z, v5, r1.xzww
					    dp3_pp r0.y, r5, r2
					    dp3_pp r0.z, r5, c1
					    max_pp r1.x, r0.z, c9.z
					    max r1.z, r0.y, c9.z
					    mov r0.y, c11.y
					    mul r0.y, r0.y, c5.x
					    pow r2.x, r1.z, r0.y
					    texld_pp r5, v0, s10
					    mul_pp r7, r5, r7
					    mul r7, r2.w, r7
					    mul_pp r4, r4, r5
					    mad r3, r4, r3.x, r7
					    texld r4, v1.zwzw, s4
					    mul_pp r4, r5, r4
					    mul_pp r5, r5, r6
					    mad r3, r4, r1.y, r3
					    mad r3, r5, r0.x, r3
					    mul_pp r0, r0.w, r3
					    mul r0.w, r0.w, r2.x
					    mul_pp r0.xyz, r0, c7
					    mul_pp r0.xyz, r0, c3
					    mov r2.xyz, c3
					    mul r1.yzw, r2.xxyz, c4.xxyz
					    mul r1.yzw, r0.w, r1
					    mad_pp r0.xyz, r0, r1.x, r1.yzww
					    mad_sat r0.w, v7.x, c2.z, c2.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c10.z
					
					// approximately 114 instruction slots used (15 texture, 99 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						float _Shininess;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_7[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec2 u_xlat14;
					float u_xlat15;
					vec2 u_xlat25;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					float u_xlat39;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = vs_TEXCOORD3.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat14.xy = vec2(_Parallax, _Shininess) * vec2(0.5, 128.0);
					    u_xlat37 = u_xlat2.x * _Parallax + (-u_xlat14.x);
					    u_xlat38 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
					    u_xlat25.x = u_xlat1.z * u_xlat38 + 0.419999987;
					    u_xlat1.xy = u_xlat1.xy / u_xlat25.xx;
					    u_xlat25.xy = vec2(u_xlat37) * u_xlat1.xy + vs_TEXCOORD0.zw;
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat38 = u_xlat3.y * _Parallax + (-u_xlat14.x);
					    u_xlat3.xz = vec2(u_xlat38) * u_xlat1.xy + vs_TEXCOORD1.xy;
					    u_xlat4 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat14.x = u_xlat4.w * _Parallax + (-u_xlat14.x);
					    u_xlat1.xy = u_xlat14.xx * u_xlat1.xy + vs_TEXCOORD2.xy;
					    u_xlat5 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat6 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat7 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat8 = texture(_Splat0, u_xlat25.xy);
					    u_xlat8 = u_xlat5 * u_xlat8;
					    u_xlat9 = texture(_Splat1, u_xlat3.xz);
					    u_xlat9 = u_xlat5 * u_xlat9;
					    u_xlat10 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat10 = u_xlat5 * u_xlat10;
					    u_xlat11 = texture(_Splat3, u_xlat1.xy);
					    u_xlat5 = u_xlat5 * u_xlat11;
					    u_xlat11 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat2.x = u_xlat2.x + u_xlat6.x;
					    u_xlat2.y = u_xlat3.y + u_xlat6.y;
					    u_xlat38 = max(u_xlat2.y, u_xlat2.x);
					    u_xlat15 = u_xlat6.z + u_xlat11.z;
					    u_xlat38 = max(u_xlat38, u_xlat15);
					    u_xlat39 = u_xlat4.w + u_xlat6.w;
					    u_xlat38 = max(u_xlat38, u_xlat39);
					    u_xlat38 = u_xlat38 + (-_Blur);
					    u_xlat2.xy = (-vec2(u_xlat38)) + u_xlat2.xy;
					    u_xlat15 = (-u_xlat38) + u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat2.w = (-u_xlat38) + u_xlat39;
					    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat39 = u_xlat2.w * 6.0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat9;
					    u_xlat4 = u_xlat8 * u_xlat2.xxxx + u_xlat4;
					    u_xlat4 = u_xlat10 * vec4(u_xlat15) + u_xlat4;
					    u_xlat4 = u_xlat5 * vec4(u_xlat39) + u_xlat4;
					    u_xlat5.x = u_xlat2.y + u_xlat2.x;
					    u_xlat5.x = u_xlat15 + u_xlat5.x;
					    u_xlat38 = u_xlat2.w * 6.0 + u_xlat5.x;
					    u_xlat4 = u_xlat4 / vec4(u_xlat38);
					    u_xlat5 = texture(_Normal0, u_xlat25.xy);
					    u_xlat6 = texture(_Normal1, u_xlat3.xz);
					    u_xlat8 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Normal3, u_xlat1.xy);
					    u_xlat1.xz = u_xlat2.yy * u_xlat6.wy;
					    u_xlat1.xz = u_xlat5.wy * u_xlat2.xx + u_xlat1.xz;
					    u_xlat1.xz = u_xlat8.wy * vec2(u_xlat15) + u_xlat1.xz;
					    u_xlat1.xy = u_xlat1.wy * vec2(u_xlat39) + u_xlat1.xz;
					    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat38);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat37 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat37 = min(u_xlat37, 1.0);
					    u_xlat37 = (-u_xlat37) + 1.0;
					    u_xlat1.z = sqrt(u_xlat37);
					    u_xlat3.xy = u_xlat7.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat37 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat37 = min(u_xlat37, 1.0);
					    u_xlat37 = (-u_xlat37) + 1.0;
					    u_xlat3.z = sqrt(u_xlat37);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(20.0, 20.0, 20.0) + u_xlat3.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat2.xyw = u_xlat4.xyz * _Color.xyz;
					    u_xlatb37 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb37){
					        u_xlatb37 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat3.xyz = vs_TEXCOORD6.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat3.xyz;
					        u_xlat3.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat3.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat3.xyz = (bool(u_xlatb37)) ? u_xlat3.xyz : vs_TEXCOORD6.xyz;
					        u_xlat3.xyz = u_xlat3.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat3.yzw = u_xlat3.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat37 = u_xlat3.y * 0.25 + 0.75;
					        u_xlat15 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat3.x = max(u_xlat37, u_xlat15);
					        u_xlat3 = texture(unity_ProbeVolumeSH, u_xlat3.xzw);
					    } else {
					        u_xlat3.x = float(1.0);
					        u_xlat3.y = float(1.0);
					        u_xlat3.z = float(1.0);
					        u_xlat3.w = float(1.0);
					    }
					    u_xlat37 = dot(u_xlat3, unity_OcclusionMaskSelector);
					    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vec3(u_xlat37) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat4.w * u_xlat0.x;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat36 = (-u_xlat36) + 1.0;
					    u_xlat36 = u_xlat36 * _ProjectionParams.z;
					    u_xlat36 = max(u_xlat36, 0.0);
					    u_xlat36 = u_xlat36 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat36);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   float _Shininess;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       4
					//   _WorldSpaceCameraPos c4       1
					//   _WorldSpaceLightPos0 c5       1
					//   unity_FogParams      c6       1
					//   _LightColor0         c7       1
					//   _SpecColor           c8       1
					//   _Shininess           c9       1
					//   _Parallax            c10      1
					//   _Color               c11      1
					//   _Blur                c12      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _Mask1               s2       1
					//   _Normalmap           s3       1
					//   _Splat0              s4       1
					//   _Splat1              s5       1
					//   _Splat2              s6       1
					//   _Splat3              s7       1
					//   _Normal0             s8       1
					//   _Normal1             s9       1
					//   _Normal2             s10      1
					//   _Normal3             s11      1
					//   _ColorTex            s12      1
					//   _HeightSplatAll      s13      1
					//
					
					    ps_3_0
					    def c13, 0.5, 0.419999987, 0, 6
					    def c14, 2, -1, 1, 20
					    def c15, 1.5, 1, 0, 128
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord8 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    dcl_2d s12
					    dcl_2d s13
					    add r0.xyz, c4, -v6
					    nrm_pp r1.xyz, r0
					    mul_pp r0.xyz, r1.y, v4
					    mad_pp r0.xyz, v3, r1.x, r0
					    mad_pp r0.xyz, v5, r1.z, r0
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    mad r0.z, r0.z, r0.w, c13.y
					    mul r0.xy, r0.w, r0
					    rcp r0.z, r0.z
					    mul r0.xy, r0.z, r0
					    texld_pp r2, v0.zwzw, s13
					    mov r3.x, c13.x
					    mul_pp r0.z, r3.x, c10.x
					    mad_pp r0.w, r2.x, c10.x, -r0.z
					    mad r2.yz, r0.w, r0.xxyw, v0.xzww
					    texld r3, r2.yzzw, s8
					    texld r4, r2.yzzw, s4
					    texld_pp r5, v1, s13
					    mad_pp r0.w, r5.y, c10.x, -r0.z
					    mad r2.yz, r0.w, r0.xxyw, v1.xxyw
					    texld r6, r2.yzzw, s9
					    texld r7, r2.yzzw, s5
					    texld_pp r8, v0, s2
					    add r0.w, r2.x, r8.x
					    add r1.w, r5.y, r8.y
					    max r2.x, r0.w, r1.w
					    texld_pp r5, v1.zwzw, s13
					    add r2.y, r8.z, r5.z
					    max r3.x, r2.x, r2.y
					    texld_pp r5, v2, s13
					    add r2.x, r8.w, r5.w
					    mad_pp r0.z, r5.w, c10.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    max r0.z, r3.x, r2.x
					    add r0.z, r0.z, -c12.x
					    add r1.w, -r0.z, r1.w
					    max r2.z, r1.w, c13.z
					    mul r3.xz, r2.z, r6.wyyw
					    add r0.w, -r0.z, r0.w
					    max r1.w, r0.w, c13.z
					    mad r3.xy, r3.wyzw, r1.w, r3.xzzw
					    texld r5, v1.zwzw, s10
					    add r0.w, -r0.z, r2.y
					    add r0.z, -r0.z, r2.x
					    max r2.x, r0.w, c13.z
					    mad r2.yw, r5.xwzy, r2.x, r3.xxzy
					    texld r3, r0, s11
					    texld r5, r0, s7
					    mul r0.x, r0.z, c13.w
					    cmp r0.x, r0.z, r0.x, c13.z
					    mad r0.yz, r3.xwyw, r0.x, r2.xyww
					    add r0.w, r2.z, r1.w
					    add r0.w, r2.x, r0.w
					    add r0.w, r0.x, r0.w
					    rcp r0.w, r0.w
					    mul_pp r0.yz, r0.w, r0
					    mad_pp r3.xy, r0.yzzw, c14.x, c14.y
					    dp2add_sat_pp r0.y, r3, r3, c13.z
					    add_pp r0.y, -r0.y, c14.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r3.z, r0.y
					    texld_pp r6, v0, s3
					    mad_pp r6.xy, r6.wyzw, c14.x, c14.y
					    dp2add_sat_pp r0.y, r6, r6, c13.z
					    add_pp r0.y, -r0.y, c14.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r6.z, r0.y
					    mad_pp r3.xyz, r3, c14.w, r6
					    nrm_pp r6.xyz, r3
					    mul_pp r3.xyz, r6, c15.x
					    dp3_pp r6.x, v3, r3
					    dp3_pp r6.y, v4, r3
					    dp3_pp r6.z, v5, r3
					    add r3.xyz, c5, -v6
					    dp3 r0.y, r3, r3
					    rsq r0.y, r0.y
					    mad_pp r1.xyz, r3, r0.y, r1
					    mul_pp r3.xyz, r0.y, r3
					    dp3_pp r0.y, r6, r3
					    max_pp r2.y, r0.y, c13.z
					    nrm_pp r3.xyz, r1
					    dp3_pp r0.y, r6, r3
					    max r1.x, r0.y, c13.z
					    mov r2.w, c15.w
					    mul r0.y, r2.w, c9.x
					    pow r2.w, r1.x, r0.y
					    texld_pp r3, v0, s12
					    mul_pp r6, r3, r7
					    mul r6, r2.z, r6
					    mul_pp r4, r3, r4
					    mad r1, r4, r1.w, r6
					    texld r4, v1.zwzw, s6
					    mul_pp r4, r3, r4
					    mul_pp r3, r3, r5
					    mad r1, r4, r2.x, r1
					    mad r1, r3, r0.x, r1
					    mul_pp r0, r0.w, r1
					    mul r0.w, r0.w, r2.w
					    mul_pp r0.xyz, r0, c11
					    mad r1, v6.xyzx, c15.yyyz, c15.zzzy
					    dp4 r2.x, c3, r1
					    rcp r2.x, r2.x
					    dp4 r3.x, c0, r1
					    dp4 r3.y, c1, r1
					    dp4 r3.z, c2, r1
					    mad r1.xy, r3, r2.x, c13.x
					    dp3 r1.z, r3, r3
					    texld_pp r4, r1.z, s1
					    texld_pp r1, r1, s0
					    mul r1.x, r4.x, r1.w
					    mul_pp r1.xyz, r1.x, c7
					    cmp_pp r1.xyz, -r3.z, c13.z, r1
					    mul r2.xzw, r1.xyyz, c8.xyyz
					    mul_pp r0.xyz, r0, r1
					    mul r1.xyz, r0.w, r2.xzww
					    mad_pp r0.xyz, r0, r2.y, r1
					    mad_sat r0.w, v7.x, c6.z, c6.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c14.z
					
					// approximately 130 instruction slots used (17 texture, 113 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SPOT" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _Shininess;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_8[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					uniform  sampler2D _LightTextureB0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat31;
					float u_xlat42;
					float u_xlat43;
					bool u_xlatb43;
					float u_xlat44;
					bool u_xlatb44;
					float u_xlat45;
					float u_xlat46;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat43 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat2.xyz = vec3(u_xlat43) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat4 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat18.xy = vec2(_Parallax, _Shininess) * vec2(0.5, 128.0);
					    u_xlat43 = u_xlat4.x * _Parallax + (-u_xlat18.x);
					    u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat44 = inversesqrt(u_xlat44);
					    u_xlat3.xy = vec2(u_xlat44) * u_xlat3.xy;
					    u_xlat44 = u_xlat3.z * u_xlat44 + 0.419999987;
					    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat44);
					    u_xlat31.xy = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat5 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat43 = u_xlat5.y * _Parallax + (-u_xlat18.x);
					    u_xlat5.xz = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD1.xy;
					    u_xlat6 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat43 = u_xlat6.w * _Parallax + (-u_xlat18.x);
					    u_xlat3.xy = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD2.xy;
					    u_xlat7 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat8 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat9 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat10 = texture(_Splat0, u_xlat31.xy);
					    u_xlat10 = u_xlat7 * u_xlat10;
					    u_xlat11 = texture(_Splat1, u_xlat5.xz);
					    u_xlat11 = u_xlat7 * u_xlat11;
					    u_xlat12 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat12 = u_xlat7 * u_xlat12;
					    u_xlat13 = texture(_Splat3, u_xlat3.xy);
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat13 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat43 = u_xlat4.x + u_xlat8.x;
					    u_xlat44 = u_xlat5.y + u_xlat8.y;
					    u_xlat4.x = max(u_xlat43, u_xlat44);
					    u_xlat18.x = u_xlat8.z + u_xlat13.z;
					    u_xlat4.x = max(u_xlat18.x, u_xlat4.x);
					    u_xlat46 = u_xlat6.w + u_xlat8.w;
					    u_xlat4.x = max(u_xlat46, u_xlat4.x);
					    u_xlat4.x = u_xlat4.x + (-_Blur);
					    u_xlat43 = u_xlat43 + (-u_xlat4.x);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat44 = u_xlat44 + (-u_xlat4.x);
					    u_xlat44 = max(u_xlat44, 0.0);
					    u_xlat4.y = (-u_xlat4.x) + u_xlat18.x;
					    u_xlat4.x = (-u_xlat4.x) + u_xlat46;
					    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
					    u_xlat46 = u_xlat4.x * 6.0;
					    u_xlat6 = vec4(u_xlat44) * u_xlat11;
					    u_xlat6 = u_xlat10 * vec4(u_xlat43) + u_xlat6;
					    u_xlat6 = u_xlat12 * u_xlat4.yyyy + u_xlat6;
					    u_xlat6 = u_xlat7 * vec4(u_xlat46) + u_xlat6;
					    u_xlat19 = u_xlat43 + u_xlat44;
					    u_xlat19 = u_xlat4.y + u_xlat19;
					    u_xlat4.x = u_xlat4.x * 6.0 + u_xlat19;
					    u_xlat6 = u_xlat6 / u_xlat4.xxxx;
					    u_xlat7 = texture(_Normal0, u_xlat31.xy);
					    u_xlat5 = texture(_Normal1, u_xlat5.xz);
					    u_xlat8 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat3 = texture(_Normal3, u_xlat3.xy);
					    u_xlat3.xz = vec2(u_xlat44) * u_xlat5.wy;
					    u_xlat3.xz = u_xlat7.wy * vec2(u_xlat43) + u_xlat3.xz;
					    u_xlat3.xz = u_xlat8.wy * u_xlat4.yy + u_xlat3.xz;
					    u_xlat3.xy = u_xlat3.wy * vec2(u_xlat46) + u_xlat3.xz;
					    u_xlat3.xy = u_xlat3.xy / u_xlat4.xx;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat3.z = sqrt(u_xlat43);
					    u_xlat5.xy = u_xlat9.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat5.z = sqrt(u_xlat43);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(20.0, 20.0, 20.0) + u_xlat5.xyz;
					    u_xlat43 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat3.xyz = vec3(u_xlat43) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat4.xyw = u_xlat6.xyz * _Color.xyz;
					    u_xlat5 = vs_TEXCOORD6.yyyy * unity_WorldToLight[1];
					    u_xlat5 = unity_WorldToLight[0] * vs_TEXCOORD6.xxxx + u_xlat5;
					    u_xlat5 = unity_WorldToLight[2] * vs_TEXCOORD6.zzzz + u_xlat5;
					    u_xlat5 = u_xlat5 + unity_WorldToLight[3];
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD6.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat7.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat7.y * 0.25 + 0.75;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat7.x = max(u_xlat43, u_xlat44);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
					    } else {
					        u_xlat7.x = float(1.0);
					        u_xlat7.y = float(1.0);
					        u_xlat7.z = float(1.0);
					        u_xlat7.w = float(1.0);
					    }
					    u_xlat43 = dot(u_xlat7, unity_OcclusionMaskSelector);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlatb44 = 0.0<u_xlat5.z;
					    u_xlat44 = u_xlatb44 ? 1.0 : float(0.0);
					    u_xlat6.xy = u_xlat5.xy / u_xlat5.ww;
					    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
					    u_xlat7 = texture(_LightTexture0, u_xlat6.xy);
					    u_xlat44 = u_xlat44 * u_xlat7.w;
					    u_xlat45 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat5 = texture(_LightTextureB0, vec2(u_xlat45));
					    u_xlat44 = u_xlat44 * u_xlat5.x;
					    u_xlat43 = u_xlat43 * u_xlat44;
					    u_xlat5.x = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD5.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat43) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42) + u_xlat2.xyz;
					    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat18.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat6.w * u_xlat0.x;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat4.xyw;
					    u_xlat2.xyz = u_xlat3.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat42 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat42);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   float4 _LightColor0;
					//   samplerCUBE _LightTexture0;
					//   sampler2D _LightTextureB0;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   float _Shininess;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       3
					//   _WorldSpaceCameraPos c3       1
					//   _WorldSpaceLightPos0 c4       1
					//   unity_FogParams      c5       1
					//   _LightColor0         c6       1
					//   _SpecColor           c7       1
					//   _Shininess           c8       1
					//   _Parallax            c9       1
					//   _Color               c10      1
					//   _Blur                c11      1
					//   _LightTexture0       s0       1
					//   _LightTextureB0      s1       1
					//   _Mask1               s2       1
					//   _Normalmap           s3       1
					//   _Splat0              s4       1
					//   _Splat1              s5       1
					//   _Splat2              s6       1
					//   _Splat3              s7       1
					//   _Normal0             s8       1
					//   _Normal1             s9       1
					//   _Normal2             s10      1
					//   _Normal3             s11      1
					//   _ColorTex            s12      1
					//   _HeightSplatAll      s13      1
					//
					
					    ps_3_0
					    def c12, 0.5, 0.419999987, 0, 6
					    def c13, 2, -1, 1, 20
					    def c14, 1.5, 1, 0, 128
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord8 v7.x
					    dcl_cube s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    dcl_2d s12
					    dcl_2d s13
					    add r0.xyz, c3, -v6
					    nrm_pp r1.xyz, r0
					    mul_pp r0.xyz, r1.y, v4
					    mad_pp r0.xyz, v3, r1.x, r0
					    mad_pp r0.xyz, v5, r1.z, r0
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    mad r0.z, r0.z, r0.w, c12.y
					    mul r0.xy, r0.w, r0
					    rcp r0.z, r0.z
					    mul r0.xy, r0.z, r0
					    texld_pp r2, v0.zwzw, s13
					    mov r3.x, c12.x
					    mul_pp r0.z, r3.x, c9.x
					    mad_pp r0.w, r2.x, c9.x, -r0.z
					    mad r2.yz, r0.w, r0.xxyw, v0.xzww
					    texld r3, r2.yzzw, s8
					    texld r4, r2.yzzw, s4
					    texld_pp r5, v1, s13
					    mad_pp r0.w, r5.y, c9.x, -r0.z
					    mad r2.yz, r0.w, r0.xxyw, v1.xxyw
					    texld r6, r2.yzzw, s9
					    texld r7, r2.yzzw, s5
					    texld_pp r8, v0, s2
					    add r0.w, r2.x, r8.x
					    add r1.w, r5.y, r8.y
					    max r2.x, r0.w, r1.w
					    texld_pp r5, v1.zwzw, s13
					    add r2.y, r8.z, r5.z
					    max r3.x, r2.x, r2.y
					    texld_pp r5, v2, s13
					    add r2.x, r8.w, r5.w
					    mad_pp r0.z, r5.w, c9.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    max r0.z, r3.x, r2.x
					    add r0.z, r0.z, -c11.x
					    add r1.w, -r0.z, r1.w
					    max r2.z, r1.w, c12.z
					    mul r3.xz, r2.z, r6.wyyw
					    add r0.w, -r0.z, r0.w
					    max r1.w, r0.w, c12.z
					    mad r3.xy, r3.wyzw, r1.w, r3.xzzw
					    texld r5, v1.zwzw, s10
					    add r0.w, -r0.z, r2.y
					    add r0.z, -r0.z, r2.x
					    max r2.x, r0.w, c12.z
					    mad r2.yw, r5.xwzy, r2.x, r3.xxzy
					    texld r3, r0, s11
					    texld r5, r0, s7
					    mul r0.x, r0.z, c12.w
					    cmp r0.x, r0.z, r0.x, c12.z
					    mad r0.yz, r3.xwyw, r0.x, r2.xyww
					    add r0.w, r2.z, r1.w
					    add r0.w, r2.x, r0.w
					    add r0.w, r0.x, r0.w
					    rcp r0.w, r0.w
					    mul_pp r0.yz, r0.w, r0
					    mad_pp r3.xy, r0.yzzw, c13.x, c13.y
					    dp2add_sat_pp r0.y, r3, r3, c12.z
					    add_pp r0.y, -r0.y, c13.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r3.z, r0.y
					    texld_pp r6, v0, s3
					    mad_pp r6.xy, r6.wyzw, c13.x, c13.y
					    dp2add_sat_pp r0.y, r6, r6, c12.z
					    add_pp r0.y, -r0.y, c13.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r6.z, r0.y
					    mad_pp r3.xyz, r3, c13.w, r6
					    nrm_pp r6.xyz, r3
					    mul_pp r3.xyz, r6, c14.x
					    dp3_pp r6.x, v3, r3
					    dp3_pp r6.y, v4, r3
					    dp3_pp r6.z, v5, r3
					    add r3.xyz, c4, -v6
					    dp3 r0.y, r3, r3
					    rsq r0.y, r0.y
					    mad_pp r1.xyz, r3, r0.y, r1
					    mul_pp r3.xyz, r0.y, r3
					    dp3_pp r0.y, r6, r3
					    max_pp r2.y, r0.y, c12.z
					    nrm_pp r3.xyz, r1
					    dp3_pp r0.y, r6, r3
					    max r1.x, r0.y, c12.z
					    mov r2.w, c14.w
					    mul r0.y, r2.w, c8.x
					    pow r2.w, r1.x, r0.y
					    texld_pp r3, v0, s12
					    mul_pp r6, r3, r7
					    mul r6, r2.z, r6
					    mul_pp r4, r3, r4
					    mad r1, r4, r1.w, r6
					    texld r4, v1.zwzw, s6
					    mul_pp r4, r3, r4
					    mul_pp r3, r3, r5
					    mad r1, r4, r2.x, r1
					    mad r1, r3, r0.x, r1
					    mul_pp r0, r0.w, r1
					    mul r0.w, r0.w, r2.w
					    mul_pp r0.xyz, r0, c10
					    mad r1, v6.xyzx, c14.yyyz, c14.zzzy
					    dp4 r3.x, c0, r1
					    dp4 r3.y, c1, r1
					    dp4 r3.z, c2, r1
					    dp3 r1.x, r3, r3
					    texld r3, r3, s0
					    texld r1, r1.x, s1
					    mul_pp r1.x, r3.w, r1.x
					    mul_pp r1.xyz, r1.x, c6
					    mul r2.xzw, r1.xyyz, c7.xyyz
					    mul_pp r0.xyz, r0, r1
					    mul r1.xyz, r0.w, r2.xzww
					    mad_pp r0.xyz, r0, r2.y, r1
					    mad_sat r0.w, v7.x, c5.z, c5.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c13.z
					
					// approximately 126 instruction slots used (17 texture, 109 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "POINT_COOKIE" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _Shininess;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_8[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTextureB0;
					uniform  samplerCube _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec4 u_xlat12;
					vec4 u_xlat13;
					vec2 u_xlat18;
					float u_xlat19;
					vec2 u_xlat31;
					float u_xlat42;
					float u_xlat43;
					bool u_xlatb43;
					float u_xlat44;
					float u_xlat46;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat1.xyz = vec3(u_xlat42) * u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat43 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat2.xyz = vec3(u_xlat43) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.yyy * vs_TEXCOORD4.xyz;
					    u_xlat3.xyz = vs_TEXCOORD3.xyz * u_xlat2.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = vs_TEXCOORD5.xyz * u_xlat2.zzz + u_xlat3.xyz;
					    u_xlat4 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat18.xy = vec2(_Parallax, _Shininess) * vec2(0.5, 128.0);
					    u_xlat43 = u_xlat4.x * _Parallax + (-u_xlat18.x);
					    u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat44 = inversesqrt(u_xlat44);
					    u_xlat3.xy = vec2(u_xlat44) * u_xlat3.xy;
					    u_xlat44 = u_xlat3.z * u_xlat44 + 0.419999987;
					    u_xlat3.xy = u_xlat3.xy / vec2(u_xlat44);
					    u_xlat31.xy = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD0.zw;
					    u_xlat5 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat43 = u_xlat5.y * _Parallax + (-u_xlat18.x);
					    u_xlat5.xz = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD1.xy;
					    u_xlat6 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat43 = u_xlat6.w * _Parallax + (-u_xlat18.x);
					    u_xlat3.xy = vec2(u_xlat43) * u_xlat3.xy + vs_TEXCOORD2.xy;
					    u_xlat7 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat8 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat9 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat10 = texture(_Splat0, u_xlat31.xy);
					    u_xlat10 = u_xlat7 * u_xlat10;
					    u_xlat11 = texture(_Splat1, u_xlat5.xz);
					    u_xlat11 = u_xlat7 * u_xlat11;
					    u_xlat12 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat12 = u_xlat7 * u_xlat12;
					    u_xlat13 = texture(_Splat3, u_xlat3.xy);
					    u_xlat7 = u_xlat7 * u_xlat13;
					    u_xlat13 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat43 = u_xlat4.x + u_xlat8.x;
					    u_xlat44 = u_xlat5.y + u_xlat8.y;
					    u_xlat4.x = max(u_xlat43, u_xlat44);
					    u_xlat18.x = u_xlat8.z + u_xlat13.z;
					    u_xlat4.x = max(u_xlat18.x, u_xlat4.x);
					    u_xlat46 = u_xlat6.w + u_xlat8.w;
					    u_xlat4.x = max(u_xlat46, u_xlat4.x);
					    u_xlat4.x = u_xlat4.x + (-_Blur);
					    u_xlat43 = u_xlat43 + (-u_xlat4.x);
					    u_xlat43 = max(u_xlat43, 0.0);
					    u_xlat44 = u_xlat44 + (-u_xlat4.x);
					    u_xlat44 = max(u_xlat44, 0.0);
					    u_xlat4.y = (-u_xlat4.x) + u_xlat18.x;
					    u_xlat4.x = (-u_xlat4.x) + u_xlat46;
					    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
					    u_xlat46 = u_xlat4.x * 6.0;
					    u_xlat6 = vec4(u_xlat44) * u_xlat11;
					    u_xlat6 = u_xlat10 * vec4(u_xlat43) + u_xlat6;
					    u_xlat6 = u_xlat12 * u_xlat4.yyyy + u_xlat6;
					    u_xlat6 = u_xlat7 * vec4(u_xlat46) + u_xlat6;
					    u_xlat19 = u_xlat43 + u_xlat44;
					    u_xlat19 = u_xlat4.y + u_xlat19;
					    u_xlat4.x = u_xlat4.x * 6.0 + u_xlat19;
					    u_xlat6 = u_xlat6 / u_xlat4.xxxx;
					    u_xlat7 = texture(_Normal0, u_xlat31.xy);
					    u_xlat5 = texture(_Normal1, u_xlat5.xz);
					    u_xlat8 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat3 = texture(_Normal3, u_xlat3.xy);
					    u_xlat3.xz = vec2(u_xlat44) * u_xlat5.wy;
					    u_xlat3.xz = u_xlat7.wy * vec2(u_xlat43) + u_xlat3.xz;
					    u_xlat3.xz = u_xlat8.wy * u_xlat4.yy + u_xlat3.xz;
					    u_xlat3.xy = u_xlat3.wy * vec2(u_xlat46) + u_xlat3.xz;
					    u_xlat3.xy = u_xlat3.xy / u_xlat4.xx;
					    u_xlat3.xy = u_xlat3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat3.z = sqrt(u_xlat43);
					    u_xlat5.xy = u_xlat9.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat43 = dot(u_xlat5.xy, u_xlat5.xy);
					    u_xlat43 = min(u_xlat43, 1.0);
					    u_xlat43 = (-u_xlat43) + 1.0;
					    u_xlat5.z = sqrt(u_xlat43);
					    u_xlat3.xyz = u_xlat3.xyz * vec3(20.0, 20.0, 20.0) + u_xlat5.xyz;
					    u_xlat43 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat3.xyz = vec3(u_xlat43) * u_xlat3.xyz;
					    u_xlat3.xyz = u_xlat3.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat4.xyw = u_xlat6.xyz * _Color.xyz;
					    u_xlat5.xyz = vs_TEXCOORD6.yyy * unity_WorldToLight[1].xyz;
					    u_xlat5.xyz = unity_WorldToLight[0].xyz * vs_TEXCOORD6.xxx + u_xlat5.xyz;
					    u_xlat5.xyz = unity_WorldToLight[2].xyz * vs_TEXCOORD6.zzz + u_xlat5.xyz;
					    u_xlat5.xyz = u_xlat5.xyz + unity_WorldToLight[3].xyz;
					    u_xlatb43 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb43){
					        u_xlatb43 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat6.xyz = vs_TEXCOORD6.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat6.xyz;
					        u_xlat6.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat6.xyz = (bool(u_xlatb43)) ? u_xlat6.xyz : vs_TEXCOORD6.xyz;
					        u_xlat6.xyz = u_xlat6.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat7.yzw = u_xlat6.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat43 = u_xlat7.y * 0.25 + 0.75;
					        u_xlat44 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat7.x = max(u_xlat43, u_xlat44);
					        u_xlat7 = texture(unity_ProbeVolumeSH, u_xlat7.xzw);
					    } else {
					        u_xlat7.x = float(1.0);
					        u_xlat7.y = float(1.0);
					        u_xlat7.z = float(1.0);
					        u_xlat7.w = float(1.0);
					    }
					    u_xlat43 = dot(u_xlat7, unity_OcclusionMaskSelector);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat44 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat7 = texture(_LightTextureB0, vec2(u_xlat44));
					    u_xlat5 = texture(_LightTexture0, u_xlat5.xyz);
					    u_xlat44 = u_xlat5.w * u_xlat7.x;
					    u_xlat43 = u_xlat43 * u_xlat44;
					    u_xlat5.x = dot(vs_TEXCOORD3.xyz, u_xlat3.xyz);
					    u_xlat5.y = dot(vs_TEXCOORD4.xyz, u_xlat3.xyz);
					    u_xlat5.z = dot(vs_TEXCOORD5.xyz, u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat43) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat42) + u_xlat2.xyz;
					    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat5.xyz, u_xlat1.xyz);
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat18.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat6.w * u_xlat0.x;
					    u_xlat1.xyz = u_xlat3.xyz * u_xlat4.xyw;
					    u_xlat2.xyz = u_xlat3.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat42 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat42 = (-u_xlat42) + 1.0;
					    u_xlat42 = u_xlat42 * _ProjectionParams.z;
					    u_xlat42 = max(u_xlat42, 0.0);
					    u_xlat42 = u_xlat42 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat42);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   float4 _LightColor0;
					//   sampler2D _LightTexture0;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   float _Shininess;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 unity_FogParams;
					//   row_major float4x4 unity_WorldToLight;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   unity_WorldToLight   c0       2
					//   _WorldSpaceCameraPos c2       1
					//   _WorldSpaceLightPos0 c3       1
					//   unity_FogParams      c4       1
					//   _LightColor0         c5       1
					//   _SpecColor           c6       1
					//   _Shininess           c7       1
					//   _Parallax            c8       1
					//   _Color               c9       1
					//   _Blur                c10      1
					//   _LightTexture0       s0       1
					//   _Mask1               s1       1
					//   _Normalmap           s2       1
					//   _Splat0              s3       1
					//   _Splat1              s4       1
					//   _Splat2              s5       1
					//   _Splat3              s6       1
					//   _Normal0             s7       1
					//   _Normal1             s8       1
					//   _Normal2             s9       1
					//   _Normal3             s10      1
					//   _ColorTex            s11      1
					//   _HeightSplatAll      s12      1
					//
					
					    ps_3_0
					    def c11, 0.5, 0.419999987, 0, 6
					    def c12, 2, -1, 1, 20
					    def c13, 1.5, 1, 0, 128
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3_pp v3.xyz
					    dcl_texcoord4_pp v4.xyz
					    dcl_texcoord5_pp v5.xyz
					    dcl_texcoord6 v6.xyz
					    dcl_texcoord8 v7.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    dcl_2d s12
					    add r0.xyz, c2, -v6
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul_pp r1.xyz, r0.w, r0
					    mad_pp r0.xyz, r0, r0.w, c3
					    nrm_pp r2.xyz, r0
					    mul_pp r0.xyz, r1.y, v4
					    mad_pp r0.xyz, v3, r1.x, r0
					    mad_pp r0.xyz, v5, r1.z, r0
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    mad r0.z, r0.z, r0.w, c11.y
					    mul r0.xy, r0.w, r0
					    rcp r0.z, r0.z
					    mul r0.xy, r0.z, r0
					    texld_pp r1, v0.zwzw, s12
					    mov r3.x, c11.x
					    mul_pp r0.z, r3.x, c8.x
					    mad_pp r0.w, r1.x, c8.x, -r0.z
					    mad r1.yz, r0.w, r0.xxyw, v0.xzww
					    texld r3, r1.yzzw, s7
					    texld r4, r1.yzzw, s3
					    texld_pp r5, v1, s12
					    mad_pp r0.w, r5.y, c8.x, -r0.z
					    mad r1.yz, r0.w, r0.xxyw, v1.xxyw
					    texld r6, r1.yzzw, s8
					    texld r7, r1.yzzw, s4
					    texld_pp r8, v0, s1
					    add r0.w, r1.x, r8.x
					    add r1.x, r5.y, r8.y
					    max r2.w, r0.w, r1.x
					    texld_pp r5, v1.zwzw, s12
					    add r1.y, r8.z, r5.z
					    max r3.x, r2.w, r1.y
					    texld_pp r5, v2, s12
					    add r1.z, r8.w, r5.w
					    mad_pp r0.z, r5.w, c8.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    max r0.z, r3.x, r1.z
					    add r0.z, r0.z, -c10.x
					    add r1.x, -r0.z, r1.x
					    max r2.w, r1.x, c11.z
					    mul r1.xw, r2.w, r6.wyzy
					    add r0.w, -r0.z, r0.w
					    max r3.x, r0.w, c11.z
					    mad r1.xw, r3.wyzy, r3.x, r1
					    texld r5, v1.zwzw, s9
					    add r0.w, -r0.z, r1.y
					    add r0.z, -r0.z, r1.z
					    max r1.y, r0.w, c11.z
					    mad r1.xz, r5.wyyw, r1.y, r1.xyww
					    texld r5, r0, s10
					    texld r6, r0, s6
					    mul r0.x, r0.z, c11.w
					    cmp r0.x, r0.z, r0.x, c11.z
					    mad r0.yz, r5.xwyw, r0.x, r1.xxzw
					    add r0.w, r2.w, r3.x
					    add r0.w, r1.y, r0.w
					    add r0.w, r0.x, r0.w
					    rcp r0.w, r0.w
					    mul_pp r0.yz, r0.w, r0
					    mad_pp r5.xy, r0.yzzw, c12.x, c12.y
					    dp2add_sat_pp r0.y, r5, r5, c11.z
					    add_pp r0.y, -r0.y, c12.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r5.z, r0.y
					    texld_pp r8, v0, s2
					    mad_pp r8.xy, r8.wyzw, c12.x, c12.y
					    dp2add_sat_pp r0.y, r8, r8, c11.z
					    add_pp r0.y, -r0.y, c12.z
					    rsq_pp r0.y, r0.y
					    rcp_pp r8.z, r0.y
					    mad_pp r1.xzw, r5.xyyz, c12.w, r8.xyyz
					    nrm_pp r5.xyz, r1.xzww
					    mul_pp r1.xzw, r5.xyyz, c13.x
					    dp3_pp r5.x, v3, r1.xzww
					    dp3_pp r5.y, v4, r1.xzww
					    dp3_pp r5.z, v5, r1.xzww
					    dp3_pp r0.y, r5, r2
					    dp3_pp r0.z, r5, c3
					    max_pp r1.x, r0.z, c11.z
					    max r1.z, r0.y, c11.z
					    mov r1.w, c13.w
					    mul r0.y, r1.w, c7.x
					    pow r2.x, r1.z, r0.y
					    texld_pp r5, v0, s11
					    mul_pp r7, r5, r7
					    mul r7, r2.w, r7
					    mul_pp r4, r4, r5
					    mad r3, r4, r3.x, r7
					    texld r4, v1.zwzw, s5
					    mul_pp r4, r5, r4
					    mul_pp r5, r5, r6
					    mad r3, r4, r1.y, r3
					    mad r3, r5, r0.x, r3
					    mul_pp r0, r0.w, r3
					    mul r0.w, r0.w, r2.x
					    mul_pp r0.xyz, r0, c9
					    mad r2, v6.xyzx, c13.yyyz, c13.zzzy
					    dp4 r3.x, c0, r2
					    dp4 r3.y, c1, r2
					    texld_pp r2, r3, s0
					    mul_pp r1.yzw, r2.w, c5.xxyz
					    mul r2.xyz, r1.yzww, c6
					    mul_pp r0.xyz, r0, r1.yzww
					    mul r1.yzw, r0.w, r2.xxyz
					    mad_pp r0.xyz, r0, r1.x, r1.yzww
					    mad_sat r0.w, v7.x, c4.z, c4.w
					    mul_pp oC0.xyz, r0, r0.w
					    mov_pp oC0.w, c12.z
					
					// approximately 118 instruction slots used (16 texture, 102 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _LightColor0;
						vec4 _SpecColor;
						mat4x4 unity_WorldToLight;
						float _Shininess;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_8[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
						vec4 unity_OcclusionMaskSelector;
						vec4 unused_2_3;
					};
					layout(std140) uniform UnityFog {
						vec4 unused_3_0;
						vec4 unity_FogParams;
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler2D _LightTexture0;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD4;
					in  vec3 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec4 u_xlat11;
					vec2 u_xlat14;
					float u_xlat15;
					vec2 u_xlat25;
					float u_xlat27;
					float u_xlat36;
					float u_xlat37;
					bool u_xlatb37;
					float u_xlat38;
					float u_xlat39;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD6.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat1.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat2.xyz = u_xlat1.yyy * vs_TEXCOORD4.xyz;
					    u_xlat1.xyw = vs_TEXCOORD3.xyz * u_xlat1.xxx + u_xlat2.xyz;
					    u_xlat1.xyz = vs_TEXCOORD5.xyz * u_xlat1.zzz + u_xlat1.xyw;
					    u_xlat2 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat14.xy = vec2(_Parallax, _Shininess) * vec2(0.5, 128.0);
					    u_xlat37 = u_xlat2.x * _Parallax + (-u_xlat14.x);
					    u_xlat38 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat38 = inversesqrt(u_xlat38);
					    u_xlat1.xy = u_xlat1.xy * vec2(u_xlat38);
					    u_xlat25.x = u_xlat1.z * u_xlat38 + 0.419999987;
					    u_xlat1.xy = u_xlat1.xy / u_xlat25.xx;
					    u_xlat25.xy = vec2(u_xlat37) * u_xlat1.xy + vs_TEXCOORD0.zw;
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat38 = u_xlat3.y * _Parallax + (-u_xlat14.x);
					    u_xlat3.xz = vec2(u_xlat38) * u_xlat1.xy + vs_TEXCOORD1.xy;
					    u_xlat4 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat14.x = u_xlat4.w * _Parallax + (-u_xlat14.x);
					    u_xlat1.xy = u_xlat14.xx * u_xlat1.xy + vs_TEXCOORD2.xy;
					    u_xlat5 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat6 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat7 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat8 = texture(_Splat0, u_xlat25.xy);
					    u_xlat8 = u_xlat5 * u_xlat8;
					    u_xlat9 = texture(_Splat1, u_xlat3.xz);
					    u_xlat9 = u_xlat5 * u_xlat9;
					    u_xlat10 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat10 = u_xlat5 * u_xlat10;
					    u_xlat11 = texture(_Splat3, u_xlat1.xy);
					    u_xlat5 = u_xlat5 * u_xlat11;
					    u_xlat11 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat2.x = u_xlat2.x + u_xlat6.x;
					    u_xlat2.y = u_xlat3.y + u_xlat6.y;
					    u_xlat38 = max(u_xlat2.y, u_xlat2.x);
					    u_xlat15 = u_xlat6.z + u_xlat11.z;
					    u_xlat38 = max(u_xlat38, u_xlat15);
					    u_xlat39 = u_xlat4.w + u_xlat6.w;
					    u_xlat38 = max(u_xlat38, u_xlat39);
					    u_xlat38 = u_xlat38 + (-_Blur);
					    u_xlat2.xy = (-vec2(u_xlat38)) + u_xlat2.xy;
					    u_xlat15 = (-u_xlat38) + u_xlat15;
					    u_xlat15 = max(u_xlat15, 0.0);
					    u_xlat2.w = (-u_xlat38) + u_xlat39;
					    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));
					    u_xlat39 = u_xlat2.w * 6.0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat9;
					    u_xlat4 = u_xlat8 * u_xlat2.xxxx + u_xlat4;
					    u_xlat4 = u_xlat10 * vec4(u_xlat15) + u_xlat4;
					    u_xlat4 = u_xlat5 * vec4(u_xlat39) + u_xlat4;
					    u_xlat5.x = u_xlat2.y + u_xlat2.x;
					    u_xlat5.x = u_xlat15 + u_xlat5.x;
					    u_xlat38 = u_xlat2.w * 6.0 + u_xlat5.x;
					    u_xlat4 = u_xlat4 / vec4(u_xlat38);
					    u_xlat5 = texture(_Normal0, u_xlat25.xy);
					    u_xlat6 = texture(_Normal1, u_xlat3.xz);
					    u_xlat8 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat1 = texture(_Normal3, u_xlat1.xy);
					    u_xlat1.xz = u_xlat2.yy * u_xlat6.wy;
					    u_xlat1.xz = u_xlat5.wy * u_xlat2.xx + u_xlat1.xz;
					    u_xlat1.xz = u_xlat8.wy * vec2(u_xlat15) + u_xlat1.xz;
					    u_xlat1.xy = u_xlat1.wy * vec2(u_xlat39) + u_xlat1.xz;
					    u_xlat1.xy = u_xlat1.xy / vec2(u_xlat38);
					    u_xlat1.xy = u_xlat1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat37 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat37 = min(u_xlat37, 1.0);
					    u_xlat37 = (-u_xlat37) + 1.0;
					    u_xlat1.z = sqrt(u_xlat37);
					    u_xlat3.xy = u_xlat7.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat37 = dot(u_xlat3.xy, u_xlat3.xy);
					    u_xlat37 = min(u_xlat37, 1.0);
					    u_xlat37 = (-u_xlat37) + 1.0;
					    u_xlat3.z = sqrt(u_xlat37);
					    u_xlat1.xyz = u_xlat1.xyz * vec3(20.0, 20.0, 20.0) + u_xlat3.xyz;
					    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat2.xyw = u_xlat4.xyz * _Color.xyz;
					    u_xlat3.xy = vs_TEXCOORD6.yy * unity_WorldToLight[1].xy;
					    u_xlat3.xy = unity_WorldToLight[0].xy * vs_TEXCOORD6.xx + u_xlat3.xy;
					    u_xlat3.xy = unity_WorldToLight[2].xy * vs_TEXCOORD6.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy + unity_WorldToLight[3].xy;
					    u_xlatb37 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb37){
					        u_xlatb37 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat4.xyz = vs_TEXCOORD6.yyy * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD6.xxx + u_xlat4.xyz;
					        u_xlat4.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD6.zzz + u_xlat4.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat4.xyz = (bool(u_xlatb37)) ? u_xlat4.xyz : vs_TEXCOORD6.xyz;
					        u_xlat4.xyz = u_xlat4.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat5.yzw = u_xlat4.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat37 = u_xlat5.y * 0.25 + 0.75;
					        u_xlat27 = unity_ProbeVolumeParams.z * 0.5 + 0.75;
					        u_xlat5.x = max(u_xlat37, u_xlat27);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat5.xzw);
					    } else {
					        u_xlat5.x = float(1.0);
					        u_xlat5.y = float(1.0);
					        u_xlat5.z = float(1.0);
					        u_xlat5.w = float(1.0);
					    }
					    u_xlat37 = dot(u_xlat5, unity_OcclusionMaskSelector);
					    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
					    u_xlat3 = texture(_LightTexture0, u_xlat3.xy);
					    u_xlat37 = u_xlat37 * u_xlat3.w;
					    u_xlat3.x = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
					    u_xlat3.y = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
					    u_xlat3.z = dot(vs_TEXCOORD5.xyz, u_xlat1.xyz);
					    u_xlat1.xyz = vec3(u_xlat37) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36) + _WorldSpaceLightPos0.xyz;
					    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat36 = inversesqrt(u_xlat36);
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;
					    u_xlat0.w = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat0.xyz);
					    u_xlat0.xw = max(u_xlat0.xw, vec2(0.0, 0.0));
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * u_xlat14.y;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = u_xlat4.w * u_xlat0.x;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.xyw;
					    u_xlat1.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat36 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat36 = (-u_xlat36) + 1.0;
					    u_xlat36 = u_xlat36 * _ProjectionParams.z;
					    u_xlat36 = max(u_xlat36, 0.0);
					    u_xlat36 = u_xlat36 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat36);
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "PREPASS"
			Tags { "LIGHTMODE" = "PREPASSBASE" "QUEUE" = "Geometry-100" "RenderType" = "Opaque" "SplatCount" = "4" }
			ZClip Off
			GpuProgramID 148101
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//   _Control_ST                c12      1
					//   _Splat0_ST                 c13      1
					//   _Splat1_ST                 c14      1
					//   _Splat2_ST                 c15      1
					//   _Splat3_ST                 c16      1
					//
					
					    vs_3_0
					    def c17, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    mad r0, v0.xyzx, c17.yyyx, c17.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r3.x, c4, r1
					    dp4 r3.y, c5, r1
					    dp4 r3.z, c6, r1
					    dp4 r3.w, c7, r1
					    mad o1.xy, v2, c12, c12.zwzw
					    mad o1.zw, v2.xyxy, c13.xyxy, c13
					    mad o2.xy, v2, c14, c14.zwzw
					    mad o2.zw, v2.xyxy, c15.xyxy, c15
					    mad o3.xy, v2, c16, c16.zwzw
					    dp4 o4.w, c0, v0
					    dp4 o5.w, c1, v0
					    dp4 o6.w, c2, v0
					    mul r0.xyz, c17.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c17.yxxw, -r0
					    dp3 r1.z, c0, r0
					    dp3 r1.x, c1, r0
					    dp3 r1.y, c2, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c9.zxyw, v1.y
					    mad r1.xyz, v1.x, c8.zxyw, r1
					    mad r1.xyz, v1.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c11.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 45 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat0.xw = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xw = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xw);
					    u_xlat1.xyz = u_xlat0.www * unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat2.zxy * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat2.y;
					    vs_TEXCOORD4.x = u_xlat1.x;
					    vs_TEXCOORD5.x = u_xlat1.y;
					    vs_TEXCOORD4.z = u_xlat2.z;
					    vs_TEXCOORD5.z = u_xlat2.x;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   sampler2D _HeightSplatAll;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   float _Shininess;
					//   float3 _WorldSpaceCameraPos;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _WorldSpaceCameraPos c0       1
					//   _Shininess           c1       1
					//   _Parallax            c2       1
					//   _Blur                c3       1
					//   _Mask1               s0       1
					//   _Normalmap           s1       1
					//   _Normal0             s2       1
					//   _Normal1             s3       1
					//   _Normal2             s4       1
					//   _Normal3             s5       1
					//   _HeightSplatAll      s6       1
					//
					
					    ps_3_0
					    def c4, 0.5, 0.419999987, 0, 6
					    def c5, 2, -1, 1, 20
					    def c6, 1.5, 0, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    mov r0.x, v3.w
					    mov r0.y, v4.w
					    mov r0.z, v5.w
					    add r0.xyz, -r0, c0
					    nrm_pp r1.xyz, r0
					    mul r0.xyz, r1.y, v4
					    mad r0.xyz, v3, r1.x, r0
					    mad_pp r0.xyz, v5, r1.z, r0
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    mad r0.z, r0.z, r0.w, c4.y
					    mul r0.xy, r0.w, r0
					    rcp r0.z, r0.z
					    mul r0.xy, r0.z, r0
					    texld_pp r1, v0.zwzw, s6
					    mov r2.x, c4.x
					    mul_pp r0.z, r2.x, c2.x
					    mad_pp r0.w, r1.x, c2.x, -r0.z
					    mad r1.yz, r0.w, r0.xxyw, v0.xzww
					    texld r2, r1.yzzw, s2
					    texld_pp r3, v1, s6
					    mad_pp r0.w, r3.y, c2.x, -r0.z
					    mad r1.yz, r0.w, r0.xxyw, v1.xxyw
					    texld r4, r1.yzzw, s3
					    texld_pp r5, v0, s0
					    add r0.w, r1.x, r5.x
					    add r1.x, r3.y, r5.y
					    max r2.x, r0.w, r1.x
					    texld_pp r3, v1.zwzw, s6
					    add r1.y, r5.z, r3.z
					    max r3.x, r2.x, r1.y
					    texld_pp r6, v2, s6
					    add r1.z, r5.w, r6.w
					    mad_pp r0.z, r6.w, c2.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    texld r5, r0, s5
					    max r0.x, r3.x, r1.z
					    add r0.x, r0.x, -c3.x
					    add r0.y, -r0.x, r1.x
					    max r1.x, r0.y, c4.z
					    mul r0.yz, r1.x, r4.xwyw
					    add r0.w, -r0.x, r0.w
					    max r1.w, r0.w, c4.z
					    mad r0.yz, r2.xwyw, r1.w, r0
					    add r0.w, r1.x, r1.w
					    texld r2, v1.zwzw, s4
					    add r1.x, -r0.x, r1.y
					    add r0.x, -r0.x, r1.z
					    max r2.x, r1.x, c4.z
					    mad r0.yz, r2.xwyw, r2.x, r0
					    add r0.w, r0.w, r2.x
					    mul r1.x, r0.x, c4.w
					    cmp r0.x, r0.x, r1.x, c4.z
					    mad r0.yz, r5.xwyw, r0.x, r0
					    add r0.x, r0.x, r0.w
					    rcp r0.x, r0.x
					    mul_pp r0.xy, r0.x, r0.yzzw
					    mad_pp r0.xy, r0, c5.x, c5.y
					    dp2add_sat_pp r0.w, r0, r0, c4.z
					    add_pp r0.w, -r0.w, c5.z
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.z, r0.w
					    texld_pp r1, v0, s1
					    mad_pp r1.xy, r1.wyzw, c5.x, c5.y
					    dp2add_sat_pp r0.w, r1, r1, c4.z
					    add_pp r0.w, -r0.w, c5.z
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    mad_pp r0.xyz, r0, c5.w, r1
					    nrm_pp r1.xyz, r0
					    mul_pp r0.xyz, r1, c6.x
					    dp3_pp r1.x, v3, r0
					    dp3_pp r1.y, v4, r0
					    dp3_pp r1.z, v5, r0
					    mad_pp oC0.xyz, r1, c4.x, c4.x
					    mov_pp oC0.w, c1.x
					
					// approximately 82 instruction slots used (10 texture, 72 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float _Shininess;
						float _Parallax;
						vec4 unused_0_3;
						float _Blur;
						vec4 unused_0_5[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					float u_xlat6;
					vec2 u_xlat7;
					float u_xlat12;
					float u_xlat13;
					float u_xlat18;
					float u_xlat19;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD3.w;
					    u_xlat0.y = vs_TEXCOORD4.w;
					    u_xlat0.z = vs_TEXCOORD5.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD4.xyz;
					    u_xlat0.xyw = vs_TEXCOORD3.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = vs_TEXCOORD5.xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xy = vec2(u_xlat18) * u_xlat0.xy;
					    u_xlat12 = u_xlat0.z * u_xlat18 + 0.419999987;
					    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat12);
					    u_xlat1 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat12 = _Parallax * 0.5;
					    u_xlat18 = u_xlat1.x * _Parallax + (-u_xlat12);
					    u_xlat7.xy = vec2(u_xlat18) * u_xlat0.xy + vs_TEXCOORD0.zw;
					    u_xlat2 = texture(_Normal0, u_xlat7.xy);
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat18 = u_xlat3.y * _Parallax + (-u_xlat12);
					    u_xlat7.xy = vec2(u_xlat18) * u_xlat0.xy + vs_TEXCOORD1.xy;
					    u_xlat4 = texture(_Normal1, u_xlat7.xy);
					    u_xlat5 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat1.x + u_xlat5.x;
					    u_xlat1.x = u_xlat3.y + u_xlat5.y;
					    u_xlat7.x = max(u_xlat18, u_xlat1.x);
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat13 = u_xlat5.z + u_xlat3.z;
					    u_xlat7.x = max(u_xlat13, u_xlat7.x);
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat19 = u_xlat5.w + u_xlat3.w;
					    u_xlat12 = u_xlat3.w * _Parallax + (-u_xlat12);
					    u_xlat0.xy = vec2(u_xlat12) * u_xlat0.xy + vs_TEXCOORD2.xy;
					    u_xlat3 = texture(_Normal3, u_xlat0.xy);
					    u_xlat0.x = max(u_xlat19, u_xlat7.x);
					    u_xlat0.x = u_xlat0.x + (-_Blur);
					    u_xlat6 = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat6 = max(u_xlat6, 0.0);
					    u_xlat1.xy = vec2(u_xlat6) * u_xlat4.wy;
					    u_xlat12 = (-u_xlat0.x) + u_xlat18;
					    u_xlat12 = max(u_xlat12, 0.0);
					    u_xlat1.xy = u_xlat2.wy * vec2(u_xlat12) + u_xlat1.xy;
					    u_xlat6 = u_xlat6 + u_xlat12;
					    u_xlat2 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat0.z = (-u_xlat0.x) + u_xlat13;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat19;
					    u_xlat0.xz = max(u_xlat0.xz, vec2(0.0, 0.0));
					    u_xlat1.xy = u_xlat2.wy * u_xlat0.zz + u_xlat1.xy;
					    u_xlat6 = u_xlat0.z + u_xlat6;
					    u_xlat6 = u_xlat0.x * 6.0 + u_xlat6;
					    u_xlat0.x = u_xlat0.x * 6.0;
					    u_xlat0.xz = u_xlat3.wy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = u_xlat0.xz / vec2(u_xlat6);
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat0.z = sqrt(u_xlat18);
					    u_xlat1 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat1.xy = u_xlat1.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat18 = min(u_xlat18, 1.0);
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat1.z = sqrt(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(20.0, 20.0, 20.0) + u_xlat1.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat1.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat1.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat1.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    SV_Target0.xyz = u_xlat1.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target0.w = _Shininess;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "PREPASS"
			Tags { "LIGHTMODE" = "PREPASSFINAL" "QUEUE" = "Geometry-100" "RenderType" = "Opaque" "SplatCount" = "4" }
			ZClip Off
			ZWrite Off
			GpuProgramID 221127
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _WorldSpaceCameraPos       c11      1
					//   _ProjectionParams          c12      1
					//   unity_SHAr                 c13      1
					//   unity_SHAg                 c14      1
					//   unity_SHAb                 c15      1
					//   unity_SHBr                 c16      1
					//   unity_SHBg                 c17      1
					//   unity_SHBb                 c18      1
					//   unity_SHC                  c19      1
					//   unity_WorldTransformParams c20      1
					//   _Control_ST                c21      1
					//   _Splat0_ST                 c22      1
					//   _Splat1_ST                 c23      1
					//   _Splat2_ST                 c24      1
					//   _Splat3_ST                 c25      1
					//
					
					    vs_3_0
					    def c26, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.xyz
					    mad o1.xy, v2, c21, c21.zwzw
					    mad o1.zw, v2.xyxy, c22.xyxy, c22
					    mad o2.xy, v2, c23, c23.zwzw
					    mad o2.zw, v2.xyxy, c24.xyxy, c24
					    mad o3.xy, v2, c25, c25.zwzw
					    mul r0.xyz, c26.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c26.yxxw, -r0
					    dp3 r1.x, c0, r0
					    dp3 r1.y, c1, r0
					    dp3 r1.z, c2, r0
					    nrm r0.xyz, r1
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    add r2.xyz, -r1, c11
					    mov o4.xyz, r1
					    dp3 o5.x, r2, r0
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, v1.x, c8, r1
					    mad r1.xyz, v1.z, c10, r1
					    nrm r3.xyz, r1
					    mul r1.xyz, r0.yzxw, r3.zxyw
					    mad r0.xyz, r3.yzxw, r0.zxyw, -r1
					    mul r0.xyz, r0, -c20.w
					    dp3 o5.y, r2, r0
					    dp3 o5.z, r2, r3
					    mad r0, v0.xyzx, c26.yyyx, c26.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c26.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c12.x
					    mov r4, r0
					    mov o6.zw, r0
					    mul r2.w, r1.x, c26.z
					    add o6.xy, r2.z, r2.xwzw
					    mul r0.x, r3.y, r3.y
					    mad r0.x, r3.x, r3.x, -r0.x
					    mul r1, r3.yzzx, r3.xyzz
					    dp4 r2.x, c16, r1
					    dp4 r2.y, c17, r1
					    dp4 r2.z, c18, r1
					    mad r0.xyz, c19, r0.x, r2
					    mov r3.w, c26.y
					    dp4 r1.x, c13, r3
					    dp4 r1.y, c14, r3
					    dp4 r1.z, c15, r3
					    add o8.xyz, r0, r1
					    mov o7, c26.x
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 60 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD4.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD4.y = dot(u_xlat0.xyz, u_xlat2.xyz);
					    vs_TEXCOORD4.z = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat3);
					    u_xlat1.y = dot(unity_SHAg, u_xlat3);
					    u_xlat1.z = dot(unity_SHAb, u_xlat3);
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _WorldSpaceCameraPos       c11      1
					//   _ProjectionParams          c12      1
					//   unity_SHAr                 c13      1
					//   unity_SHAg                 c14      1
					//   unity_SHAb                 c15      1
					//   unity_SHBr                 c16      1
					//   unity_SHBg                 c17      1
					//   unity_SHBb                 c18      1
					//   unity_SHC                  c19      1
					//   unity_WorldTransformParams c20      1
					//   _Control_ST                c21      1
					//   _Splat0_ST                 c22      1
					//   _Splat1_ST                 c23      1
					//   _Splat2_ST                 c24      1
					//   _Splat3_ST                 c25      1
					//
					
					    vs_3_0
					    def c26, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.xyz
					    mad o1.xy, v2, c21, c21.zwzw
					    mad o1.zw, v2.xyxy, c22.xyxy, c22
					    mad o2.xy, v2, c23, c23.zwzw
					    mad o2.zw, v2.xyxy, c24.xyxy, c24
					    mad o3.xy, v2, c25, c25.zwzw
					    mul r0.xyz, c26.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c26.yxxw, -r0
					    dp3 r1.x, c0, r0
					    dp3 r1.y, c1, r0
					    dp3 r1.z, c2, r0
					    nrm r0.xyz, r1
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    add r2.xyz, -r1, c11
					    mov o4.xyz, r1
					    dp3 o5.x, r2, r0
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, v1.x, c8, r1
					    mad r1.xyz, v1.z, c10, r1
					    nrm r3.xyz, r1
					    mul r1.xyz, r0.yzxw, r3.zxyw
					    mad r0.xyz, r3.yzxw, r0.zxyw, -r1
					    mul r0.xyz, r0, -c20.w
					    dp3 o5.y, r2, r0
					    dp3 o5.z, r2, r3
					    mad r0, v0.xyzx, c26.yyyx, c26.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c26.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c12.x
					    mov r4, r0
					    mov o6.zw, r0
					    mul r2.w, r1.x, c26.z
					    add o6.xy, r2.z, r2.xwzw
					    mul r0.x, r3.y, r3.y
					    mad r0.x, r3.x, r3.x, -r0.x
					    mul r1, r3.yzzx, r3.xyzz
					    dp4 r2.x, c16, r1
					    dp4 r2.y, c17, r1
					    dp4 r2.z, c18, r1
					    mad r0.xyz, c19, r0.x, r2
					    mov r3.w, c26.y
					    dp4 r1.x, c13, r3
					    dp4 r1.y, c14, r3
					    dp4 r1.z, c15, r3
					    add o8.xyz, r0, r1
					    mov o7, c26.x
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 60 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD4.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD4.y = dot(u_xlat0.xyz, u_xlat2.xyz);
					    vs_TEXCOORD4.z = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat3);
					    u_xlat1.y = dot(unity_SHAg, u_xlat3);
					    u_xlat1.z = dot(unity_SHAb, u_xlat3);
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_LINEAR" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _WorldSpaceCameraPos       c11      1
					//   _ProjectionParams          c12      1
					//   unity_SHAr                 c13      1
					//   unity_SHAg                 c14      1
					//   unity_SHAb                 c15      1
					//   unity_SHBr                 c16      1
					//   unity_SHBg                 c17      1
					//   unity_SHBb                 c18      1
					//   unity_SHC                  c19      1
					//   unity_WorldTransformParams c20      1
					//   _Control_ST                c21      1
					//   _Splat0_ST                 c22      1
					//   _Splat1_ST                 c23      1
					//   _Splat2_ST                 c24      1
					//   _Splat3_ST                 c25      1
					//
					
					    vs_3_0
					    def c26, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.xyz
					    dcl_texcoord8 o9.x
					    mad o1.xy, v2, c21, c21.zwzw
					    mad o1.zw, v2.xyxy, c22.xyxy, c22
					    mad o2.xy, v2, c23, c23.zwzw
					    mad o2.zw, v2.xyxy, c24.xyxy, c24
					    mad o3.xy, v2, c25, c25.zwzw
					    mul r0.xyz, c26.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c26.yxxw, -r0
					    dp3 r1.x, c0, r0
					    dp3 r1.y, c1, r0
					    dp3 r1.z, c2, r0
					    nrm r0.xyz, r1
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    add r2.xyz, -r1, c11
					    mov o4.xyz, r1
					    dp3 o5.x, r2, r0
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, v1.x, c8, r1
					    mad r1.xyz, v1.z, c10, r1
					    nrm r3.xyz, r1
					    mul r1.xyz, r0.yzxw, r3.zxyw
					    mad r0.xyz, r3.yzxw, r0.zxyw, -r1
					    mul r0.xyz, r0, -c20.w
					    dp3 o5.y, r2, r0
					    dp3 o5.z, r2, r3
					    mad r0, v0.xyzx, c26.yyyx, c26.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c26.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c12.x
					    mov r4, r0
					    mov o6.zw, r0
					    mov o9.x, r0.z
					    mul r2.w, r1.x, c26.z
					    add o6.xy, r2.z, r2.xwzw
					    mul r0.x, r3.y, r3.y
					    mad r0.x, r3.x, r3.x, -r0.x
					    mul r1, r3.yzzx, r3.xyzz
					    dp4 r2.x, c16, r1
					    dp4 r2.y, c17, r1
					    dp4 r2.z, c18, r1
					    mad r0.xyz, c19, r0.x, r2
					    mov r3.w, c26.y
					    dp4 r1.x, c13, r3
					    dp4 r1.y, c14, r3
					    dp4 r1.z, c15, r3
					    add o8.xyz, r0, r1
					    mov o7, c26.x
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 61 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_LINEAR" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD4.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD4.y = dot(u_xlat0.xyz, u_xlat2.xyz);
					    vs_TEXCOORD4.z = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat3);
					    u_xlat1.y = dot(unity_SHAg, u_xlat3);
					    u_xlat1.z = dot(unity_SHAb, u_xlat3);
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _ProjectionParams;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _WorldSpaceCameraPos       c11      1
					//   _ProjectionParams          c12      1
					//   unity_SHAr                 c13      1
					//   unity_SHAg                 c14      1
					//   unity_SHAb                 c15      1
					//   unity_SHBr                 c16      1
					//   unity_SHBg                 c17      1
					//   unity_SHBb                 c18      1
					//   unity_SHC                  c19      1
					//   unity_WorldTransformParams c20      1
					//   _Control_ST                c21      1
					//   _Splat0_ST                 c22      1
					//   _Splat1_ST                 c23      1
					//   _Splat2_ST                 c24      1
					//   _Splat3_ST                 c25      1
					//
					
					    vs_3_0
					    def c26, 0, 1, 0.5, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xyz
					    dcl_texcoord4 o5.xyz
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7
					    dcl_texcoord7 o8.xyz
					    dcl_texcoord8 o9.x
					    mad o1.xy, v2, c21, c21.zwzw
					    mad o1.zw, v2.xyxy, c22.xyxy, c22
					    mad o2.xy, v2, c23, c23.zwzw
					    mad o2.zw, v2.xyxy, c24.xyxy, c24
					    mad o3.xy, v2, c25, c25.zwzw
					    mul r0.xyz, c26.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c26.yxxw, -r0
					    dp3 r1.x, c0, r0
					    dp3 r1.y, c1, r0
					    dp3 r1.z, c2, r0
					    nrm r0.xyz, r1
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    add r2.xyz, -r1, c11
					    mov o4.xyz, r1
					    dp3 o5.x, r2, r0
					    mul r1.xyz, c9, v1.y
					    mad r1.xyz, v1.x, c8, r1
					    mad r1.xyz, v1.z, c10, r1
					    nrm r3.xyz, r1
					    mul r1.xyz, r0.yzxw, r3.zxyw
					    mad r0.xyz, r3.yzxw, r0.zxyw, -r1
					    mul r0.xyz, r0, -c20.w
					    dp3 o5.y, r2, r0
					    dp3 o5.z, r2, r3
					    mad r0, v0.xyzx, c26.yyyx, c26.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r0.x, c4, r1
					    dp4 r0.w, c7, r1
					    mul r2.xz, r0.xyww, c26.z
					    dp4 r0.y, c5, r1
					    dp4 r0.z, c6, r1
					    mul r1.x, r0.y, c12.x
					    mov r4, r0
					    mov o6.zw, r0
					    mov o9.x, r0.z
					    mul r2.w, r1.x, c26.z
					    add o6.xy, r2.z, r2.xwzw
					    mul r0.x, r3.y, r3.y
					    mad r0.x, r3.x, r3.x, -r0.x
					    mul r1, r3.yzzx, r3.xyzz
					    dp4 r2.x, c16, r1
					    dp4 r2.y, c17, r1
					    dp4 r2.z, c18, r1
					    mad r0.xyz, c19, r0.x, r2
					    mov r3.w, c26.y
					    dp4 r1.x, c13, r3
					    dp4 r1.y, c14, r3
					    dp4 r1.z, c15, r3
					    add o8.xyz, r0, r1
					    mov o7, c26.x
					    mad o0.xy, r4.w, c255, r4
					    mov o0.zw, r4
					
					// approximately 61 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 _ProjectionParams;
						vec4 unused_1_3[3];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_8[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out float vs_TEXCOORD8;
					out vec3 vs_TEXCOORD3;
					out vec3 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec4 vs_TEXCOORD6;
					out vec3 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat7;
					float u_xlat15;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD8 = u_xlat1.z;
					    vs_TEXCOORD5.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat2.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat2.xy);
					    u_xlat7.xyz = u_xlat2.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat2.xxx + u_xlat7.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    vs_TEXCOORD4.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat2.yzx * u_xlat3.zxy;
					    u_xlat2.xyz = u_xlat3.yzx * u_xlat2.zxy + (-u_xlat4.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD4.y = dot(u_xlat0.xyz, u_xlat2.xyz);
					    vs_TEXCOORD4.z = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat1.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    u_xlat1.w = u_xlat0.x * 0.5;
					    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat3.y * u_xlat3.y;
					    u_xlat0.x = u_xlat3.x * u_xlat3.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat3.yzzx * u_xlat3.xyzz;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    u_xlat0.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat3.w = 1.0;
					    u_xlat1.x = dot(unity_SHAr, u_xlat3);
					    u_xlat1.y = dot(unity_SHAg, u_xlat3);
					    u_xlat1.z = dot(unity_SHAb, u_xlat3);
					    vs_TEXCOORD7.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   sampler2D _LightBuffer;
					//   sampler2D _Mask1;
					//   float _Parallax;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   _SpecColor      c0       1
					//   _Parallax       c1       1
					//   _Color          c2       1
					//   _Blur           c3       1
					//   _Mask1          s0       1
					//   _Splat0         s1       1
					//   _Splat1         s2       1
					//   _Splat2         s3       1
					//   _Splat3         s4       1
					//   _ColorTex       s5       1
					//   _HeightSplatAll s6       1
					//   _LightBuffer    s7       1
					//
					
					    ps_3_0
					    def c4, 0.5, 0.419999987, 0, 6
					    def c5, 1, 0, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4_pp v3.xyz
					    dcl_texcoord5 v4
					    dcl_texcoord7 v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dp3_pp r0.x, v3, v3
					    rsq_pp r0.x, r0.x
					    mad r0.y, v3.z, r0.x, c4.y
					    mul_pp r0.xz, r0.x, v3.xyyw
					    rcp r0.y, r0.y
					    mul r0.xy, r0.y, r0.xzzw
					    texld_pp r1, v1, s6
					    mov r1.x, c4.x
					    mul_pp r0.z, r1.x, c1.x
					    mad_pp r0.w, r1.y, c1.x, -r0.z
					    mad r1.xz, r0.w, r0.xyyw, v1.xyyw
					    texld r2, r1.xzzw, s2
					    texld_pp r3, v0, s5
					    mul_pp r2, r2, r3
					    texld_pp r4, v0, s0
					    add r0.w, r1.y, r4.y
					    texld_pp r1, v0.zwzw, s6
					    add r1.y, r4.x, r1.x
					    mad_pp r1.x, r1.x, c1.x, -r0.z
					    mad r1.xz, r1.x, r0.xyyw, v0.zyww
					    texld r5, r1.xzzw, s1
					    mul_pp r5, r3, r5
					    max r4.x, r1.y, r0.w
					    texld_pp r6, v1.zwzw, s6
					    add r1.x, r4.z, r6.z
					    max r6.x, r4.x, r1.x
					    texld_pp r7, v2, s6
					    add r1.z, r4.w, r7.w
					    mad_pp r0.z, r7.w, c1.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    texld r4, r0, s4
					    mul_pp r4, r3, r4
					    max r0.x, r6.x, r1.z
					    add r0.x, r0.x, -c3.x
					    add r0.y, -r0.x, r0.w
					    max r1.w, r0.y, c4.z
					    mul r2, r1.w, r2
					    add r0.yz, -r0.x, r1.xyxw
					    max r1.y, r0.y, c4.z
					    mad r2, r5, r1.y, r2
					    add r0.y, r1.w, r1.y
					    add r0.x, -r0.x, r1.z
					    max r1.x, r0.z, c4.z
					    texld r5, v1.zwzw, s3
					    mul_pp r3, r3, r5
					    mad r2, r3, r1.x, r2
					    add r0.y, r0.y, r1.x
					    mul r0.z, r0.x, c4.w
					    cmp r0.x, r0.x, r0.z, c4.z
					    mad r1, r4, r0.x, r2
					    add r0.x, r0.x, r0.y
					    rcp r0.x, r0.x
					    mul_pp r0, r0.x, r1
					    mul_pp r0.xyz, r0, c2
					    texldp_pp r1, v4, s7
					    log_pp r1.w, r1.w
					    mul_pp r0.w, r0.w, -r1.w
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    add_pp r1.xyz, -r2, v5
					    mul_pp r2.xyz, r1, c0
					    mul_pp r2.xyz, r0.w, r2
					    mad_pp oC0.xyz, r0, r1, r2
					    mov_pp oC0.w, c5.x
					
					// approximately 65 instruction slots used (11 texture, 54 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_5[6];
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					vec2 u_xlat8;
					vec2 u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat1 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat0.x + u_xlat1.x;
					    u_xlat2 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat6.y = u_xlat1.y + u_xlat2.y;
					    u_xlat18 = max(u_xlat6.y, u_xlat6.x);
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat1.x = u_xlat1.z + u_xlat3.z;
					    u_xlat18 = max(u_xlat18, u_xlat1.x);
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat1.y = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat18, u_xlat1.y);
					    u_xlat18 = u_xlat18 + (-_Blur);
					    u_xlat6.xy = (-vec2(u_xlat18)) + u_xlat6.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat13.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat13.x = inversesqrt(u_xlat13.x);
					    u_xlat2.xz = u_xlat13.xx * vs_TEXCOORD4.xy;
					    u_xlat13.x = vs_TEXCOORD4.z * u_xlat13.x + 0.419999987;
					    u_xlat13.xy = u_xlat2.xz / u_xlat13.xx;
					    u_xlat2.x = _Parallax * 0.5;
					    u_xlat8.x = u_xlat2.y * _Parallax + (-u_xlat2.x);
					    u_xlat8.xy = u_xlat8.xx * u_xlat13.xy + vs_TEXCOORD1.xy;
					    u_xlat4 = texture(_Splat1, u_xlat8.xy);
					    u_xlat5 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat4 = u_xlat4 * u_xlat5;
					    u_xlat4 = u_xlat6.yyyy * u_xlat4;
					    u_xlat0.x = u_xlat0.x * _Parallax + (-u_xlat2.x);
					    u_xlat2.x = u_xlat3.w * _Parallax + (-u_xlat2.x);
					    u_xlat2.xy = u_xlat2.xx * u_xlat13.xy + vs_TEXCOORD2.xy;
					    u_xlat13.xy = u_xlat0.xx * u_xlat13.xy + vs_TEXCOORD0.zw;
					    u_xlat3 = texture(_Splat0, u_xlat13.xy);
					    u_xlat3 = u_xlat5 * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat6.xxxx + u_xlat4;
					    u_xlat0.x = u_xlat6.y + u_xlat6.x;
					    u_xlat2 = texture(_Splat3, u_xlat2.xy);
					    u_xlat2 = u_xlat5 * u_xlat2;
					    u_xlat6.xy = (-vec2(u_xlat18)) + u_xlat1.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = u_xlat5 * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat6.y * 6.0 + u_xlat0.x;
					    u_xlat6.x = u_xlat6.y * 6.0;
					    u_xlat1 = u_xlat2 * u_xlat6.xxxx + u_xlat1;
					    u_xlat0 = u_xlat1 / u_xlat0.xxxx;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat18 = u_xlat0.w * (-u_xlat1.w);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vs_TEXCOORD7.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   sampler2D _LightBuffer;
					//   sampler2D _Mask1;
					//   float _Parallax;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   _SpecColor      c0       1
					//   _Parallax       c1       1
					//   _Color          c2       1
					//   _Blur           c3       1
					//   _Mask1          s0       1
					//   _Splat0         s1       1
					//   _Splat1         s2       1
					//   _Splat2         s3       1
					//   _Splat3         s4       1
					//   _ColorTex       s5       1
					//   _HeightSplatAll s6       1
					//   _LightBuffer    s7       1
					//
					
					    ps_3_0
					    def c4, 0.5, 0.419999987, 0, 6
					    def c5, 1, 0, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4_pp v3.xyz
					    dcl_texcoord5 v4
					    dcl_texcoord7 v5.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dp3_pp r0.x, v3, v3
					    rsq_pp r0.x, r0.x
					    mad r0.y, v3.z, r0.x, c4.y
					    mul_pp r0.xz, r0.x, v3.xyyw
					    rcp r0.y, r0.y
					    mul r0.xy, r0.y, r0.xzzw
					    texld_pp r1, v1, s6
					    mov r1.x, c4.x
					    mul_pp r0.z, r1.x, c1.x
					    mad_pp r0.w, r1.y, c1.x, -r0.z
					    mad r1.xz, r0.w, r0.xyyw, v1.xyyw
					    texld r2, r1.xzzw, s2
					    texld_pp r3, v0, s5
					    mul_pp r2, r2, r3
					    texld_pp r4, v0, s0
					    add r0.w, r1.y, r4.y
					    texld_pp r1, v0.zwzw, s6
					    add r1.y, r4.x, r1.x
					    mad_pp r1.x, r1.x, c1.x, -r0.z
					    mad r1.xz, r1.x, r0.xyyw, v0.zyww
					    texld r5, r1.xzzw, s1
					    mul_pp r5, r3, r5
					    max r4.x, r1.y, r0.w
					    texld_pp r6, v1.zwzw, s6
					    add r1.x, r4.z, r6.z
					    max r6.x, r4.x, r1.x
					    texld_pp r7, v2, s6
					    add r1.z, r4.w, r7.w
					    mad_pp r0.z, r7.w, c1.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    texld r4, r0, s4
					    mul_pp r4, r3, r4
					    max r0.x, r6.x, r1.z
					    add r0.x, r0.x, -c3.x
					    add r0.y, -r0.x, r0.w
					    max r1.w, r0.y, c4.z
					    mul r2, r1.w, r2
					    add r0.yz, -r0.x, r1.xyxw
					    max r1.y, r0.y, c4.z
					    mad r2, r5, r1.y, r2
					    add r0.y, r1.w, r1.y
					    add r0.x, -r0.x, r1.z
					    max r1.x, r0.z, c4.z
					    texld r5, v1.zwzw, s3
					    mul_pp r3, r3, r5
					    mad r2, r3, r1.x, r2
					    add r0.y, r0.y, r1.x
					    mul r0.z, r0.x, c4.w
					    cmp r0.x, r0.x, r0.z, c4.z
					    mad r1, r4, r0.x, r2
					    add r0.x, r0.x, r0.y
					    rcp r0.x, r0.x
					    mul_pp r0, r0.x, r1
					    mul_pp r0.xyz, r0, c2
					    texldp_pp r1, v4, s7
					    mul_pp r0.w, r0.w, r1.w
					    add_pp r1.xyz, r1, v5
					    mul_pp r2.xyz, r1, c0
					    mul_pp r2.xyz, r0.w, r2
					    mad_pp oC0.xyz, r0, r1, r2
					    mov_pp oC0.w, c5.x
					
					// approximately 61 instruction slots used (11 texture, 50 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_5[6];
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					vec2 u_xlat8;
					vec2 u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat1 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat0.x + u_xlat1.x;
					    u_xlat2 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat6.y = u_xlat1.y + u_xlat2.y;
					    u_xlat18 = max(u_xlat6.y, u_xlat6.x);
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat1.x = u_xlat1.z + u_xlat3.z;
					    u_xlat18 = max(u_xlat18, u_xlat1.x);
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat1.y = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat18, u_xlat1.y);
					    u_xlat18 = u_xlat18 + (-_Blur);
					    u_xlat6.xy = (-vec2(u_xlat18)) + u_xlat6.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat13.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat13.x = inversesqrt(u_xlat13.x);
					    u_xlat2.xz = u_xlat13.xx * vs_TEXCOORD4.xy;
					    u_xlat13.x = vs_TEXCOORD4.z * u_xlat13.x + 0.419999987;
					    u_xlat13.xy = u_xlat2.xz / u_xlat13.xx;
					    u_xlat2.x = _Parallax * 0.5;
					    u_xlat8.x = u_xlat2.y * _Parallax + (-u_xlat2.x);
					    u_xlat8.xy = u_xlat8.xx * u_xlat13.xy + vs_TEXCOORD1.xy;
					    u_xlat4 = texture(_Splat1, u_xlat8.xy);
					    u_xlat5 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat4 = u_xlat4 * u_xlat5;
					    u_xlat4 = u_xlat6.yyyy * u_xlat4;
					    u_xlat0.x = u_xlat0.x * _Parallax + (-u_xlat2.x);
					    u_xlat2.x = u_xlat3.w * _Parallax + (-u_xlat2.x);
					    u_xlat2.xy = u_xlat2.xx * u_xlat13.xy + vs_TEXCOORD2.xy;
					    u_xlat13.xy = u_xlat0.xx * u_xlat13.xy + vs_TEXCOORD0.zw;
					    u_xlat3 = texture(_Splat0, u_xlat13.xy);
					    u_xlat3 = u_xlat5 * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat6.xxxx + u_xlat4;
					    u_xlat0.x = u_xlat6.y + u_xlat6.x;
					    u_xlat2 = texture(_Splat3, u_xlat2.xy);
					    u_xlat2 = u_xlat5 * u_xlat2;
					    u_xlat6.xy = (-vec2(u_xlat18)) + u_xlat1.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = u_xlat5 * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat6.y * 6.0 + u_xlat0.x;
					    u_xlat6.x = u_xlat6.y * 6.0;
					    u_xlat1 = u_xlat2 * u_xlat6.xxxx + u_xlat1;
					    u_xlat0 = u_xlat1 / u_xlat0.xxxx;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat18 = u_xlat0.w * u_xlat1.w;
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD7.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_LINEAR" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   sampler2D _LightBuffer;
					//   sampler2D _Mask1;
					//   float _Parallax;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   unity_FogColor  c0       1
					//   unity_FogParams c1       1
					//   _SpecColor      c2       1
					//   _Parallax       c3       1
					//   _Color          c4       1
					//   _Blur           c5       1
					//   _Mask1          s0       1
					//   _Splat0         s1       1
					//   _Splat1         s2       1
					//   _Splat2         s3       1
					//   _Splat3         s4       1
					//   _ColorTex       s5       1
					//   _HeightSplatAll s6       1
					//   _LightBuffer    s7       1
					//
					
					    ps_3_0
					    def c6, 0.5, 0.419999987, 0, 6
					    def c7, 1, 0, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4_pp v3.xyz
					    dcl_texcoord5 v4
					    dcl_texcoord7 v5.xyz
					    dcl_texcoord8 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dp3_pp r0.x, v3, v3
					    rsq_pp r0.x, r0.x
					    mad r0.y, v3.z, r0.x, c6.y
					    mul_pp r0.xz, r0.x, v3.xyyw
					    rcp r0.y, r0.y
					    mul r0.xy, r0.y, r0.xzzw
					    texld_pp r1, v1, s6
					    mov r1.x, c6.x
					    mul_pp r0.z, r1.x, c3.x
					    mad_pp r0.w, r1.y, c3.x, -r0.z
					    mad r1.xz, r0.w, r0.xyyw, v1.xyyw
					    texld r2, r1.xzzw, s2
					    texld_pp r3, v0, s5
					    mul_pp r2, r2, r3
					    texld_pp r4, v0, s0
					    add r0.w, r1.y, r4.y
					    texld_pp r1, v0.zwzw, s6
					    add r1.y, r4.x, r1.x
					    mad_pp r1.x, r1.x, c3.x, -r0.z
					    mad r1.xz, r1.x, r0.xyyw, v0.zyww
					    texld r5, r1.xzzw, s1
					    mul_pp r5, r3, r5
					    max r4.x, r1.y, r0.w
					    texld_pp r6, v1.zwzw, s6
					    add r1.x, r4.z, r6.z
					    max r6.x, r4.x, r1.x
					    texld_pp r7, v2, s6
					    add r1.z, r4.w, r7.w
					    mad_pp r0.z, r7.w, c3.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    texld r4, r0, s4
					    mul_pp r4, r3, r4
					    max r0.x, r6.x, r1.z
					    add r0.x, r0.x, -c5.x
					    add r0.y, -r0.x, r0.w
					    max r1.w, r0.y, c6.z
					    mul r2, r1.w, r2
					    add r0.yz, -r0.x, r1.xyxw
					    max r1.y, r0.y, c6.z
					    mad r2, r5, r1.y, r2
					    add r0.y, r1.w, r1.y
					    add r0.x, -r0.x, r1.z
					    max r1.x, r0.z, c6.z
					    texld r5, v1.zwzw, s3
					    mul_pp r3, r3, r5
					    mad r2, r3, r1.x, r2
					    add r0.y, r0.y, r1.x
					    mul r0.z, r0.x, c6.w
					    cmp r0.x, r0.x, r0.z, c6.z
					    mad r1, r4, r0.x, r2
					    add r0.x, r0.x, r0.y
					    rcp r0.x, r0.x
					    mul_pp r0, r0.x, r1
					    mul_pp r0.xyz, r0, c4
					    texldp_pp r1, v4, s7
					    log_pp r1.w, r1.w
					    mul_pp r0.w, r0.w, -r1.w
					    log_pp r2.x, r1.x
					    log_pp r2.y, r1.y
					    log_pp r2.z, r1.z
					    add_pp r1.xyz, -r2, v5
					    mul_pp r2.xyz, r1, c2
					    mul_pp r2.xyz, r0.w, r2
					    mad_pp r0.xyz, r0, r1, r2
					    add r0.xyz, r0, -c0
					    mad_sat r0.w, v6.x, c1.z, c1.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					    mov_pp oC0.w, c7.x
					
					// approximately 68 instruction slots used (11 texture, 57 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_LINEAR" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_5[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					vec2 u_xlat8;
					vec2 u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat1 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat0.x + u_xlat1.x;
					    u_xlat2 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat6.y = u_xlat1.y + u_xlat2.y;
					    u_xlat18 = max(u_xlat6.y, u_xlat6.x);
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat1.x = u_xlat1.z + u_xlat3.z;
					    u_xlat18 = max(u_xlat18, u_xlat1.x);
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat1.y = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat18, u_xlat1.y);
					    u_xlat18 = u_xlat18 + (-_Blur);
					    u_xlat6.xy = (-vec2(u_xlat18)) + u_xlat6.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat13.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat13.x = inversesqrt(u_xlat13.x);
					    u_xlat2.xz = u_xlat13.xx * vs_TEXCOORD4.xy;
					    u_xlat13.x = vs_TEXCOORD4.z * u_xlat13.x + 0.419999987;
					    u_xlat13.xy = u_xlat2.xz / u_xlat13.xx;
					    u_xlat2.x = _Parallax * 0.5;
					    u_xlat8.x = u_xlat2.y * _Parallax + (-u_xlat2.x);
					    u_xlat8.xy = u_xlat8.xx * u_xlat13.xy + vs_TEXCOORD1.xy;
					    u_xlat4 = texture(_Splat1, u_xlat8.xy);
					    u_xlat5 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat4 = u_xlat4 * u_xlat5;
					    u_xlat4 = u_xlat6.yyyy * u_xlat4;
					    u_xlat0.x = u_xlat0.x * _Parallax + (-u_xlat2.x);
					    u_xlat2.x = u_xlat3.w * _Parallax + (-u_xlat2.x);
					    u_xlat2.xy = u_xlat2.xx * u_xlat13.xy + vs_TEXCOORD2.xy;
					    u_xlat13.xy = u_xlat0.xx * u_xlat13.xy + vs_TEXCOORD0.zw;
					    u_xlat3 = texture(_Splat0, u_xlat13.xy);
					    u_xlat3 = u_xlat5 * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat6.xxxx + u_xlat4;
					    u_xlat0.x = u_xlat6.y + u_xlat6.x;
					    u_xlat2 = texture(_Splat3, u_xlat2.xy);
					    u_xlat2 = u_xlat5 * u_xlat2;
					    u_xlat6.xy = (-vec2(u_xlat18)) + u_xlat1.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = u_xlat5 * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat6.y * 6.0 + u_xlat0.x;
					    u_xlat6.x = u_xlat6.y * 6.0;
					    u_xlat1 = u_xlat2 * u_xlat6.xxxx + u_xlat1;
					    u_xlat0 = u_xlat1 / u_xlat0.xxxx;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat1 = log2(u_xlat1);
					    u_xlat18 = u_xlat0.w * (-u_xlat1.w);
					    u_xlat1.xyz = (-u_xlat1.xyz) + vs_TEXCOORD7.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   sampler2D _LightBuffer;
					//   sampler2D _Mask1;
					//   float _Parallax;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 unity_FogColor;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   unity_FogColor  c0       1
					//   unity_FogParams c1       1
					//   _SpecColor      c2       1
					//   _Parallax       c3       1
					//   _Color          c4       1
					//   _Blur           c5       1
					//   _Mask1          s0       1
					//   _Splat0         s1       1
					//   _Splat1         s2       1
					//   _Splat2         s3       1
					//   _Splat3         s4       1
					//   _ColorTex       s5       1
					//   _HeightSplatAll s6       1
					//   _LightBuffer    s7       1
					//
					
					    ps_3_0
					    def c6, 0.5, 0.419999987, 0, 6
					    def c7, 1, 0, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord4_pp v3.xyz
					    dcl_texcoord5 v4
					    dcl_texcoord7 v5.xyz
					    dcl_texcoord8 v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dp3_pp r0.x, v3, v3
					    rsq_pp r0.x, r0.x
					    mad r0.y, v3.z, r0.x, c6.y
					    mul_pp r0.xz, r0.x, v3.xyyw
					    rcp r0.y, r0.y
					    mul r0.xy, r0.y, r0.xzzw
					    texld_pp r1, v1, s6
					    mov r1.x, c6.x
					    mul_pp r0.z, r1.x, c3.x
					    mad_pp r0.w, r1.y, c3.x, -r0.z
					    mad r1.xz, r0.w, r0.xyyw, v1.xyyw
					    texld r2, r1.xzzw, s2
					    texld_pp r3, v0, s5
					    mul_pp r2, r2, r3
					    texld_pp r4, v0, s0
					    add r0.w, r1.y, r4.y
					    texld_pp r1, v0.zwzw, s6
					    add r1.y, r4.x, r1.x
					    mad_pp r1.x, r1.x, c3.x, -r0.z
					    mad r1.xz, r1.x, r0.xyyw, v0.zyww
					    texld r5, r1.xzzw, s1
					    mul_pp r5, r3, r5
					    max r4.x, r1.y, r0.w
					    texld_pp r6, v1.zwzw, s6
					    add r1.x, r4.z, r6.z
					    max r6.x, r4.x, r1.x
					    texld_pp r7, v2, s6
					    add r1.z, r4.w, r7.w
					    mad_pp r0.z, r7.w, c3.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    texld r4, r0, s4
					    mul_pp r4, r3, r4
					    max r0.x, r6.x, r1.z
					    add r0.x, r0.x, -c5.x
					    add r0.y, -r0.x, r0.w
					    max r1.w, r0.y, c6.z
					    mul r2, r1.w, r2
					    add r0.yz, -r0.x, r1.xyxw
					    max r1.y, r0.y, c6.z
					    mad r2, r5, r1.y, r2
					    add r0.y, r1.w, r1.y
					    add r0.x, -r0.x, r1.z
					    max r1.x, r0.z, c6.z
					    texld r5, v1.zwzw, s3
					    mul_pp r3, r3, r5
					    mad r2, r3, r1.x, r2
					    add r0.y, r0.y, r1.x
					    mul r0.z, r0.x, c6.w
					    cmp r0.x, r0.x, r0.z, c6.z
					    mad r1, r4, r0.x, r2
					    add r0.x, r0.x, r0.y
					    rcp r0.x, r0.x
					    mul_pp r0, r0.x, r1
					    mul_pp r0.xyz, r0, c4
					    texldp_pp r1, v4, s7
					    mul_pp r0.w, r0.w, r1.w
					    add_pp r1.xyz, r1, v5
					    mul_pp r2.xyz, r1, c2
					    mul_pp r2.xyz, r0.w, r2
					    mad_pp r0.xyz, r0, r1, r2
					    add r0.xyz, r0, -c0
					    mad_sat r0.w, v6.x, c1.z, c1.w
					    mad_pp oC0.xyz, r0.w, r0, c0
					    mov_pp oC0.w, c7.x
					
					// approximately 64 instruction slots used (11 texture, 53 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "FOG_LINEAR" "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_5[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unity_FogParams;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _LightBuffer;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  float vs_TEXCOORD8;
					in  vec3 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD7;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec2 u_xlat6;
					vec2 u_xlat8;
					vec2 u_xlat13;
					float u_xlat18;
					void main()
					{
					    u_xlat0 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat1 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat6.x = u_xlat0.x + u_xlat1.x;
					    u_xlat2 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat6.y = u_xlat1.y + u_xlat2.y;
					    u_xlat18 = max(u_xlat6.y, u_xlat6.x);
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat1.x = u_xlat1.z + u_xlat3.z;
					    u_xlat18 = max(u_xlat18, u_xlat1.x);
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat1.y = u_xlat1.w + u_xlat3.w;
					    u_xlat18 = max(u_xlat18, u_xlat1.y);
					    u_xlat18 = u_xlat18 + (-_Blur);
					    u_xlat6.xy = (-vec2(u_xlat18)) + u_xlat6.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat13.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);
					    u_xlat13.x = inversesqrt(u_xlat13.x);
					    u_xlat2.xz = u_xlat13.xx * vs_TEXCOORD4.xy;
					    u_xlat13.x = vs_TEXCOORD4.z * u_xlat13.x + 0.419999987;
					    u_xlat13.xy = u_xlat2.xz / u_xlat13.xx;
					    u_xlat2.x = _Parallax * 0.5;
					    u_xlat8.x = u_xlat2.y * _Parallax + (-u_xlat2.x);
					    u_xlat8.xy = u_xlat8.xx * u_xlat13.xy + vs_TEXCOORD1.xy;
					    u_xlat4 = texture(_Splat1, u_xlat8.xy);
					    u_xlat5 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat4 = u_xlat4 * u_xlat5;
					    u_xlat4 = u_xlat6.yyyy * u_xlat4;
					    u_xlat0.x = u_xlat0.x * _Parallax + (-u_xlat2.x);
					    u_xlat2.x = u_xlat3.w * _Parallax + (-u_xlat2.x);
					    u_xlat2.xy = u_xlat2.xx * u_xlat13.xy + vs_TEXCOORD2.xy;
					    u_xlat13.xy = u_xlat0.xx * u_xlat13.xy + vs_TEXCOORD0.zw;
					    u_xlat3 = texture(_Splat0, u_xlat13.xy);
					    u_xlat3 = u_xlat5 * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat6.xxxx + u_xlat4;
					    u_xlat0.x = u_xlat6.y + u_xlat6.x;
					    u_xlat2 = texture(_Splat3, u_xlat2.xy);
					    u_xlat2 = u_xlat5 * u_xlat2;
					    u_xlat6.xy = (-vec2(u_xlat18)) + u_xlat1.xy;
					    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
					    u_xlat1 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat1 = u_xlat5 * u_xlat1;
					    u_xlat1 = u_xlat1 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0.x = u_xlat6.x + u_xlat0.x;
					    u_xlat0.x = u_xlat6.y * 6.0 + u_xlat0.x;
					    u_xlat6.x = u_xlat6.y * 6.0;
					    u_xlat1 = u_xlat2 * u_xlat6.xxxx + u_xlat1;
					    u_xlat0 = u_xlat1 / u_xlat0.xxxx;
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat1.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat1 = texture(_LightBuffer, u_xlat1.xy);
					    u_xlat18 = u_xlat0.w * u_xlat1.w;
					    u_xlat1.xyz = u_xlat1.xyz + vs_TEXCOORD7.xyz;
					    u_xlat2.xyz = u_xlat1.xyz * _SpecColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat18 = vs_TEXCOORD8 / _ProjectionParams.y;
					    u_xlat18 = (-u_xlat18) + 1.0;
					    u_xlat18 = u_xlat18 * _ProjectionParams.z;
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat18 = u_xlat18 * unity_FogParams.z + unity_FogParams.w;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat18) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "DEFERRED"
			Tags { "LIGHTMODE" = "DEFERRED" "QUEUE" = "Geometry-100" "RenderType" = "Opaque" "SplatCount" = "4" }
			ZClip Off
			GpuProgramID 304898
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _WorldSpaceCameraPos       c11      1
					//   unity_SHBr                 c12      1
					//   unity_SHBg                 c13      1
					//   unity_SHBb                 c14      1
					//   unity_SHC                  c15      1
					//   unity_WorldTransformParams c16      1
					//   _Control_ST                c17      1
					//   _Splat0_ST                 c18      1
					//   _Splat1_ST                 c19      1
					//   _Splat2_ST                 c20      1
					//   _Splat3_ST                 c21      1
					//
					
					    vs_3_0
					    def c22, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8
					    dcl_texcoord8 o9.xyz
					    mad r0, v0.xyzx, c22.yyyx, c22.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r5.x, c4, r1
					    dp4 r5.y, c5, r1
					    dp4 r5.z, c6, r1
					    dp4 r5.w, c7, r1
					    mad o1.xy, v2, c17, c17.zwzw
					    mad o1.zw, v2.xyxy, c18.xyxy, c18
					    mad o2.xy, v2, c19, c19.zwzw
					    mad o2.zw, v2.xyxy, c20.xyxy, c20
					    mad o3.xy, v2, c21, c21.zwzw
					    mul r0.xyz, c22.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c22.yxxw, -r0
					    dp3 r1.x, c0, r0
					    dp3 r1.y, c1, r0
					    dp3 r1.z, c2, r0
					    nrm r0.xyz, r1
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    add r2.xyz, -r1, c11
					    mov o4.w, r1.x
					    mov o5.w, r1.y
					    mov o6.w, r1.z
					    dp3 o7.x, r2, r0
					    mul r1, c9.xyzz, v1.y
					    mad r1, v1.x, c8.xyzz, r1
					    mad r1, v1.z, c10.xyzz, r1
					    dp3 r0.w, r1.xyww, r1.xyww
					    rsq r0.w, r0.w
					    mul r1, r0.w, r1
					    mul r3.xyz, r0.yzxw, r1.wxyw
					    mad r3.xyz, r1.ywxw, r0.zxyw, -r3
					    mul r3.xyz, r3, -c16.w
					    dp3 o7.y, r2, r3
					    dp3 o7.z, r2, r1
					    mul r0.w, r1.y, r1.y
					    mad r0.w, r1.x, r1.x, -r0.w
					    mul r2, r1.ywzx, r1
					    dp4 r4.x, c12, r2
					    dp4 r4.y, c13, r2
					    dp4 r4.z, c14, r2
					    mad o9.xyz, c15, r0.w, r4
					    mov o4.x, r0.x
					    mov o4.y, r3.x
					    mov o4.z, r1.x
					    mov o5.x, r0.y
					    mov o6.x, r0.z
					    mov o5.y, r3.y
					    mov o6.y, r3.z
					    mov o5.z, r1.y
					    mov o6.z, r1.w
					    mov o8, c22.x
					    mad o0.xy, r5.w, c255, r5
					    mov o0.zw, r5
					
					// approximately 60 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2 = vec4(u_xlat12) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD4.z = u_xlat2.y;
					    vs_TEXCOORD5.x = u_xlat1.z;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD6.y = dot(u_xlat0.xyz, u_xlat3.xyz);
					    vs_TEXCOORD5.z = u_xlat2.w;
					    vs_TEXCOORD6.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    vs_TEXCOORD6.z = dot(u_xlat0.xyz, u_xlat2.xyz);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD8.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_HDR_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//   float4 unity_SHBb;
					//   float4 unity_SHBg;
					//   float4 unity_SHBr;
					//   float4 unity_SHC;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   _WorldSpaceCameraPos       c11      1
					//   unity_SHBr                 c12      1
					//   unity_SHBg                 c13      1
					//   unity_SHBb                 c14      1
					//   unity_SHC                  c15      1
					//   unity_WorldTransformParams c16      1
					//   _Control_ST                c17      1
					//   _Splat0_ST                 c18      1
					//   _Splat1_ST                 c19      1
					//   _Splat2_ST                 c20      1
					//   _Splat3_ST                 c21      1
					//
					
					    vs_3_0
					    def c22, 0, 1, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    dcl_texcoord6 o7.xyz
					    dcl_texcoord7 o8
					    dcl_texcoord8 o9.xyz
					    mad r0, v0.xyzx, c22.yyyx, c22.xxxy
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r5.x, c4, r1
					    dp4 r5.y, c5, r1
					    dp4 r5.z, c6, r1
					    dp4 r5.w, c7, r1
					    mad o1.xy, v2, c17, c17.zwzw
					    mad o1.zw, v2.xyxy, c18.xyxy, c18
					    mad o2.xy, v2, c19, c19.zwzw
					    mad o2.zw, v2.xyxy, c20.xyxy, c20
					    mad o3.xy, v2, c21, c21.zwzw
					    mul r0.xyz, c22.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c22.yxxw, -r0
					    dp3 r1.x, c0, r0
					    dp3 r1.y, c1, r0
					    dp3 r1.z, c2, r0
					    nrm r0.xyz, r1
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    add r2.xyz, -r1, c11
					    mov o4.w, r1.x
					    mov o5.w, r1.y
					    mov o6.w, r1.z
					    dp3 o7.x, r2, r0
					    mul r1, c9.xyzz, v1.y
					    mad r1, v1.x, c8.xyzz, r1
					    mad r1, v1.z, c10.xyzz, r1
					    dp3 r0.w, r1.xyww, r1.xyww
					    rsq r0.w, r0.w
					    mul r1, r0.w, r1
					    mul r3.xyz, r0.yzxw, r1.wxyw
					    mad r3.xyz, r1.ywxw, r0.zxyw, -r3
					    mul r3.xyz, r3, -c16.w
					    dp3 o7.y, r2, r3
					    dp3 o7.z, r2, r1
					    mul r0.w, r1.y, r1.y
					    mad r0.w, r1.x, r1.x, -r0.w
					    mul r2, r1.ywzx, r1
					    dp4 r4.x, c12, r2
					    dp4 r4.y, c13, r2
					    dp4 r4.z, c14, r2
					    mad o9.xyz, c15, r0.w, r4
					    mov o4.x, r0.x
					    mov o4.y, r3.x
					    mov o4.z, r1.x
					    mov o5.x, r0.y
					    mov o6.x, r0.z
					    mov o5.y, r3.y
					    mov o6.y, r3.z
					    mov o5.z, r1.y
					    mov o6.z, r1.w
					    mov o8, c22.x
					    mad o0.xy, r5.w, c255, r5
					    mov o0.zw, r5
					
					// approximately 60 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
						vec4 unused_0_6;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_2_0[41];
						vec4 unity_SHBr;
						vec4 unity_SHBg;
						vec4 unity_SHBb;
						vec4 unity_SHC;
						vec4 unused_2_5[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_3_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_4_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_4_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					out vec3 vs_TEXCOORD6;
					out vec4 vs_TEXCOORD7;
					out vec3 vs_TEXCOORD8;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat0.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * unity_MatrixVP[1];
					    u_xlat2 = unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    vs_TEXCOORD3.w = u_xlat0.x;
					    u_xlat1.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat1.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat1.xy);
					    u_xlat5.xyz = u_xlat1.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat5.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    vs_TEXCOORD3.x = u_xlat1.x;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2 = vec4(u_xlat12) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.yzx * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.zxy + (-u_xlat3.xyz);
					    u_xlat3.xyz = u_xlat3.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat3.x;
					    vs_TEXCOORD3.z = u_xlat2.x;
					    vs_TEXCOORD4.x = u_xlat1.y;
					    vs_TEXCOORD4.w = u_xlat0.y;
					    vs_TEXCOORD4.y = u_xlat3.y;
					    vs_TEXCOORD4.z = u_xlat2.y;
					    vs_TEXCOORD5.x = u_xlat1.z;
					    vs_TEXCOORD5.w = u_xlat0.z;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    vs_TEXCOORD5.y = u_xlat3.z;
					    vs_TEXCOORD6.y = dot(u_xlat0.xyz, u_xlat3.xyz);
					    vs_TEXCOORD5.z = u_xlat2.w;
					    vs_TEXCOORD6.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    vs_TEXCOORD6.z = dot(u_xlat0.xyz, u_xlat2.xyz);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    u_xlat0.x = u_xlat2.y * u_xlat2.y;
					    u_xlat0.x = u_xlat2.x * u_xlat2.x + (-u_xlat0.x);
					    u_xlat1 = u_xlat2.ywzx * u_xlat2;
					    u_xlat2.x = dot(unity_SHBr, u_xlat1);
					    u_xlat2.y = dot(unity_SHBg, u_xlat1);
					    u_xlat2.z = dot(unity_SHBb, u_xlat1);
					    vs_TEXCOORD8.xyz = unity_SHC.xyz * u_xlat0.xxx + u_xlat2.xyz;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   float _Shininess;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   unity_SHAr      c0       1
					//   unity_SHAg      c1       1
					//   unity_SHAb      c2       1
					//   _SpecColor      c3       1
					//   _Shininess      c4       1
					//   _Parallax       c5       1
					//   _Color          c6       1
					//   _Blur           c7       1
					//   _Mask1          s0       1
					//   _Normalmap      s1       1
					//   _Splat0         s2       1
					//   _Splat1         s3       1
					//   _Splat2         s4       1
					//   _Splat3         s5       1
					//   _Normal0        s6       1
					//   _Normal1        s7       1
					//   _Normal2        s8       1
					//   _Normal3        s9       1
					//   _ColorTex       s10      1
					//   _HeightSplatAll s11      1
					//
					
					    ps_3_0
					    def c8, 0.5, 0.419999987, 0, 6
					    def c9, 2, -1, 1, 20
					    def c10, 1.5, 0.318309873, 0, 0
					    def c11, 0.5, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6_pp v6.xyz
					    dcl_texcoord8_pp v7.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    dp3_pp r0.x, v6, v6
					    rsq_pp r0.x, r0.x
					    mad r0.y, v6.z, r0.x, c8.y
					    mul_pp r0.xz, r0.x, v6.xyyw
					    rcp r0.y, r0.y
					    mul r0.xy, r0.y, r0.xzzw
					    texld_pp r1, v1, s11
					    mov r1.x, c8.x
					    mul_pp r0.z, r1.x, c5.x
					    mad_pp r0.w, r1.y, c5.x, -r0.z
					    mad r1.xz, r0.w, r0.xyyw, v1.xyyw
					    texld r2, r1.xzzw, s3
					    texld r3, r1.xzzw, s7
					    texld_pp r4, v0, s10
					    mul_pp r2, r2, r4
					    texld_pp r5, v0, s0
					    add r0.w, r1.y, r5.y
					    texld_pp r1, v0.zwzw, s11
					    add r1.y, r5.x, r1.x
					    mad_pp r1.x, r1.x, c5.x, -r0.z
					    mad r1.xz, r1.x, r0.xyyw, v0.zyww
					    max r3.x, r1.y, r0.w
					    texld_pp r6, v1.zwzw, s11
					    add r1.w, r5.z, r6.z
					    max r5.x, r3.x, r1.w
					    texld_pp r6, v2, s11
					    add r3.x, r5.w, r6.w
					    mad_pp r0.z, r6.w, c5.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    max r0.z, r5.x, r3.x
					    add r0.z, r0.z, -c7.x
					    add r0.w, -r0.z, r0.w
					    max r3.z, r0.w, c8.z
					    mul r2, r2, r3.z
					    texld r5, r1.xzzw, s2
					    texld r6, r1.xzzw, s6
					    mul_pp r5, r4, r5
					    add r0.w, -r0.z, r1.y
					    max r1.x, r0.w, c8.z
					    mad r2, r5, r1.x, r2
					    add r0.w, -r0.z, r1.w
					    add r0.z, -r0.z, r3.x
					    max r1.y, r0.w, c8.z
					    texld r5, v1.zwzw, s4
					    mul_pp r5, r4, r5
					    mad r2, r5, r1.y, r2
					    mul r0.w, r0.z, c8.w
					    cmp r0.z, r0.z, r0.w, c8.z
					    texld r5, r0, s5
					    texld r7, r0, s9
					    mul_pp r4, r4, r5
					    mad r2, r4, r0.z, r2
					    add r0.x, r3.z, r1.x
					    mul r0.yw, r3.z, r3.xwzy
					    mad r0.yw, r6.xwzy, r1.x, r0
					    add r0.x, r1.y, r0.x
					    add r0.x, r0.z, r0.x
					    rcp r0.x, r0.x
					    mul_pp r2, r0.x, r2
					    mul r1.xzw, r2.w, c3.xyyz
					    mul_pp r2.xyz, r2, c6
					    mul_pp oC1.xyz, r1.xzww, c10.y
					    texld r3, v1.zwzw, s8
					    mad r0.yw, r3.xwzy, r1.y, r0
					    mad r0.yz, r7.xwyw, r0.z, r0.xyww
					    mul_pp r0.xy, r0.x, r0.yzzw
					    mad_pp r0.xy, r0, c9.x, c9.y
					    dp2add_sat_pp r0.w, r0, r0, c8.z
					    add_pp r0.w, -r0.w, c9.z
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.z, r0.w
					    texld_pp r1, v0, s1
					    mad_pp r1.xy, r1.wyzw, c9.x, c9.y
					    dp2add_sat_pp r0.w, r1, r1, c8.z
					    add_pp r0.w, -r0.w, c9.z
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    mad_pp r0.xyz, r0, c9.w, r1
					    nrm_pp r1.xyz, r0
					    mul_pp r0.xyz, r1, c10.x
					    dp3_pp r1.x, v3, r0
					    dp3_pp r1.y, v4, r0
					    dp3_pp r1.z, v5, r0
					    mov_pp r1.w, c9.z
					    dp4_pp r0.x, c0, r1
					    dp4_pp r0.y, c1, r1
					    dp4_pp r0.z, c2, r1
					    mad_pp oC2, r1, c11.xxxy, c11.xxxz
					    add_pp r0.xyz, r0, v7
					    max_pp r1.xyz, r0, c8.z
					    mul_pp r0.xyz, r1, r2
					    mov_pp oC0.xyz, r2
					    exp_pp oC3.x, -r0.x
					    exp_pp oC3.y, -r0.y
					    exp_pp oC3.z, -r0.z
					    mov_pp oC0.w, c9.z
					    mov_pp oC1.w, c4.x
					    mov_pp oC3.w, c9.z
					
					// approximately 102 instruction slots used (15 texture, 87 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						float _Shininess;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_6[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat12;
					float u_xlat13;
					vec3 u_xlat15;
					vec2 u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat11.xy = u_xlat0.xx * vs_TEXCOORD6.xy;
					    u_xlat1 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat33 = _Parallax * 0.5;
					    u_xlat12.x = u_xlat1.x * _Parallax + (-u_xlat33);
					    u_xlat0.x = vs_TEXCOORD6.z * u_xlat0.x + 0.419999987;
					    u_xlat0.xy = u_xlat11.xy / u_xlat0.xx;
					    u_xlat12.xy = u_xlat12.xx * u_xlat0.xy + vs_TEXCOORD0.zw;
					    u_xlat2 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat22.x = u_xlat2.y * _Parallax + (-u_xlat33);
					    u_xlat2.xz = u_xlat22.xx * u_xlat0.xy + vs_TEXCOORD1.xy;
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat22.x = u_xlat3.w * _Parallax + (-u_xlat33);
					    u_xlat0.xy = u_xlat22.xx * u_xlat0.xy + vs_TEXCOORD2.xy;
					    u_xlat4 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat5 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat6 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat7 = texture(_Splat0, u_xlat12.xy);
					    u_xlat7 = u_xlat4 * u_xlat7;
					    u_xlat8 = texture(_Splat1, u_xlat2.xz);
					    u_xlat8 = u_xlat4 * u_xlat8;
					    u_xlat9 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat9 = u_xlat4 * u_xlat9;
					    u_xlat10 = texture(_Splat3, u_xlat0.xy);
					    u_xlat4 = u_xlat4 * u_xlat10;
					    u_xlat10 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat22.x = u_xlat1.x + u_xlat5.x;
					    u_xlat22.y = u_xlat2.y + u_xlat5.y;
					    u_xlat1.x = max(u_xlat22.y, u_xlat22.x);
					    u_xlat34 = u_xlat5.z + u_xlat10.z;
					    u_xlat1.x = max(u_xlat34, u_xlat1.x);
					    u_xlat13 = u_xlat3.w + u_xlat5.w;
					    u_xlat1.x = max(u_xlat1.x, u_xlat13);
					    u_xlat1.x = u_xlat1.x + (-_Blur);
					    u_xlat22.xy = u_xlat22.xy + (-u_xlat1.xx);
					    u_xlat22.xy = max(u_xlat22.xy, vec2(0.0, 0.0));
					    u_xlat1.w = (-u_xlat1.x) + u_xlat34;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat13;
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat13 = u_xlat1.x * 6.0;
					    u_xlat3 = u_xlat22.yyyy * u_xlat8;
					    u_xlat3 = u_xlat7 * u_xlat22.xxxx + u_xlat3;
					    u_xlat3 = u_xlat9 * u_xlat1.wwww + u_xlat3;
					    u_xlat3 = u_xlat4 * vec4(u_xlat13) + u_xlat3;
					    u_xlat35 = u_xlat22.y + u_xlat22.x;
					    u_xlat35 = u_xlat1.w + u_xlat35;
					    u_xlat1.x = u_xlat1.x * 6.0 + u_xlat35;
					    u_xlat3 = u_xlat3 / u_xlat1.xxxx;
					    u_xlat4 = texture(_Normal0, u_xlat12.xy);
					    u_xlat5 = texture(_Normal1, u_xlat2.xz);
					    u_xlat7 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat8 = texture(_Normal3, u_xlat0.xy);
					    u_xlat0.xy = u_xlat22.yy * u_xlat5.wy;
					    u_xlat0.xy = u_xlat4.wy * u_xlat22.xx + u_xlat0.xy;
					    u_xlat0.xy = u_xlat7.wy * u_xlat1.ww + u_xlat0.xy;
					    u_xlat0.xy = u_xlat8.wy * vec2(u_xlat13) + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat1.xx;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat33 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat33 = min(u_xlat33, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat0.z = sqrt(u_xlat33);
					    u_xlat1.xy = u_xlat6.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat33 = min(u_xlat33, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat1.z = sqrt(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(20.0, 20.0, 20.0) + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat1.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb0){
					        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat11.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat11.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat11.xyz;
					        u_xlat11.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat11.xyz;
					        u_xlat11.xyz = u_xlat11.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat15.x = vs_TEXCOORD3.w;
					        u_xlat15.y = vs_TEXCOORD4.w;
					        u_xlat15.z = vs_TEXCOORD5.w;
					        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat11.xyz : u_xlat15.xyz;
					        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat11.x = u_xlat0.y * 0.25;
					        u_xlat34 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat3.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat11.x = max(u_xlat11.x, u_xlat34);
					        u_xlat0.x = min(u_xlat3.x, u_xlat11.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
					        u_xlat3.xyz = u_xlat0.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat3.xyz);
					        u_xlat0.xyz = u_xlat0.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(u_xlat4, u_xlat2);
					        u_xlat3.y = dot(u_xlat5, u_xlat2);
					        u_xlat3.z = dot(u_xlat0, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat0.xyz = u_xlat3.xyz + vs_TEXCOORD8.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = u_xlat3.www * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat3.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target3.xyz = exp2((-u_xlat0.xyz));
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Shininess;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNITY_HDR_ON" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   sampler2D _Mask1;
					//   sampler2D _Normal0;
					//   sampler2D _Normal1;
					//   sampler2D _Normal2;
					//   sampler2D _Normal3;
					//   sampler2D _Normalmap;
					//   float _Parallax;
					//   float _Shininess;
					//   float4 _SpecColor;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float4 unity_SHAb;
					//   float4 unity_SHAg;
					//   float4 unity_SHAr;
					//
					//
					// Registers:
					//
					//   Name            Reg   Size
					//   --------------- ----- ----
					//   unity_SHAr      c0       1
					//   unity_SHAg      c1       1
					//   unity_SHAb      c2       1
					//   _SpecColor      c3       1
					//   _Shininess      c4       1
					//   _Parallax       c5       1
					//   _Color          c6       1
					//   _Blur           c7       1
					//   _Mask1          s0       1
					//   _Normalmap      s1       1
					//   _Splat0         s2       1
					//   _Splat1         s3       1
					//   _Splat2         s4       1
					//   _Splat3         s5       1
					//   _Normal0        s6       1
					//   _Normal1        s7       1
					//   _Normal2        s8       1
					//   _Normal3        s9       1
					//   _ColorTex       s10      1
					//   _HeightSplatAll s11      1
					//
					
					    ps_3_0
					    def c8, 0.5, 0.419999987, 0, 6
					    def c9, 2, -1, 1, 20
					    def c10, 1.5, 0.318309873, 0, 0
					    def c11, 0.5, 1, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xyz
					    dcl_texcoord4 v4.xyz
					    dcl_texcoord5 v5.xyz
					    dcl_texcoord6_pp v6.xyz
					    dcl_texcoord8_pp v7.xyz
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    dcl_2d s7
					    dcl_2d s8
					    dcl_2d s9
					    dcl_2d s10
					    dcl_2d s11
					    dp3_pp r0.x, v6, v6
					    rsq_pp r0.x, r0.x
					    mad r0.y, v6.z, r0.x, c8.y
					    mul_pp r0.xz, r0.x, v6.xyyw
					    rcp r0.y, r0.y
					    mul r0.xy, r0.y, r0.xzzw
					    texld_pp r1, v1, s11
					    mov r1.x, c8.x
					    mul_pp r0.z, r1.x, c5.x
					    mad_pp r0.w, r1.y, c5.x, -r0.z
					    mad r1.xz, r0.w, r0.xyyw, v1.xyyw
					    texld r2, r1.xzzw, s3
					    texld r3, r1.xzzw, s7
					    texld_pp r4, v0, s10
					    mul_pp r2, r2, r4
					    texld_pp r5, v0, s0
					    add r0.w, r1.y, r5.y
					    texld_pp r1, v0.zwzw, s11
					    add r1.y, r5.x, r1.x
					    mad_pp r1.x, r1.x, c5.x, -r0.z
					    mad r1.xz, r1.x, r0.xyyw, v0.zyww
					    max r3.x, r1.y, r0.w
					    texld_pp r6, v1.zwzw, s11
					    add r1.w, r5.z, r6.z
					    max r5.x, r3.x, r1.w
					    texld_pp r6, v2, s11
					    add r3.x, r5.w, r6.w
					    mad_pp r0.z, r6.w, c5.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    max r0.z, r5.x, r3.x
					    add r0.z, r0.z, -c7.x
					    add r0.w, -r0.z, r0.w
					    max r3.z, r0.w, c8.z
					    mul r2, r2, r3.z
					    texld r5, r1.xzzw, s2
					    texld r6, r1.xzzw, s6
					    mul_pp r5, r4, r5
					    add r0.w, -r0.z, r1.y
					    max r1.x, r0.w, c8.z
					    mad r2, r5, r1.x, r2
					    add r0.w, -r0.z, r1.w
					    add r0.z, -r0.z, r3.x
					    max r1.y, r0.w, c8.z
					    texld r5, v1.zwzw, s4
					    mul_pp r5, r4, r5
					    mad r2, r5, r1.y, r2
					    mul r0.w, r0.z, c8.w
					    cmp r0.z, r0.z, r0.w, c8.z
					    texld r5, r0, s5
					    texld r7, r0, s9
					    mul_pp r4, r4, r5
					    mad r2, r4, r0.z, r2
					    add r0.x, r3.z, r1.x
					    mul r0.yw, r3.z, r3.xwzy
					    mad r0.yw, r6.xwzy, r1.x, r0
					    add r0.x, r1.y, r0.x
					    add r0.x, r0.z, r0.x
					    rcp r0.x, r0.x
					    mul_pp r2, r0.x, r2
					    mul r1.xzw, r2.w, c3.xyyz
					    mul_pp r2.xyz, r2, c6
					    mul_pp oC1.xyz, r1.xzww, c10.y
					    texld r3, v1.zwzw, s8
					    mad r0.yw, r3.xwzy, r1.y, r0
					    mad r0.yz, r7.xwyw, r0.z, r0.xyww
					    mul_pp r0.xy, r0.x, r0.yzzw
					    mad_pp r0.xy, r0, c9.x, c9.y
					    dp2add_sat_pp r0.w, r0, r0, c8.z
					    add_pp r0.w, -r0.w, c9.z
					    rsq_pp r0.w, r0.w
					    rcp_pp r0.z, r0.w
					    texld_pp r1, v0, s1
					    mad_pp r1.xy, r1.wyzw, c9.x, c9.y
					    dp2add_sat_pp r0.w, r1, r1, c8.z
					    add_pp r0.w, -r0.w, c9.z
					    rsq_pp r0.w, r0.w
					    rcp_pp r1.z, r0.w
					    mad_pp r0.xyz, r0, c9.w, r1
					    nrm_pp r1.xyz, r0
					    mul_pp r0.xyz, r1, c10.x
					    dp3_pp r1.x, v3, r0
					    dp3_pp r1.y, v4, r0
					    dp3_pp r1.z, v5, r0
					    mov_pp r1.w, c9.z
					    dp4_pp r0.x, c0, r1
					    dp4_pp r0.y, c1, r1
					    dp4_pp r0.z, c2, r1
					    mad_pp oC2, r1, c11.xxxy, c11.xxxz
					    add_pp r0.xyz, r0, v7
					    max_pp r1.xyz, r0, c8.z
					    mul_pp oC3.xyz, r1, r2
					    mov_pp oC0.xyz, r2
					    mov_pp oC0.w, c9.z
					    mov_pp oC1.w, c4.x
					    mov_pp oC3.w, c9.z
					
					// approximately 99 instruction slots used (15 texture, 84 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "UNITY_HDR_ON" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _SpecColor;
						float _Shininess;
						float _Parallax;
						vec4 _Color;
						float _Blur;
						vec4 unused_0_6[6];
					};
					layout(std140) uniform UnityLighting {
						vec4 unused_1_0[38];
						vec4 unity_SHAr;
						vec4 unity_SHAg;
						vec4 unity_SHAb;
						vec4 unused_1_4[6];
					};
					layout(std140) uniform UnityProbeVolume {
						vec4 unity_ProbeVolumeParams;
						mat4x4 unity_ProbeVolumeWorldToObject;
						vec3 unity_ProbeVolumeSizeInv;
						vec3 unity_ProbeVolumeMin;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Normalmap;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					uniform  sampler2D _Normal0;
					uniform  sampler2D _Normal1;
					uniform  sampler2D _Normal2;
					uniform  sampler2D _Normal3;
					uniform  sampler3D unity_ProbeVolumeSH;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					in  vec3 vs_TEXCOORD6;
					in  vec3 vs_TEXCOORD8;
					layout(location = 0) out vec4 SV_Target0;
					layout(location = 1) out vec4 SV_Target1;
					layout(location = 2) out vec4 SV_Target2;
					layout(location = 3) out vec4 SV_Target3;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec4 u_xlat6;
					vec4 u_xlat7;
					vec4 u_xlat8;
					vec4 u_xlat9;
					vec4 u_xlat10;
					vec3 u_xlat11;
					vec2 u_xlat12;
					float u_xlat13;
					vec3 u_xlat15;
					vec2 u_xlat22;
					float u_xlat33;
					float u_xlat34;
					float u_xlat35;
					void main()
					{
					    u_xlat0.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat11.xy = u_xlat0.xx * vs_TEXCOORD6.xy;
					    u_xlat1 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat33 = _Parallax * 0.5;
					    u_xlat12.x = u_xlat1.x * _Parallax + (-u_xlat33);
					    u_xlat0.x = vs_TEXCOORD6.z * u_xlat0.x + 0.419999987;
					    u_xlat0.xy = u_xlat11.xy / u_xlat0.xx;
					    u_xlat12.xy = u_xlat12.xx * u_xlat0.xy + vs_TEXCOORD0.zw;
					    u_xlat2 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat22.x = u_xlat2.y * _Parallax + (-u_xlat33);
					    u_xlat2.xz = u_xlat22.xx * u_xlat0.xy + vs_TEXCOORD1.xy;
					    u_xlat3 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat22.x = u_xlat3.w * _Parallax + (-u_xlat33);
					    u_xlat0.xy = u_xlat22.xx * u_xlat0.xy + vs_TEXCOORD2.xy;
					    u_xlat4 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat5 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat6 = texture(_Normalmap, vs_TEXCOORD0.xy);
					    u_xlat7 = texture(_Splat0, u_xlat12.xy);
					    u_xlat7 = u_xlat4 * u_xlat7;
					    u_xlat8 = texture(_Splat1, u_xlat2.xz);
					    u_xlat8 = u_xlat4 * u_xlat8;
					    u_xlat9 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat9 = u_xlat4 * u_xlat9;
					    u_xlat10 = texture(_Splat3, u_xlat0.xy);
					    u_xlat4 = u_xlat4 * u_xlat10;
					    u_xlat10 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat22.x = u_xlat1.x + u_xlat5.x;
					    u_xlat22.y = u_xlat2.y + u_xlat5.y;
					    u_xlat1.x = max(u_xlat22.y, u_xlat22.x);
					    u_xlat34 = u_xlat5.z + u_xlat10.z;
					    u_xlat1.x = max(u_xlat34, u_xlat1.x);
					    u_xlat13 = u_xlat3.w + u_xlat5.w;
					    u_xlat1.x = max(u_xlat1.x, u_xlat13);
					    u_xlat1.x = u_xlat1.x + (-_Blur);
					    u_xlat22.xy = u_xlat22.xy + (-u_xlat1.xx);
					    u_xlat22.xy = max(u_xlat22.xy, vec2(0.0, 0.0));
					    u_xlat1.w = (-u_xlat1.x) + u_xlat34;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat13;
					    u_xlat1.xw = max(u_xlat1.xw, vec2(0.0, 0.0));
					    u_xlat13 = u_xlat1.x * 6.0;
					    u_xlat3 = u_xlat22.yyyy * u_xlat8;
					    u_xlat3 = u_xlat7 * u_xlat22.xxxx + u_xlat3;
					    u_xlat3 = u_xlat9 * u_xlat1.wwww + u_xlat3;
					    u_xlat3 = u_xlat4 * vec4(u_xlat13) + u_xlat3;
					    u_xlat35 = u_xlat22.y + u_xlat22.x;
					    u_xlat35 = u_xlat1.w + u_xlat35;
					    u_xlat1.x = u_xlat1.x * 6.0 + u_xlat35;
					    u_xlat3 = u_xlat3 / u_xlat1.xxxx;
					    u_xlat4 = texture(_Normal0, u_xlat12.xy);
					    u_xlat5 = texture(_Normal1, u_xlat2.xz);
					    u_xlat7 = texture(_Normal2, vs_TEXCOORD1.zw);
					    u_xlat8 = texture(_Normal3, u_xlat0.xy);
					    u_xlat0.xy = u_xlat22.yy * u_xlat5.wy;
					    u_xlat0.xy = u_xlat4.wy * u_xlat22.xx + u_xlat0.xy;
					    u_xlat0.xy = u_xlat7.wy * u_xlat1.ww + u_xlat0.xy;
					    u_xlat0.xy = u_xlat8.wy * vec2(u_xlat13) + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy / u_xlat1.xx;
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat33 = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat33 = min(u_xlat33, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat0.z = sqrt(u_xlat33);
					    u_xlat1.xy = u_xlat6.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat33 = min(u_xlat33, 1.0);
					    u_xlat33 = (-u_xlat33) + 1.0;
					    u_xlat1.z = sqrt(u_xlat33);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(20.0, 20.0, 20.0) + u_xlat1.xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(1.5, 1.5, 1.5);
					    u_xlat1.xyz = u_xlat3.xyz * _Color.xyz;
					    u_xlat2.x = dot(vs_TEXCOORD3.xyz, u_xlat0.xyz);
					    u_xlat2.y = dot(vs_TEXCOORD4.xyz, u_xlat0.xyz);
					    u_xlat2.z = dot(vs_TEXCOORD5.xyz, u_xlat0.xyz);
					    u_xlatb0 = unity_ProbeVolumeParams.x==1.0;
					    if(u_xlatb0){
					        u_xlatb0 = unity_ProbeVolumeParams.y==1.0;
					        u_xlat11.xyz = vs_TEXCOORD4.www * unity_ProbeVolumeWorldToObject[1].xyz;
					        u_xlat11.xyz = unity_ProbeVolumeWorldToObject[0].xyz * vs_TEXCOORD3.www + u_xlat11.xyz;
					        u_xlat11.xyz = unity_ProbeVolumeWorldToObject[2].xyz * vs_TEXCOORD5.www + u_xlat11.xyz;
					        u_xlat11.xyz = u_xlat11.xyz + unity_ProbeVolumeWorldToObject[3].xyz;
					        u_xlat15.x = vs_TEXCOORD3.w;
					        u_xlat15.y = vs_TEXCOORD4.w;
					        u_xlat15.z = vs_TEXCOORD5.w;
					        u_xlat0.xyz = (bool(u_xlatb0)) ? u_xlat11.xyz : u_xlat15.xyz;
					        u_xlat0.xyz = u_xlat0.xyz + (-unity_ProbeVolumeMin.xyz);
					        u_xlat0.yzw = u_xlat0.xyz * unity_ProbeVolumeSizeInv.xyz;
					        u_xlat11.x = u_xlat0.y * 0.25;
					        u_xlat34 = unity_ProbeVolumeParams.z * 0.5;
					        u_xlat3.x = (-unity_ProbeVolumeParams.z) * 0.5 + 0.25;
					        u_xlat11.x = max(u_xlat11.x, u_xlat34);
					        u_xlat0.x = min(u_xlat3.x, u_xlat11.x);
					        u_xlat4 = texture(unity_ProbeVolumeSH, u_xlat0.xzw);
					        u_xlat3.xyz = u_xlat0.xzw + vec3(0.25, 0.0, 0.0);
					        u_xlat5 = texture(unity_ProbeVolumeSH, u_xlat3.xyz);
					        u_xlat0.xyz = u_xlat0.xzw + vec3(0.5, 0.0, 0.0);
					        u_xlat0 = texture(unity_ProbeVolumeSH, u_xlat0.xyz);
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(u_xlat4, u_xlat2);
					        u_xlat3.y = dot(u_xlat5, u_xlat2);
					        u_xlat3.z = dot(u_xlat0, u_xlat2);
					    } else {
					        u_xlat2.w = 1.0;
					        u_xlat3.x = dot(unity_SHAr, u_xlat2);
					        u_xlat3.y = dot(unity_SHAg, u_xlat2);
					        u_xlat3.z = dot(unity_SHAb, u_xlat2);
					    }
					    u_xlat0.xyz = u_xlat3.xyz + vs_TEXCOORD8.xyz;
					    u_xlat0.xyz = max(u_xlat0.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat3.xyz = u_xlat3.www * _SpecColor.xyz;
					    SV_Target1.xyz = u_xlat3.xyz * vec3(0.318309873, 0.318309873, 0.318309873);
					    SV_Target2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
					    SV_Target3.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat1.xyz;
					    SV_Target0.w = 1.0;
					    SV_Target1.w = _Shininess;
					    SV_Target2.w = 1.0;
					    SV_Target3.w = 1.0;
					    return;
					}"
				}
			}
		}
		Pass {
			Name "META"
			Tags { "LIGHTMODE" = "META" "QUEUE" = "Geometry-100" "RenderType" = "Opaque" "SplatCount" = "4" }
			ZClip Off
			Cull Off
			GpuProgramID 361636
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Control_ST;
					//   float4 _Splat0_ST;
					//   float4 _Splat1_ST;
					//   float4 _Splat2_ST;
					//   float4 _Splat3_ST;
					//   float4 unity_DynamicLightmapST;
					//   float4 unity_LightmapST;
					//   row_major float4x4 unity_MatrixVP;
					//   bool4 unity_MetaVertexControl;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//   float4 unity_WorldTransformParams;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   unity_ObjectToWorld        c0       4
					//   unity_MatrixVP             c4       4
					//   unity_WorldToObject        c8       3
					//   unity_WorldTransformParams c11      1
					//   unity_LightmapST           c12      1
					//   unity_DynamicLightmapST    c13      1
					//   unity_MetaVertexControl    c14      1
					//   _Control_ST                c15      1
					//   _Splat0_ST                 c16      1
					//   _Splat1_ST                 c17      1
					//   _Splat2_ST                 c18      1
					//   _Splat3_ST                 c19      1
					//
					
					    vs_3_0
					    def c20, 0, 1, 9.99999975e-005, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5
					    dcl_texcoord5 o6
					    slt r0.x, c20.x, v0.z
					    mul r0.z, r0.x, c20.z
					    mad r0.xy, v3, c12, c12.zwzw
					    lrp r1.xyz, c14.x, r0, v0
					    slt r0.x, c20.x, r1.z
					    mul r0.z, r0.x, c20.z
					    mad r0.xy, v4, c13, c13.zwzw
					    lrp r2.xyz, c14.y, r0, r1
					    mov r2.w, c20.y
					    dp4 r0.x, c0, r2
					    dp4 r0.y, c1, r2
					    dp4 r0.z, c2, r2
					    dp4 r0.w, c3, r2
					    dp4 r3.x, c4, r0
					    dp4 r3.y, c5, r0
					    dp4 r3.z, c6, r0
					    dp4 r3.w, c7, r0
					    mad o1.xy, v2, c15, c15.zwzw
					    mad o1.zw, v2.xyxy, c16.xyxy, c16
					    mad o2.xy, v2, c17, c17.zwzw
					    mad o2.zw, v2.xyxy, c18.xyxy, c18
					    mad o3.xy, v2, c19, c19.zwzw
					    dp4 o4.w, c0, v0
					    dp4 o5.w, c1, v0
					    dp4 o6.w, c2, v0
					    mul r0.xyz, c20.xyxw, v1.zxyw
					    mad r0.xyz, v1.yzxw, c20.yxxw, -r0
					    dp3 r1.z, c0, r0
					    dp3 r1.x, c1, r0
					    dp3 r1.y, c2, r0
					    dp3 r0.x, r1, r1
					    rsq r0.x, r0.x
					    mul r0.xyz, r0.x, r1
					    mov o4.x, r0.z
					    mul r1.xyz, c9.zxyw, v1.y
					    mad r1.xyz, v1.x, c8.zxyw, r1
					    mad r1.xyz, v1.z, c10.zxyw, r1
					    dp3 r0.w, r1, r1
					    rsq r0.w, r0.w
					    mul r1.xyz, r0.w, r1
					    mul r2.xyz, r0, r1
					    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
					    mul r2.xyz, r2, -c11.w
					    mov o4.y, r2.x
					    mov o4.z, r1.y
					    mov o5.x, r0.x
					    mov o6.x, r0.y
					    mov o5.y, r2.y
					    mov o6.y, r2.z
					    mov o5.z, r1.z
					    mov o6.z, r1.x
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 53 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[7];
						vec4 _Control_ST;
						vec4 _Splat0_ST;
						vec4 _Splat1_ST;
						vec4 _Splat2_ST;
						vec4 _Splat3_ST;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_1_2;
						vec4 unity_WorldTransformParams;
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					layout(std140) uniform UnityLightmaps {
						vec4 unity_LightmapST;
						vec4 unity_DynamicLightmapST;
					};
					layout(std140) uniform UnityMetaPass {
						bvec4 unity_MetaVertexControl;
						vec4 unused_4_1[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_TEXCOORD0;
					in  vec4 in_TEXCOORD1;
					in  vec4 in_TEXCOORD2;
					out vec4 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlatb0 = 0.0<in_POSITION0.z;
					    u_xlat0.z = u_xlatb0 ? 9.99999975e-05 : float(0.0);
					    u_xlat0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.x) ? u_xlat0.xyz : in_POSITION0.xyz;
					    u_xlatb12 = 0.0<u_xlat0.z;
					    u_xlat1.z = u_xlatb12 ? 9.99999975e-05 : float(0.0);
					    u_xlat1.xy = in_TEXCOORD2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					    u_xlat0.xyz = (unity_MetaVertexControl.y) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * unity_ObjectToWorld[1];
					    u_xlat1 = unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat0 = unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _Control_ST.xy + _Control_ST.zw;
					    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _Splat0_ST.xy + _Splat0_ST.zw;
					    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _Splat1_ST.xy + _Splat1_ST.zw;
					    vs_TEXCOORD1.zw = in_TEXCOORD0.xy * _Splat2_ST.xy + _Splat2_ST.zw;
					    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _Splat3_ST.xy + _Splat3_ST.zw;
					    u_xlat0.xy = in_NORMAL0.zx * vec2(0.0, 1.0);
					    u_xlat0.xy = in_NORMAL0.yz * vec2(1.0, 0.0) + (-u_xlat0.xy);
					    u_xlat4.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = unity_ObjectToWorld[0].yzx * u_xlat0.xxx + u_xlat4.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat1.zxy * u_xlat0.yzx + (-u_xlat2.xyz);
					    u_xlat2.xyz = u_xlat2.xyz * (-unity_WorldTransformParams.www);
					    vs_TEXCOORD3.y = u_xlat2.x;
					    u_xlat3.xyz = in_POSITION0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
					    u_xlat3.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat3.xyz;
					    vs_TEXCOORD3.w = u_xlat3.x;
					    vs_TEXCOORD3.x = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat1.y;
					    vs_TEXCOORD4.x = u_xlat0.x;
					    vs_TEXCOORD5.x = u_xlat0.y;
					    vs_TEXCOORD4.z = u_xlat1.z;
					    vs_TEXCOORD5.z = u_xlat1.x;
					    vs_TEXCOORD4.w = u_xlat3.y;
					    vs_TEXCOORD5.w = u_xlat3.z;
					    vs_TEXCOORD4.y = u_xlat2.y;
					    vs_TEXCOORD5.y = u_xlat2.z;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Blur;
					//   float4 _Color;
					//   sampler2D _ColorTex;
					//   sampler2D _HeightSplatAll;
					//   sampler2D _Mask1;
					//   float _Parallax;
					//   sampler2D _Splat0;
					//   sampler2D _Splat1;
					//   sampler2D _Splat2;
					//   sampler2D _Splat3;
					//   float3 _WorldSpaceCameraPos;
					//   float unity_MaxOutputValue;
					//   bool4 unity_MetaFragmentControl;
					//   float unity_OneOverOutputBoost;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   _WorldSpaceCameraPos      c0       1
					//   _Parallax                 c1       1
					//   _Color                    c2       1
					//   _Blur                     c3       1
					//   unity_MetaFragmentControl c4       1
					//   unity_OneOverOutputBoost  c5       1
					//   unity_MaxOutputValue      c6       1
					//   _Mask1                    s0       1
					//   _Splat0                   s1       1
					//   _Splat1                   s2       1
					//   _Splat2                   s3       1
					//   _Splat3                   s4       1
					//   _ColorTex                 s5       1
					//   _HeightSplatAll           s6       1
					//
					
					    ps_3_0
					    def c7, 0.5, 0.419999987, 0, 6
					    def c8, 0, 0.0235294141, 0, 0
					    dcl_texcoord v0
					    dcl_texcoord1 v1
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3
					    dcl_texcoord4 v4
					    dcl_texcoord5 v5
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    dcl_2d s6
					    mov r0.x, v3.w
					    mov r0.y, v4.w
					    mov r0.z, v5.w
					    add r0.xyz, -r0, c0
					    nrm_pp r1.xyz, r0
					    mul r0.xyz, r1.y, v4
					    mad r0.xyz, v3, r1.x, r0
					    mad_pp r0.xyz, v5, r1.z, r0
					    dp3_pp r0.w, r0, r0
					    rsq_pp r0.w, r0.w
					    mad r0.z, r0.z, r0.w, c7.y
					    mul r0.xy, r0.w, r0
					    rcp r0.z, r0.z
					    mul r0.xy, r0.z, r0
					    texld_pp r1, v0.zwzw, s6
					    mov r2.xz, c7
					    mul_pp r0.z, r2.x, c1.x
					    mad_pp r0.w, r1.x, c1.x, -r0.z
					    mad r1.yz, r0.w, r0.xxyw, v0.xzww
					    texld r3, r1.yzzw, s1
					    texld_pp r4, v0, s5
					    mul_pp r1.yzw, r3.xxyz, r4.xxyz
					    texld_pp r3, v1, s6
					    mad_pp r0.w, r3.y, c1.x, -r0.z
					    mad r2.xy, r0.w, r0, v1
					    texld r5, r2, s2
					    mul_pp r2.xyw, r4.xyzz, r5.xyzz
					    texld_pp r5, v0, s0
					    add r0.w, r1.x, r5.x
					    add r1.x, r3.y, r5.y
					    max r3.x, r0.w, r1.x
					    texld_pp r6, v1.zwzw, s6
					    add r3.y, r5.z, r6.z
					    max r4.w, r3.x, r3.y
					    texld_pp r6, v2, s6
					    add r3.x, r5.w, r6.w
					    mad_pp r0.z, r6.w, c1.x, -r0.z
					    mad r0.xy, r0.z, r0, v2
					    texld r5, r0, s4
					    mul_pp r0.xyz, r4, r5
					    max r5.x, r4.w, r3.x
					    add r3.z, r5.x, -c3.x
					    add r1.x, r1.x, -r3.z
					    max r3.w, r1.x, c7.z
					    mul r2.xyw, r2, r3.w
					    add r0.w, r0.w, -r3.z
					    max r1.x, r0.w, c7.z
					    mad r1.yzw, r1, r1.x, r2.xxyw
					    add r0.w, r3.w, r1.x
					    add r1.x, -r3.z, r3.y
					    add r2.x, -r3.z, r3.x
					    max r2.y, r1.x, c7.z
					    texld r3, v1.zwzw, s3
					    mul_pp r3.xyz, r4, r3
					    mad r1.xyz, r3, r2.y, r1.yzww
					    add r0.w, r0.w, r2.y
					    mul r1.w, r2.x, c7.w
					    cmp r1.w, r2.x, r1.w, c7.z
					    mad r0.xyz, r0, r1.w, r1
					    add r0.w, r0.w, r1.w
					    rcp r0.w, r0.w
					    mul_pp r0.xyz, r0.w, r0
					    mul_pp r0.xyz, r0, c2
					    log r1.x, r0.x
					    log r1.y, r0.y
					    log r1.z, r0.z
					    mov_sat r0.x, c5.x
					    mul r0.xyz, r1, r0.x
					    exp_pp r1.x, r0.x
					    exp_pp r1.y, r0.y
					    exp_pp r1.z, r0.z
					    min_pp r0.xyz, c6.x, r1
					    cmp_pp r0.xyz, -c4.x, r2.z, r0
					    mov r0.w, c4.x
					    mov r1.y, c4.y
					    cmp_pp oC0, -r1.y, r0, c8.xxxy
					
					// approximately 78 instruction slots used (10 texture, 68 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[4];
						float _Parallax;
						vec4 _Color;
						float _Blur;
						float unity_OneOverOutputBoost;
						float unity_MaxOutputValue;
						vec4 unused_0_6[5];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityMetaPass {
						vec4 unused_2_0;
						bvec4 unity_MetaFragmentControl;
						vec4 unused_2_2;
					};
					uniform  sampler2D _HeightSplatAll;
					uniform  sampler2D _ColorTex;
					uniform  sampler2D _Mask1;
					uniform  sampler2D _Splat0;
					uniform  sampler2D _Splat1;
					uniform  sampler2D _Splat2;
					uniform  sampler2D _Splat3;
					in  vec4 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					vec3 u_xlat7;
					vec3 u_xlat8;
					float u_xlat12;
					float u_xlat18;
					float u_xlat21;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD3.w;
					    u_xlat0.y = vs_TEXCOORD4.w;
					    u_xlat0.z = vs_TEXCOORD5.w;
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.yyy * vs_TEXCOORD4.xyz;
					    u_xlat0.xyw = vs_TEXCOORD3.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = vs_TEXCOORD5.xyz * u_xlat0.zzz + u_xlat0.xyw;
					    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat0.xy = vec2(u_xlat18) * u_xlat0.xy;
					    u_xlat12 = u_xlat0.z * u_xlat18 + 0.419999987;
					    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat12);
					    u_xlat1 = texture(_HeightSplatAll, vs_TEXCOORD0.zw);
					    u_xlat12 = _Parallax * 0.5;
					    u_xlat18 = u_xlat1.x * _Parallax + (-u_xlat12);
					    u_xlat7.xy = vec2(u_xlat18) * u_xlat0.xy + vs_TEXCOORD0.zw;
					    u_xlat2 = texture(_Splat0, u_xlat7.xy);
					    u_xlat3 = texture(_ColorTex, vs_TEXCOORD0.xy);
					    u_xlat7.xyz = u_xlat2.xyz * u_xlat3.xyz;
					    u_xlat2 = texture(_HeightSplatAll, vs_TEXCOORD1.xy);
					    u_xlat18 = u_xlat2.y * _Parallax + (-u_xlat12);
					    u_xlat2.xz = vec2(u_xlat18) * u_xlat0.xy + vs_TEXCOORD1.xy;
					    u_xlat4 = texture(_Splat1, u_xlat2.xz);
					    u_xlat2.xzw = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat4 = texture(_Mask1, vs_TEXCOORD0.xy);
					    u_xlat18 = u_xlat1.x + u_xlat4.x;
					    u_xlat1.x = u_xlat2.y + u_xlat4.y;
					    u_xlat8.x = max(u_xlat18, u_xlat1.x);
					    u_xlat5 = texture(_HeightSplatAll, vs_TEXCOORD1.zw);
					    u_xlat21 = u_xlat4.z + u_xlat5.z;
					    u_xlat8.x = max(u_xlat8.x, u_xlat21);
					    u_xlat5 = texture(_HeightSplatAll, vs_TEXCOORD2.xy);
					    u_xlat4.x = u_xlat4.w + u_xlat5.w;
					    u_xlat12 = u_xlat5.w * _Parallax + (-u_xlat12);
					    u_xlat0.xy = vec2(u_xlat12) * u_xlat0.xy + vs_TEXCOORD2.xy;
					    u_xlat5 = texture(_Splat3, u_xlat0.xy);
					    u_xlat0.xyz = u_xlat3.xyz * u_xlat5.xyz;
					    u_xlat8.x = max(u_xlat8.x, u_xlat4.x);
					    u_xlat8.x = u_xlat8.x + (-_Blur);
					    u_xlat1.x = u_xlat1.x + (-u_xlat8.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat2.xzw = u_xlat1.xxx * u_xlat2.xzw;
					    u_xlat18 = u_xlat18 + (-u_xlat8.x);
					    u_xlat18 = max(u_xlat18, 0.0);
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat18) + u_xlat2.xzw;
					    u_xlat18 = u_xlat1.x + u_xlat18;
					    u_xlat1.x = (-u_xlat8.x) + u_xlat21;
					    u_xlat2.x = (-u_xlat8.x) + u_xlat4.x;
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat4 = texture(_Splat2, vs_TEXCOORD1.zw);
					    u_xlat8.xyz = u_xlat3.xyz * u_xlat4.xyz;
					    u_xlat7.xyz = u_xlat8.xyz * u_xlat1.xxx + u_xlat7.xyz;
					    u_xlat18 = u_xlat18 + u_xlat1.x;
					    u_xlat18 = u_xlat2.x * 6.0 + u_xlat18;
					    u_xlat1.x = u_xlat2.x * 6.0;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz / vec3(u_xlat18);
					    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
					    u_xlat0.xyz = log2(u_xlat0.xyz);
					    u_xlat18 = unity_OneOverOutputBoost;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18);
					    u_xlat0.xyz = exp2(u_xlat0.xyz);
					    u_xlat0.xyz = min(u_xlat0.xyz, vec3(vec3(unity_MaxOutputValue, unity_MaxOutputValue, unity_MaxOutputValue)));
					    u_xlat0.w = 1.0;
					    u_xlat0 = (unity_MetaFragmentControl.x) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);
					    SV_Target0 = (unity_MetaFragmentControl.y) ? vec4(0.0, 0.0, 0.0, 0.0235294122) : u_xlat0;
					    return;
					}"
				}
			}
		}
	}
	Fallback "Nature/Terrain/Diffuse"
}