Shader "Hidden/CreaseApply" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_HrDepthTex ("Base (RGB)", 2D) = "white" {}
		_LrDepthTex ("Base (RGB)", 2D) = "white" {}
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 13005
			Program "vp" {
				SubProgram "d3d9 " {
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//
					
					    vs_3_0
					    def c8, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    mad r0, v0.xyzx, c8.xxxy, c8.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_0_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_1_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _HrDepthTex;
					//   float4 _HrDepthTex_ST;
					//   sampler2D _LrDepthTex;
					//   float4 _LrDepthTex_ST;
					//   sampler2D _MainTex;
					//   float4 _MainTex_ST;
					//   float intensity;
					//
					//
					// Registers:
					//
					//   Name           Reg   Size
					//   -------------- ----- ----
					//   _MainTex_ST    c0       1
					//   _HrDepthTex_ST c1       1
					//   _LrDepthTex_ST c2       1
					//   intensity      c3       1
					//   _MainTex       s0       1
					//   _HrDepthTex    s1       1
					//   _LrDepthTex    s2       1
					//
					
					    ps_3_0
					    def c4, 1, 0.00392156886, 1.53787005e-005, 6.03086292e-008
					    dcl_texcoord v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mad r0.xy, v0, c1, c1.zwzw
					    texld r0, r0, s1
					    dp4 r0.x, r0, c4
					    mad r0.yz, v0.xxyw, c2.xxyw, c2.xzww
					    texld r1, r0.yzzw, s2
					    dp4 r0.y, r1, c4
					    add r0.x, -r0.y, r0.x
					    mov r1.x, c4.x
					    mad r0.x, r0_abs.x, -c3.x, r1.x
					    mad r0.yz, v0.xxyw, c0.xxyw, c0.xzww
					    texld r1, r0.yzzw, s0
					    mul_pp oC0, r0.x, r1
					
					// approximately 12 instruction slots used (3 texture, 9 arithmetic)"
				}
				SubProgram "d3d11 " {
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _MainTex_ST;
						vec4 _HrDepthTex_ST;
						vec4 _LrDepthTex_ST;
						float intensity;
					};
					uniform  sampler2D _HrDepthTex;
					uniform  sampler2D _LrDepthTex;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _HrDepthTex_ST.xy + _HrDepthTex_ST.zw;
					    u_xlat0 = texture(_HrDepthTex, u_xlat0.xy);
					    u_xlat0.x = dot(u_xlat0, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xy = vs_TEXCOORD0.xy * _LrDepthTex_ST.xy + _LrDepthTex_ST.zw;
					    u_xlat1 = texture(_LrDepthTex, u_xlat2.xy);
					    u_xlat2.x = dot(u_xlat1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat0.x = (-u_xlat2.x) + u_xlat0.x;
					    u_xlat0.x = -abs(u_xlat0.x) * intensity + 1.0;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat1 = texture(_MainTex, u_xlat2.xy);
					    SV_Target0 = u_xlat0.xxxx * u_xlat1;
					    return;
					}"
				}
			}
		}
	}
}