Shader "Hidden/AtmosphericScattering_Occlusion" {
	Properties {
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 2265
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_NATIVE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 u_ViewportCorner;
					//   float3 u_ViewportRight;
					//   float3 u_ViewportUp;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   u_ViewportCorner    c8       1
					//   u_ViewportRight     c9       1
					//   u_ViewportUp        c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord2 o2.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.xyz, c9
					    mad r0.xyz, v1.x, r0, c8
					    mad o2.xyz, v1.y, c10, r0
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 15 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_NATIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[25];
						vec3 u_ViewportCorner;
						vec3 u_ViewportRight;
						vec3 u_ViewportUp;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_TEXCOORD0.xxx * u_ViewportRight.xyz + u_ViewportCorner.xyz;
					    vs_TEXCOORD2.xyz = in_TEXCOORD0.yyy * u_ViewportUp.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 u_ViewportCorner;
					//   float3 u_ViewportRight;
					//   float3 u_ViewportUp;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   u_ViewportCorner    c8       1
					//   u_ViewportRight     c9       1
					//   u_ViewportUp        c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord2 o2.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.xyz, c9
					    mad r0.xyz, v1.x, r0, c8
					    mad o2.xyz, v1.y, c10, r0
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 15 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[25];
						vec3 u_ViewportCorner;
						vec3 u_ViewportRight;
						vec3 u_ViewportUp;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_TEXCOORD0.xxx * u_ViewportRight.xyz + u_ViewportCorner.xyz;
					    vs_TEXCOORD2.xyz = in_TEXCOORD0.yyy * u_ViewportUp.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "SHADOWS_NATIVE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 u_ViewportCorner;
					//   float3 u_ViewportRight;
					//   float3 u_ViewportUp;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   u_ViewportCorner    c8       1
					//   u_ViewportRight     c9       1
					//   u_ViewportUp        c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord2 o2.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.xyz, c9
					    mad r0.xyz, v1.x, r0, c8
					    mad o2.xyz, v1.y, c10, r0
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 15 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "SHADOWS_NATIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[25];
						vec3 u_ViewportCorner;
						vec3 u_ViewportRight;
						vec3 u_ViewportUp;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_TEXCOORD0.xxx * u_ViewportRight.xyz + u_ViewportCorner.xyz;
					    vs_TEXCOORD2.xyz = in_TEXCOORD0.yyy * u_ViewportUp.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 u_ViewportCorner;
					//   float3 u_ViewportRight;
					//   float3 u_ViewportUp;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   u_ViewportCorner    c8       1
					//   u_ViewportRight     c9       1
					//   u_ViewportUp        c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord2 o2.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.xyz, c9
					    mad r0.xyz, v1.x, r0, c8
					    mad o2.xyz, v1.y, c10, r0
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 15 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[25];
						vec3 u_ViewportCorner;
						vec3 u_ViewportRight;
						vec3 u_ViewportUp;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_TEXCOORD0.xxx * u_ViewportRight.xyz + u_ViewportCorner.xyz;
					    vs_TEXCOORD2.xyz = in_TEXCOORD0.yyy * u_ViewportUp.xyz + u_xlat0.xyz;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_NATIVE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//   float3 u_CameraPosition;
					//   sampler2D u_CascadedShadowMap;
					//   float4 unity_ShadowSplitSpheres[4];
					//   float4 unity_ShadowSplitSqRadii;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   unity_WorldToShadow      c0      15
					//   unity_ShadowSplitSpheres c15      4
					//   _ZBufferParams           c19      1
					//   unity_ShadowSplitSqRadii c20      1
					//   u_CameraPosition         c21      1
					//   _CameraDepthTexture      s0       1
					//   u_CascadedShadowMap      s1       1
					//
					
					    ps_3_0
					    def c22, 0.999999881, 0.75, 0, 1
					    def c23, 0, -4, -0.0158730168, 0.015625
					    defi i0, 64, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord2 v1.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    add r0.y, -r0.x, c22.x
					    if_lt c22.x, r0.x
					      mov r0.z, c22.y
					    else
					      mov r0.z, c22.z
					    endif
					    mad r0.x, c19.x, r0.x, c19.y
					    rcp r0.x, r0.x
					    mul r1.xyz, r0.x, v1
					    mad r2.xyz, v1, r0.x, c21
					    mov r3.w, c22.w
					    mov r4.xyz, r2
					    mov r0.x, c22.z
					    rep i0
					      add r5.xyz, r4, -c15
					      add r6.xyz, r4, -c16
					      add r7.xyz, r4, -c17
					      add r8.xyz, r4, -c18
					      dp3 r5.x, r5, r5
					      dp3 r5.y, r6, r6
					      dp3 r5.z, r7, r7
					      dp3 r5.w, r8, r8
					      add r5, r5, -c20
					      cmp r6, r5, c22.z, c22.w
					      cmp r5.xyz, r5, -c22.z, -c22.w
					      add_pp r5.xyz, r5, r6.yzww
					      max_pp r6.yzw, r5.xxyz, c22.z
					      dp4 r0.w, r6, c22.w
					      add r0.w, r0.w, c23.y
					      mad r5, r4.xyzx, c22.wwwz, c22.zzzw
					      dp4 r7.x, c0, r5
					      dp4 r7.y, c1, r5
					      dp4 r7.z, c2, r5
					      dp4 r8.x, c4, r5
					      dp4 r8.y, c5, r5
					      dp4 r8.z, c6, r5
					      dp4 r9.x, c8, r5
					      dp4 r9.y, c9, r5
					      dp4 r9.z, c10, r5
					      dp4 r10.x, c12, r5
					      dp4 r10.y, c13, r5
					      dp4 r10.z, c14, r5
					      mul r5.xyz, r6.y, r8
					      mad r5.xyz, r7, r6.x, r5
					      mad r5.xyz, r9, r6.z, r5
					      mad r3.xyz, r10, r6.w, r5
					      texldp r5, r3, s1
					      cmp r0.w, r0.w, c22.w, r5.x
					      add r0.x, r0.w, r0.x
					      mad r4.xyz, r1, c23.z, r4
					    endrep
					    mul_pp r0.x, r0.x, c23.w
					    cmp_pp oC0, r0.y, r0.x, r0.z
					
					// approximately 59 instruction slots used (2 texture, 57 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_NATIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[24];
						vec3 u_CameraPosition;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityShadows {
						vec4 unity_ShadowSplitSpheres[4];
						vec4 unused_2_1[3];
						vec4 unity_ShadowSplitSqRadii;
						vec4 unused_2_3[3];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_2_5[14];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D u_CascadedShadowMap;
					uniform  sampler2DShadow hlslcc_zcmpu_CascadedShadowMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					bvec4 u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb7;
					bool u_xlatb10;
					float u_xlat22;
					int u_xlati23;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlatb7 = 0.999999881<u_xlat0.x;
					    if(u_xlatb7){
					        u_xlat0.z = 0.75;
					    }
					    if(!u_xlatb7){
					        u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					        u_xlat0.x = float(1.0) / u_xlat0.x;
					        u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
					        u_xlat0.xyw = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_CameraPosition.xyz;
					        u_xlat22 = 0.0;
					        u_xlat2.xyz = u_xlat0.xyw;
					        u_xlati23 = 0;
					        while(true){
					            u_xlatb3.x = u_xlati23>=64;
					            if(u_xlatb3.x){break;}
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat3.x = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb10 = u_xlat3.x<4.0;
					            u_xlati3 = int(u_xlat3.x);
					            u_xlati3 = u_xlati3 << 2;
					            u_xlat4.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati3 + 1) / 4][(u_xlati3 + 1) % 4].xyz;
					            u_xlat4.xyz = unity_WorldToShadow[u_xlati3 / 4][u_xlati3 % 4].xyz * u_xlat2.xxx + u_xlat4.xyz;
					            u_xlat4.xyz = unity_WorldToShadow[(u_xlati3 + 2) / 4][(u_xlati3 + 2) % 4].xyz * u_xlat2.zzz + u_xlat4.xyz;
					            u_xlat3.xzw = u_xlat4.xyz + unity_WorldToShadow[(u_xlati3 + 3) / 4][(u_xlati3 + 3) % 4].xyz;
					            vec3 txVec0 = vec3(u_xlat3.xz,u_xlat3.w);
					            u_xlat3.x = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec0, 0.0);
					            u_xlat3.x = (u_xlatb10) ? u_xlat3.x : 1.0;
					            u_xlat22 = u_xlat22 + u_xlat3.x;
					            u_xlati23 = u_xlati23 + 1;
					            u_xlat2.xyz = u_xlat1.xyz * vec3(-0.0158730168, -0.0158730168, -0.0158730168) + u_xlat2.xyz;
					        }
					        u_xlat0.z = u_xlat22 * 0.015625;
					    }
					    SV_Target0 = u_xlat0.zzzz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//   float3 u_CameraPosition;
					//   sampler2D u_CascadedShadowMap;
					//   float4 unity_ShadowSplitSpheres[4];
					//   float4 unity_ShadowSplitSqRadii;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   unity_WorldToShadow      c0      15
					//   unity_ShadowSplitSpheres c15      4
					//   _ZBufferParams           c19      1
					//   unity_ShadowSplitSqRadii c20      1
					//   u_CameraPosition         c21      1
					//   _CameraDepthTexture      s0       1
					//   u_CascadedShadowMap      s1       1
					//
					
					    ps_3_0
					    def c22, 0.999999881, 0.75, 0, 1
					    def c23, 0, -4, -0.0158730168, 0.015625
					    defi i0, 64, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord2 v1.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    add r0.y, -r0.x, c22.x
					    if_lt c22.x, r0.x
					      mov r0.z, c22.y
					    else
					      mov r0.z, c22.z
					    endif
					    mad r0.x, c19.x, r0.x, c19.y
					    rcp r0.x, r0.x
					    mul r1.xyz, r0.x, v1
					    mad r2.xyz, v1, r0.x, c21
					    mov r3.w, c22.w
					    mov r4.xyz, r2
					    mov r0.x, c22.z
					    rep i0
					      add r5.xyz, r4, -c15
					      add r6.xyz, r4, -c16
					      add r7.xyz, r4, -c17
					      add r8.xyz, r4, -c18
					      dp3 r5.x, r5, r5
					      dp3 r5.y, r6, r6
					      dp3 r5.z, r7, r7
					      dp3 r5.w, r8, r8
					      add r5, r5, -c20
					      cmp r6, r5, c22.z, c22.w
					      cmp r5.xyz, r5, -c22.z, -c22.w
					      add_pp r5.xyz, r5, r6.yzww
					      max_pp r6.yzw, r5.xxyz, c22.z
					      dp4 r0.w, r6, c22.w
					      add r0.w, r0.w, c23.y
					      mad r5, r4.xyzx, c22.wwwz, c22.zzzw
					      dp4 r7.x, c0, r5
					      dp4 r7.y, c1, r5
					      dp4 r7.z, c2, r5
					      dp4 r8.x, c4, r5
					      dp4 r8.y, c5, r5
					      dp4 r8.z, c6, r5
					      dp4 r9.x, c8, r5
					      dp4 r9.y, c9, r5
					      dp4 r9.z, c10, r5
					      dp4 r10.x, c12, r5
					      dp4 r10.y, c13, r5
					      dp4 r10.z, c14, r5
					      mul r5.xyz, r6.y, r8
					      mad r5.xyz, r7, r6.x, r5
					      mad r5.xyz, r9, r6.z, r5
					      mad r3.xyz, r10, r6.w, r5
					      texldp r5, r3, s1
					      cmp r0.w, r0.w, c22.w, r5.x
					      add r0.x, r0.w, r0.x
					      mad r4.xyz, r1, c23.z, r4
					    endrep
					    mul_pp r0.x, r0.x, c23.w
					    cmp_pp oC0, r0.y, r0.x, r0.z
					
					// approximately 59 instruction slots used (2 texture, 57 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[24];
						vec3 u_CameraPosition;
						vec4 unused_0_2[5];
						float u_OcclusionSkyRefDistance;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityShadows {
						vec4 unity_ShadowSplitSpheres[4];
						vec4 unused_2_1[3];
						vec4 unity_ShadowSplitSqRadii;
						vec4 unused_2_3[3];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_2_5[14];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D u_CascadedShadowMap;
					uniform  sampler2DShadow hlslcc_zcmpu_CascadedShadowMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					float u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bvec4 u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					int u_xlati15;
					float u_xlat22;
					int u_xlati22;
					bool u_xlatb22;
					float u_xlat23;
					int u_xlati23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlatb7 = 0.999999881<u_xlat0.x;
					    if(u_xlatb7){
					        u_xlat7.xyz = vs_TEXCOORD2.xyz * vec3(u_OcclusionSkyRefDistance);
					        u_xlat1 = float(0.0);
					        u_xlat8.x = float(0.0);
					        u_xlati15 = int(0);
					        while(true){
					            u_xlatb22 = u_xlati15>=64;
					            if(u_xlatb22){break;}
					            u_xlat22 = u_xlat8.x * u_xlat8.x;
					            u_xlat2.xyz = vec3(u_xlat22) * u_xlat7.xyz + u_CameraPosition.xyz;
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat22 = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb23 = u_xlat22<4.0;
					            u_xlati22 = int(u_xlat22);
					            u_xlati22 = u_xlati22 << 2;
					            u_xlat3.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati22 + 1) / 4][(u_xlati22 + 1) % 4].xyz;
					            u_xlat3.xyz = unity_WorldToShadow[u_xlati22 / 4][u_xlati22 % 4].xyz * u_xlat2.xxx + u_xlat3.xyz;
					            u_xlat2.xyz = unity_WorldToShadow[(u_xlati22 + 2) / 4][(u_xlati22 + 2) % 4].xyz * u_xlat2.zzz + u_xlat3.xyz;
					            u_xlat2.xyz = u_xlat2.xyz + unity_WorldToShadow[(u_xlati22 + 3) / 4][(u_xlati22 + 3) % 4].xyz;
					            vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					            u_xlat22 = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec0, 0.0);
					            u_xlat22 = (u_xlatb23) ? u_xlat22 : 1.0;
					            u_xlat1 = u_xlat22 + u_xlat1;
					            u_xlati15 = u_xlati15 + 1;
					            u_xlat8.x = u_xlat8.x + 0.015625;
					        }
					    } else {
					        u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					        u_xlat0.x = float(1.0) / u_xlat0.x;
					        u_xlat7.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
					        u_xlat8.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_CameraPosition.xyz;
					        u_xlat1 = 0.0;
					        u_xlat2.xyz = u_xlat8.xyz;
					        u_xlati0 = 0;
					        while(true){
					            u_xlatb23 = u_xlati0>=64;
					            if(u_xlatb23){break;}
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat23 = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb3.x = u_xlat23<4.0;
					            u_xlati23 = int(u_xlat23);
					            u_xlati23 = u_xlati23 << 2;
					            u_xlat10.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati23 + 1) / 4][(u_xlati23 + 1) % 4].xyz;
					            u_xlat10.xyz = unity_WorldToShadow[u_xlati23 / 4][u_xlati23 % 4].xyz * u_xlat2.xxx + u_xlat10.xyz;
					            u_xlat10.xyz = unity_WorldToShadow[(u_xlati23 + 2) / 4][(u_xlati23 + 2) % 4].xyz * u_xlat2.zzz + u_xlat10.xyz;
					            u_xlat10.xyz = u_xlat10.xyz + unity_WorldToShadow[(u_xlati23 + 3) / 4][(u_xlati23 + 3) % 4].xyz;
					            vec3 txVec1 = vec3(u_xlat10.xy,u_xlat10.z);
					            u_xlat23 = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec1, 0.0);
					            u_xlat23 = (u_xlatb3.x) ? u_xlat23 : 1.0;
					            u_xlat1 = u_xlat1 + u_xlat23;
					            u_xlati0 = u_xlati0 + 1;
					            u_xlat2.xyz = u_xlat7.xyz * vec3(-0.0158730168, -0.0158730168, -0.0158730168) + u_xlat2.xyz;
					        }
					    }
					    SV_Target0 = vec4(u_xlat1) * vec4(0.015625, 0.015625, 0.015625, 0.015625);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "SHADOWS_NATIVE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//   float3 u_CameraPosition;
					//   sampler2D u_CascadedShadowMap;
					//   float4 unity_ShadowSplitSpheres[4];
					//   float4 unity_ShadowSplitSqRadii;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   unity_WorldToShadow      c0      15
					//   unity_ShadowSplitSpheres c15      4
					//   _ZBufferParams           c19      1
					//   unity_ShadowSplitSqRadii c20      1
					//   u_CameraPosition         c21      1
					//   _CameraDepthTexture      s0       1
					//   u_CascadedShadowMap      s1       1
					//
					
					    ps_3_0
					    def c22, 0.999999881, 0.75, 0, 1
					    def c23, 0, -4, -0.0158730168, 0.015625
					    defi i0, 64, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord2 v1.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    add r0.y, -r0.x, c22.x
					    if_lt c22.x, r0.x
					      mov r0.z, c22.y
					    else
					      mov r0.z, c22.z
					    endif
					    mad r0.x, c19.x, r0.x, c19.y
					    rcp r0.x, r0.x
					    mul r1.xyz, r0.x, v1
					    mad r2.xyz, v1, r0.x, c21
					    mov r3.w, c22.w
					    mov r4.xyz, r2
					    mov r0.x, c22.z
					    rep i0
					      add r5.xyz, r4, -c15
					      add r6.xyz, r4, -c16
					      add r7.xyz, r4, -c17
					      add r8.xyz, r4, -c18
					      dp3 r5.x, r5, r5
					      dp3 r5.y, r6, r6
					      dp3 r5.z, r7, r7
					      dp3 r5.w, r8, r8
					      add r5, r5, -c20
					      cmp r6, r5, c22.z, c22.w
					      cmp r5.xyz, r5, -c22.z, -c22.w
					      add_pp r5.xyz, r5, r6.yzww
					      max_pp r6.yzw, r5.xxyz, c22.z
					      dp4 r0.w, r6, c22.w
					      add r0.w, r0.w, c23.y
					      mad r5, r4.xyzx, c22.wwwz, c22.zzzw
					      dp4 r7.x, c0, r5
					      dp4 r7.y, c1, r5
					      dp4 r7.z, c2, r5
					      dp4 r8.x, c4, r5
					      dp4 r8.y, c5, r5
					      dp4 r8.z, c6, r5
					      dp4 r9.x, c8, r5
					      dp4 r9.y, c9, r5
					      dp4 r9.z, c10, r5
					      dp4 r10.x, c12, r5
					      dp4 r10.y, c13, r5
					      dp4 r10.z, c14, r5
					      mul r5.xyz, r6.y, r8
					      mad r5.xyz, r7, r6.x, r5
					      mad r5.xyz, r9, r6.z, r5
					      mad r3.xyz, r10, r6.w, r5
					      texldp r5, r3, s1
					      cmp r0.w, r0.w, c22.w, r5.x
					      add r0.x, r0.w, r0.x
					      mad r4.xyz, r1, c23.z, r4
					    endrep
					    mul_pp r0.x, r0.x, c23.w
					    cmp_pp oC0, r0.y, r0.x, r0.z
					
					// approximately 59 instruction slots used (2 texture, 57 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "SHADOWS_NATIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[24];
						vec3 u_CameraPosition;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityShadows {
						vec4 unity_ShadowSplitSpheres[4];
						vec4 unused_2_1[3];
						vec4 unity_ShadowSplitSqRadii;
						vec4 unused_2_3[3];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_2_5[14];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D u_CascadedShadowMap;
					uniform  sampler2DShadow hlslcc_zcmpu_CascadedShadowMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					bvec4 u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb7;
					bool u_xlatb10;
					float u_xlat22;
					int u_xlati23;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlatb7 = 0.999999881<u_xlat0.x;
					    if(u_xlatb7){
					        u_xlat0.z = 0.75;
					    }
					    if(!u_xlatb7){
					        u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					        u_xlat0.x = float(1.0) / u_xlat0.x;
					        u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
					        u_xlat0.xyw = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_CameraPosition.xyz;
					        u_xlat22 = 0.0;
					        u_xlat2.xyz = u_xlat0.xyw;
					        u_xlati23 = 0;
					        while(true){
					            u_xlatb3.x = u_xlati23>=64;
					            if(u_xlatb3.x){break;}
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat3.x = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb10 = u_xlat3.x<4.0;
					            u_xlati3 = int(u_xlat3.x);
					            u_xlati3 = u_xlati3 << 2;
					            u_xlat4.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati3 + 1) / 4][(u_xlati3 + 1) % 4].xyz;
					            u_xlat4.xyz = unity_WorldToShadow[u_xlati3 / 4][u_xlati3 % 4].xyz * u_xlat2.xxx + u_xlat4.xyz;
					            u_xlat4.xyz = unity_WorldToShadow[(u_xlati3 + 2) / 4][(u_xlati3 + 2) % 4].xyz * u_xlat2.zzz + u_xlat4.xyz;
					            u_xlat3.xzw = u_xlat4.xyz + unity_WorldToShadow[(u_xlati3 + 3) / 4][(u_xlati3 + 3) % 4].xyz;
					            vec3 txVec0 = vec3(u_xlat3.xz,u_xlat3.w);
					            u_xlat3.x = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec0, 0.0);
					            u_xlat3.x = (u_xlatb10) ? u_xlat3.x : 1.0;
					            u_xlat22 = u_xlat22 + u_xlat3.x;
					            u_xlati23 = u_xlati23 + 1;
					            u_xlat2.xyz = u_xlat1.xyz * vec3(-0.0158730168, -0.0158730168, -0.0158730168) + u_xlat2.xyz;
					        }
					        u_xlat0.z = u_xlat22 * 0.015625;
					    }
					    SV_Target0 = u_xlat0.zzzz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//   float3 u_CameraPosition;
					//   sampler2D u_CascadedShadowMap;
					//   float4 unity_ShadowSplitSpheres[4];
					//   float4 unity_ShadowSplitSqRadii;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   unity_WorldToShadow      c0      15
					//   unity_ShadowSplitSpheres c15      4
					//   _ZBufferParams           c19      1
					//   unity_ShadowSplitSqRadii c20      1
					//   u_CameraPosition         c21      1
					//   _CameraDepthTexture      s0       1
					//   u_CascadedShadowMap      s1       1
					//
					
					    ps_3_0
					    def c22, 0.999999881, 0.75, 0, 1
					    def c23, 0, -4, -0.0158730168, 0.015625
					    defi i0, 64, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord2 v1.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    add r0.y, -r0.x, c22.x
					    if_lt c22.x, r0.x
					      mov r0.z, c22.y
					    else
					      mov r0.z, c22.z
					    endif
					    mad r0.x, c19.x, r0.x, c19.y
					    rcp r0.x, r0.x
					    mul r1.xyz, r0.x, v1
					    mad r2.xyz, v1, r0.x, c21
					    mov r3.w, c22.w
					    mov r4.xyz, r2
					    mov r0.x, c22.z
					    rep i0
					      add r5.xyz, r4, -c15
					      add r6.xyz, r4, -c16
					      add r7.xyz, r4, -c17
					      add r8.xyz, r4, -c18
					      dp3 r5.x, r5, r5
					      dp3 r5.y, r6, r6
					      dp3 r5.z, r7, r7
					      dp3 r5.w, r8, r8
					      add r5, r5, -c20
					      cmp r6, r5, c22.z, c22.w
					      cmp r5.xyz, r5, -c22.z, -c22.w
					      add_pp r5.xyz, r5, r6.yzww
					      max_pp r6.yzw, r5.xxyz, c22.z
					      dp4 r0.w, r6, c22.w
					      add r0.w, r0.w, c23.y
					      mad r5, r4.xyzx, c22.wwwz, c22.zzzw
					      dp4 r7.x, c0, r5
					      dp4 r7.y, c1, r5
					      dp4 r7.z, c2, r5
					      dp4 r8.x, c4, r5
					      dp4 r8.y, c5, r5
					      dp4 r8.z, c6, r5
					      dp4 r9.x, c8, r5
					      dp4 r9.y, c9, r5
					      dp4 r9.z, c10, r5
					      dp4 r10.x, c12, r5
					      dp4 r10.y, c13, r5
					      dp4 r10.z, c14, r5
					      mul r5.xyz, r6.y, r8
					      mad r5.xyz, r7, r6.x, r5
					      mad r5.xyz, r9, r6.z, r5
					      mad r3.xyz, r10, r6.w, r5
					      texldp r5, r3, s1
					      cmp r0.w, r0.w, c22.w, r5.x
					      add r0.x, r0.w, r0.x
					      mad r4.xyz, r1, c23.z, r4
					    endrep
					    mul_pp r0.x, r0.x, c23.w
					    cmp_pp oC0, r0.y, r0.x, r0.z
					
					// approximately 59 instruction slots used (2 texture, 57 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[24];
						vec3 u_CameraPosition;
						vec4 unused_0_2[5];
						float u_OcclusionSkyRefDistance;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityShadows {
						vec4 unity_ShadowSplitSpheres[4];
						vec4 unused_2_1[3];
						vec4 unity_ShadowSplitSqRadii;
						vec4 unused_2_3[3];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_2_5[14];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D u_CascadedShadowMap;
					uniform  sampler2DShadow hlslcc_zcmpu_CascadedShadowMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					float u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bvec4 u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					int u_xlati15;
					float u_xlat22;
					int u_xlati22;
					bool u_xlatb22;
					float u_xlat23;
					int u_xlati23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlatb7 = 0.999999881<u_xlat0.x;
					    if(u_xlatb7){
					        u_xlat7.xyz = vs_TEXCOORD2.xyz * vec3(u_OcclusionSkyRefDistance);
					        u_xlat1 = float(0.0);
					        u_xlat8.x = float(0.0);
					        u_xlati15 = int(0);
					        while(true){
					            u_xlatb22 = u_xlati15>=64;
					            if(u_xlatb22){break;}
					            u_xlat22 = u_xlat8.x * u_xlat8.x;
					            u_xlat2.xyz = vec3(u_xlat22) * u_xlat7.xyz + u_CameraPosition.xyz;
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat22 = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb23 = u_xlat22<4.0;
					            u_xlati22 = int(u_xlat22);
					            u_xlati22 = u_xlati22 << 2;
					            u_xlat3.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati22 + 1) / 4][(u_xlati22 + 1) % 4].xyz;
					            u_xlat3.xyz = unity_WorldToShadow[u_xlati22 / 4][u_xlati22 % 4].xyz * u_xlat2.xxx + u_xlat3.xyz;
					            u_xlat2.xyz = unity_WorldToShadow[(u_xlati22 + 2) / 4][(u_xlati22 + 2) % 4].xyz * u_xlat2.zzz + u_xlat3.xyz;
					            u_xlat2.xyz = u_xlat2.xyz + unity_WorldToShadow[(u_xlati22 + 3) / 4][(u_xlati22 + 3) % 4].xyz;
					            vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					            u_xlat22 = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec0, 0.0);
					            u_xlat22 = (u_xlatb23) ? u_xlat22 : 1.0;
					            u_xlat1 = u_xlat22 + u_xlat1;
					            u_xlati15 = u_xlati15 + 1;
					            u_xlat8.x = u_xlat8.x + 0.015625;
					        }
					    } else {
					        u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					        u_xlat0.x = float(1.0) / u_xlat0.x;
					        u_xlat7.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
					        u_xlat8.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_CameraPosition.xyz;
					        u_xlat1 = 0.0;
					        u_xlat2.xyz = u_xlat8.xyz;
					        u_xlati0 = 0;
					        while(true){
					            u_xlatb23 = u_xlati0>=64;
					            if(u_xlatb23){break;}
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat23 = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb3.x = u_xlat23<4.0;
					            u_xlati23 = int(u_xlat23);
					            u_xlati23 = u_xlati23 << 2;
					            u_xlat10.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati23 + 1) / 4][(u_xlati23 + 1) % 4].xyz;
					            u_xlat10.xyz = unity_WorldToShadow[u_xlati23 / 4][u_xlati23 % 4].xyz * u_xlat2.xxx + u_xlat10.xyz;
					            u_xlat10.xyz = unity_WorldToShadow[(u_xlati23 + 2) / 4][(u_xlati23 + 2) % 4].xyz * u_xlat2.zzz + u_xlat10.xyz;
					            u_xlat10.xyz = u_xlat10.xyz + unity_WorldToShadow[(u_xlati23 + 3) / 4][(u_xlati23 + 3) % 4].xyz;
					            vec3 txVec1 = vec3(u_xlat10.xy,u_xlat10.z);
					            u_xlat23 = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec1, 0.0);
					            u_xlat23 = (u_xlatb3.x) ? u_xlat23 : 1.0;
					            u_xlat1 = u_xlat1 + u_xlat23;
					            u_xlati0 = u_xlati0 + 1;
					            u_xlat2.xyz = u_xlat7.xyz * vec3(-0.0158730168, -0.0158730168, -0.0158730168) + u_xlat2.xyz;
					        }
					    }
					    SV_Target0 = vec4(u_xlat1) * vec4(0.015625, 0.015625, 0.015625, 0.015625);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 127652
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_NATIVE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 u_ViewportCorner;
					//   float3 u_ViewportRight;
					//   float3 u_ViewportUp;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   u_ViewportCorner    c8       1
					//   u_ViewportRight     c9       1
					//   u_ViewportUp        c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord2 o2.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.xyz, c9
					    mad r0.xyz, v1.x, r0, c8
					    mad o2.xyz, v1.y, c10, r0
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 15 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_NATIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[25];
						vec3 u_ViewportCorner;
						vec3 u_ViewportRight;
						vec3 u_ViewportUp;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_TEXCOORD0.xxx * u_ViewportRight.xyz + u_ViewportCorner.xyz;
					    vs_TEXCOORD2.xyz = in_TEXCOORD0.yyy * u_ViewportUp.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 u_ViewportCorner;
					//   float3 u_ViewportRight;
					//   float3 u_ViewportUp;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   u_ViewportCorner    c8       1
					//   u_ViewportRight     c9       1
					//   u_ViewportUp        c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord2 o2.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.xyz, c9
					    mad r0.xyz, v1.x, r0, c8
					    mad o2.xyz, v1.y, c10, r0
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 15 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[25];
						vec3 u_ViewportCorner;
						vec3 u_ViewportRight;
						vec3 u_ViewportUp;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_TEXCOORD0.xxx * u_ViewportRight.xyz + u_ViewportCorner.xyz;
					    vs_TEXCOORD2.xyz = in_TEXCOORD0.yyy * u_ViewportUp.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "SHADOWS_NATIVE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 u_ViewportCorner;
					//   float3 u_ViewportRight;
					//   float3 u_ViewportUp;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   u_ViewportCorner    c8       1
					//   u_ViewportRight     c9       1
					//   u_ViewportUp        c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord2 o2.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.xyz, c9
					    mad r0.xyz, v1.x, r0, c8
					    mad o2.xyz, v1.y, c10, r0
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 15 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "SHADOWS_NATIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[25];
						vec3 u_ViewportCorner;
						vec3 u_ViewportRight;
						vec3 u_ViewportUp;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_TEXCOORD0.xxx * u_ViewportRight.xyz + u_ViewportCorner.xyz;
					    vs_TEXCOORD2.xyz = in_TEXCOORD0.yyy * u_ViewportUp.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 u_ViewportCorner;
					//   float3 u_ViewportRight;
					//   float3 u_ViewportUp;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   u_ViewportCorner    c8       1
					//   u_ViewportRight     c9       1
					//   u_ViewportUp        c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord2 o2.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.xyz, c9
					    mad r0.xyz, v1.x, r0, c8
					    mad o2.xyz, v1.y, c10, r0
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 15 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[25];
						vec3 u_ViewportCorner;
						vec3 u_ViewportRight;
						vec3 u_ViewportUp;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_TEXCOORD0.xxx * u_ViewportRight.xyz + u_ViewportCorner.xyz;
					    vs_TEXCOORD2.xyz = in_TEXCOORD0.yyy * u_ViewportUp.xyz + u_xlat0.xyz;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_NATIVE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//   float3 u_CameraPosition;
					//   sampler2D u_CascadedShadowMap;
					//   float4 unity_ShadowSplitSpheres[4];
					//   float4 unity_ShadowSplitSqRadii;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   unity_WorldToShadow      c0      15
					//   unity_ShadowSplitSpheres c15      4
					//   _ZBufferParams           c19      1
					//   unity_ShadowSplitSqRadii c20      1
					//   u_CameraPosition         c21      1
					//   _CameraDepthTexture      s0       1
					//   u_CascadedShadowMap      s1       1
					//
					
					    ps_3_0
					    def c22, 0.999999881, 0.75, 0, 1
					    def c23, 0, -4, -0.00613496918, 0.00609756075
					    defi i0, 164, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord2 v1.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    add r0.y, -r0.x, c22.x
					    if_lt c22.x, r0.x
					      mov r0.z, c22.y
					    else
					      mov r0.z, c22.z
					    endif
					    mad r0.x, c19.x, r0.x, c19.y
					    rcp r0.x, r0.x
					    mul r1.xyz, r0.x, v1
					    mad r2.xyz, v1, r0.x, c21
					    mov r3.w, c22.w
					    mov r4.xyz, r2
					    mov r0.x, c22.z
					    rep i0
					      add r5.xyz, r4, -c15
					      add r6.xyz, r4, -c16
					      add r7.xyz, r4, -c17
					      add r8.xyz, r4, -c18
					      dp3 r5.x, r5, r5
					      dp3 r5.y, r6, r6
					      dp3 r5.z, r7, r7
					      dp3 r5.w, r8, r8
					      add r5, r5, -c20
					      cmp r6, r5, c22.z, c22.w
					      cmp r5.xyz, r5, -c22.z, -c22.w
					      add_pp r5.xyz, r5, r6.yzww
					      max_pp r6.yzw, r5.xxyz, c22.z
					      dp4 r0.w, r6, c22.w
					      add r0.w, r0.w, c23.y
					      mad r5, r4.xyzx, c22.wwwz, c22.zzzw
					      dp4 r7.x, c0, r5
					      dp4 r7.y, c1, r5
					      dp4 r7.z, c2, r5
					      dp4 r8.x, c4, r5
					      dp4 r8.y, c5, r5
					      dp4 r8.z, c6, r5
					      dp4 r9.x, c8, r5
					      dp4 r9.y, c9, r5
					      dp4 r9.z, c10, r5
					      dp4 r10.x, c12, r5
					      dp4 r10.y, c13, r5
					      dp4 r10.z, c14, r5
					      mul r5.xyz, r6.y, r8
					      mad r5.xyz, r7, r6.x, r5
					      mad r5.xyz, r9, r6.z, r5
					      mad r3.xyz, r10, r6.w, r5
					      texldp r5, r3, s1
					      cmp r0.w, r0.w, c22.w, r5.x
					      add r0.x, r0.w, r0.x
					      mad r4.xyz, r1, c23.z, r4
					    endrep
					    mul_pp r0.x, r0.x, c23.w
					    cmp_pp oC0, r0.y, r0.x, r0.z
					
					// approximately 59 instruction slots used (2 texture, 57 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_NATIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[24];
						vec3 u_CameraPosition;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityShadows {
						vec4 unity_ShadowSplitSpheres[4];
						vec4 unused_2_1[3];
						vec4 unity_ShadowSplitSqRadii;
						vec4 unused_2_3[3];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_2_5[14];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D u_CascadedShadowMap;
					uniform  sampler2DShadow hlslcc_zcmpu_CascadedShadowMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					bvec4 u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb7;
					bool u_xlatb10;
					float u_xlat22;
					int u_xlati23;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlatb7 = 0.999999881<u_xlat0.x;
					    if(u_xlatb7){
					        u_xlat0.z = 0.75;
					    }
					    if(!u_xlatb7){
					        u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					        u_xlat0.x = float(1.0) / u_xlat0.x;
					        u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
					        u_xlat0.xyw = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_CameraPosition.xyz;
					        u_xlat22 = 0.0;
					        u_xlat2.xyz = u_xlat0.xyw;
					        u_xlati23 = 0;
					        while(true){
					            u_xlatb3.x = u_xlati23>=164;
					            if(u_xlatb3.x){break;}
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat3.x = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb10 = u_xlat3.x<4.0;
					            u_xlati3 = int(u_xlat3.x);
					            u_xlati3 = u_xlati3 << 2;
					            u_xlat4.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati3 + 1) / 4][(u_xlati3 + 1) % 4].xyz;
					            u_xlat4.xyz = unity_WorldToShadow[u_xlati3 / 4][u_xlati3 % 4].xyz * u_xlat2.xxx + u_xlat4.xyz;
					            u_xlat4.xyz = unity_WorldToShadow[(u_xlati3 + 2) / 4][(u_xlati3 + 2) % 4].xyz * u_xlat2.zzz + u_xlat4.xyz;
					            u_xlat3.xzw = u_xlat4.xyz + unity_WorldToShadow[(u_xlati3 + 3) / 4][(u_xlati3 + 3) % 4].xyz;
					            vec3 txVec0 = vec3(u_xlat3.xz,u_xlat3.w);
					            u_xlat3.x = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec0, 0.0);
					            u_xlat3.x = (u_xlatb10) ? u_xlat3.x : 1.0;
					            u_xlat22 = u_xlat22 + u_xlat3.x;
					            u_xlati23 = u_xlati23 + 1;
					            u_xlat2.xyz = u_xlat1.xyz * vec3(-0.00613496918, -0.00613496918, -0.00613496918) + u_xlat2.xyz;
					        }
					        u_xlat0.z = u_xlat22 * 0.00609756075;
					    }
					    SV_Target0 = u_xlat0.zzzz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//   float3 u_CameraPosition;
					//   sampler2D u_CascadedShadowMap;
					//   float4 unity_ShadowSplitSpheres[4];
					//   float4 unity_ShadowSplitSqRadii;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   unity_WorldToShadow      c0      15
					//   unity_ShadowSplitSpheres c15      4
					//   _ZBufferParams           c19      1
					//   unity_ShadowSplitSqRadii c20      1
					//   u_CameraPosition         c21      1
					//   _CameraDepthTexture      s0       1
					//   u_CascadedShadowMap      s1       1
					//
					
					    ps_3_0
					    def c22, 0.999999881, 0.75, 0, 1
					    def c23, 0, -4, -0.00613496918, 0.00609756075
					    defi i0, 164, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord2 v1.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    add r0.y, -r0.x, c22.x
					    if_lt c22.x, r0.x
					      mov r0.z, c22.y
					    else
					      mov r0.z, c22.z
					    endif
					    mad r0.x, c19.x, r0.x, c19.y
					    rcp r0.x, r0.x
					    mul r1.xyz, r0.x, v1
					    mad r2.xyz, v1, r0.x, c21
					    mov r3.w, c22.w
					    mov r4.xyz, r2
					    mov r0.x, c22.z
					    rep i0
					      add r5.xyz, r4, -c15
					      add r6.xyz, r4, -c16
					      add r7.xyz, r4, -c17
					      add r8.xyz, r4, -c18
					      dp3 r5.x, r5, r5
					      dp3 r5.y, r6, r6
					      dp3 r5.z, r7, r7
					      dp3 r5.w, r8, r8
					      add r5, r5, -c20
					      cmp r6, r5, c22.z, c22.w
					      cmp r5.xyz, r5, -c22.z, -c22.w
					      add_pp r5.xyz, r5, r6.yzww
					      max_pp r6.yzw, r5.xxyz, c22.z
					      dp4 r0.w, r6, c22.w
					      add r0.w, r0.w, c23.y
					      mad r5, r4.xyzx, c22.wwwz, c22.zzzw
					      dp4 r7.x, c0, r5
					      dp4 r7.y, c1, r5
					      dp4 r7.z, c2, r5
					      dp4 r8.x, c4, r5
					      dp4 r8.y, c5, r5
					      dp4 r8.z, c6, r5
					      dp4 r9.x, c8, r5
					      dp4 r9.y, c9, r5
					      dp4 r9.z, c10, r5
					      dp4 r10.x, c12, r5
					      dp4 r10.y, c13, r5
					      dp4 r10.z, c14, r5
					      mul r5.xyz, r6.y, r8
					      mad r5.xyz, r7, r6.x, r5
					      mad r5.xyz, r9, r6.z, r5
					      mad r3.xyz, r10, r6.w, r5
					      texldp r5, r3, s1
					      cmp r0.w, r0.w, c22.w, r5.x
					      add r0.x, r0.w, r0.x
					      mad r4.xyz, r1, c23.z, r4
					    endrep
					    mul_pp r0.x, r0.x, c23.w
					    cmp_pp oC0, r0.y, r0.x, r0.z
					
					// approximately 59 instruction slots used (2 texture, 57 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[24];
						vec3 u_CameraPosition;
						vec4 unused_0_2[5];
						float u_OcclusionSkyRefDistance;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityShadows {
						vec4 unity_ShadowSplitSpheres[4];
						vec4 unused_2_1[3];
						vec4 unity_ShadowSplitSqRadii;
						vec4 unused_2_3[3];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_2_5[14];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D u_CascadedShadowMap;
					uniform  sampler2DShadow hlslcc_zcmpu_CascadedShadowMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					float u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bvec4 u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					int u_xlati15;
					float u_xlat22;
					int u_xlati22;
					bool u_xlatb22;
					float u_xlat23;
					int u_xlati23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlatb7 = 0.999999881<u_xlat0.x;
					    if(u_xlatb7){
					        u_xlat7.xyz = vs_TEXCOORD2.xyz * vec3(u_OcclusionSkyRefDistance);
					        u_xlat1 = float(0.0);
					        u_xlat8.x = float(0.0);
					        u_xlati15 = int(0);
					        while(true){
					            u_xlatb22 = u_xlati15>=164;
					            if(u_xlatb22){break;}
					            u_xlat22 = u_xlat8.x * u_xlat8.x;
					            u_xlat2.xyz = vec3(u_xlat22) * u_xlat7.xyz + u_CameraPosition.xyz;
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat22 = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb23 = u_xlat22<4.0;
					            u_xlati22 = int(u_xlat22);
					            u_xlati22 = u_xlati22 << 2;
					            u_xlat3.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati22 + 1) / 4][(u_xlati22 + 1) % 4].xyz;
					            u_xlat3.xyz = unity_WorldToShadow[u_xlati22 / 4][u_xlati22 % 4].xyz * u_xlat2.xxx + u_xlat3.xyz;
					            u_xlat2.xyz = unity_WorldToShadow[(u_xlati22 + 2) / 4][(u_xlati22 + 2) % 4].xyz * u_xlat2.zzz + u_xlat3.xyz;
					            u_xlat2.xyz = u_xlat2.xyz + unity_WorldToShadow[(u_xlati22 + 3) / 4][(u_xlati22 + 3) % 4].xyz;
					            vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					            u_xlat22 = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec0, 0.0);
					            u_xlat22 = (u_xlatb23) ? u_xlat22 : 1.0;
					            u_xlat1 = u_xlat22 + u_xlat1;
					            u_xlati15 = u_xlati15 + 1;
					            u_xlat8.x = u_xlat8.x + 0.00609756075;
					        }
					    } else {
					        u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					        u_xlat0.x = float(1.0) / u_xlat0.x;
					        u_xlat7.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
					        u_xlat8.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_CameraPosition.xyz;
					        u_xlat1 = 0.0;
					        u_xlat2.xyz = u_xlat8.xyz;
					        u_xlati0 = 0;
					        while(true){
					            u_xlatb23 = u_xlati0>=164;
					            if(u_xlatb23){break;}
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat23 = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb3.x = u_xlat23<4.0;
					            u_xlati23 = int(u_xlat23);
					            u_xlati23 = u_xlati23 << 2;
					            u_xlat10.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati23 + 1) / 4][(u_xlati23 + 1) % 4].xyz;
					            u_xlat10.xyz = unity_WorldToShadow[u_xlati23 / 4][u_xlati23 % 4].xyz * u_xlat2.xxx + u_xlat10.xyz;
					            u_xlat10.xyz = unity_WorldToShadow[(u_xlati23 + 2) / 4][(u_xlati23 + 2) % 4].xyz * u_xlat2.zzz + u_xlat10.xyz;
					            u_xlat10.xyz = u_xlat10.xyz + unity_WorldToShadow[(u_xlati23 + 3) / 4][(u_xlati23 + 3) % 4].xyz;
					            vec3 txVec1 = vec3(u_xlat10.xy,u_xlat10.z);
					            u_xlat23 = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec1, 0.0);
					            u_xlat23 = (u_xlatb3.x) ? u_xlat23 : 1.0;
					            u_xlat1 = u_xlat1 + u_xlat23;
					            u_xlati0 = u_xlati0 + 1;
					            u_xlat2.xyz = u_xlat7.xyz * vec3(-0.00613496918, -0.00613496918, -0.00613496918) + u_xlat2.xyz;
					        }
					    }
					    SV_Target0 = vec4(u_xlat1) * vec4(0.00609756075, 0.00609756075, 0.00609756075, 0.00609756075);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "SHADOWS_NATIVE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//   float3 u_CameraPosition;
					//   sampler2D u_CascadedShadowMap;
					//   float4 unity_ShadowSplitSpheres[4];
					//   float4 unity_ShadowSplitSqRadii;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   unity_WorldToShadow      c0      15
					//   unity_ShadowSplitSpheres c15      4
					//   _ZBufferParams           c19      1
					//   unity_ShadowSplitSqRadii c20      1
					//   u_CameraPosition         c21      1
					//   _CameraDepthTexture      s0       1
					//   u_CascadedShadowMap      s1       1
					//
					
					    ps_3_0
					    def c22, 0.999999881, 0.75, 0, 1
					    def c23, 0, -4, -0.00613496918, 0.00609756075
					    defi i0, 164, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord2 v1.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    add r0.y, -r0.x, c22.x
					    if_lt c22.x, r0.x
					      mov r0.z, c22.y
					    else
					      mov r0.z, c22.z
					    endif
					    mad r0.x, c19.x, r0.x, c19.y
					    rcp r0.x, r0.x
					    mul r1.xyz, r0.x, v1
					    mad r2.xyz, v1, r0.x, c21
					    mov r3.w, c22.w
					    mov r4.xyz, r2
					    mov r0.x, c22.z
					    rep i0
					      add r5.xyz, r4, -c15
					      add r6.xyz, r4, -c16
					      add r7.xyz, r4, -c17
					      add r8.xyz, r4, -c18
					      dp3 r5.x, r5, r5
					      dp3 r5.y, r6, r6
					      dp3 r5.z, r7, r7
					      dp3 r5.w, r8, r8
					      add r5, r5, -c20
					      cmp r6, r5, c22.z, c22.w
					      cmp r5.xyz, r5, -c22.z, -c22.w
					      add_pp r5.xyz, r5, r6.yzww
					      max_pp r6.yzw, r5.xxyz, c22.z
					      dp4 r0.w, r6, c22.w
					      add r0.w, r0.w, c23.y
					      mad r5, r4.xyzx, c22.wwwz, c22.zzzw
					      dp4 r7.x, c0, r5
					      dp4 r7.y, c1, r5
					      dp4 r7.z, c2, r5
					      dp4 r8.x, c4, r5
					      dp4 r8.y, c5, r5
					      dp4 r8.z, c6, r5
					      dp4 r9.x, c8, r5
					      dp4 r9.y, c9, r5
					      dp4 r9.z, c10, r5
					      dp4 r10.x, c12, r5
					      dp4 r10.y, c13, r5
					      dp4 r10.z, c14, r5
					      mul r5.xyz, r6.y, r8
					      mad r5.xyz, r7, r6.x, r5
					      mad r5.xyz, r9, r6.z, r5
					      mad r3.xyz, r10, r6.w, r5
					      texldp r5, r3, s1
					      cmp r0.w, r0.w, c22.w, r5.x
					      add r0.x, r0.w, r0.x
					      mad r4.xyz, r1, c23.z, r4
					    endrep
					    mul_pp r0.x, r0.x, c23.w
					    cmp_pp oC0, r0.y, r0.x, r0.z
					
					// approximately 59 instruction slots used (2 texture, 57 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "SHADOWS_NATIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[24];
						vec3 u_CameraPosition;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityShadows {
						vec4 unity_ShadowSplitSpheres[4];
						vec4 unused_2_1[3];
						vec4 unity_ShadowSplitSqRadii;
						vec4 unused_2_3[3];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_2_5[14];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D u_CascadedShadowMap;
					uniform  sampler2DShadow hlslcc_zcmpu_CascadedShadowMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					bvec4 u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb7;
					bool u_xlatb10;
					float u_xlat22;
					int u_xlati23;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlatb7 = 0.999999881<u_xlat0.x;
					    if(u_xlatb7){
					        u_xlat0.z = 0.75;
					    }
					    if(!u_xlatb7){
					        u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					        u_xlat0.x = float(1.0) / u_xlat0.x;
					        u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
					        u_xlat0.xyw = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_CameraPosition.xyz;
					        u_xlat22 = 0.0;
					        u_xlat2.xyz = u_xlat0.xyw;
					        u_xlati23 = 0;
					        while(true){
					            u_xlatb3.x = u_xlati23>=164;
					            if(u_xlatb3.x){break;}
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat3.x = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb10 = u_xlat3.x<4.0;
					            u_xlati3 = int(u_xlat3.x);
					            u_xlati3 = u_xlati3 << 2;
					            u_xlat4.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati3 + 1) / 4][(u_xlati3 + 1) % 4].xyz;
					            u_xlat4.xyz = unity_WorldToShadow[u_xlati3 / 4][u_xlati3 % 4].xyz * u_xlat2.xxx + u_xlat4.xyz;
					            u_xlat4.xyz = unity_WorldToShadow[(u_xlati3 + 2) / 4][(u_xlati3 + 2) % 4].xyz * u_xlat2.zzz + u_xlat4.xyz;
					            u_xlat3.xzw = u_xlat4.xyz + unity_WorldToShadow[(u_xlati3 + 3) / 4][(u_xlati3 + 3) % 4].xyz;
					            vec3 txVec0 = vec3(u_xlat3.xz,u_xlat3.w);
					            u_xlat3.x = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec0, 0.0);
					            u_xlat3.x = (u_xlatb10) ? u_xlat3.x : 1.0;
					            u_xlat22 = u_xlat22 + u_xlat3.x;
					            u_xlati23 = u_xlati23 + 1;
					            u_xlat2.xyz = u_xlat1.xyz * vec3(-0.00613496918, -0.00613496918, -0.00613496918) + u_xlat2.xyz;
					        }
					        u_xlat0.z = u_xlat22 * 0.00609756075;
					    }
					    SV_Target0 = u_xlat0.zzzz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//   float3 u_CameraPosition;
					//   sampler2D u_CascadedShadowMap;
					//   float4 unity_ShadowSplitSpheres[4];
					//   float4 unity_ShadowSplitSqRadii;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   unity_WorldToShadow      c0      15
					//   unity_ShadowSplitSpheres c15      4
					//   _ZBufferParams           c19      1
					//   unity_ShadowSplitSqRadii c20      1
					//   u_CameraPosition         c21      1
					//   _CameraDepthTexture      s0       1
					//   u_CascadedShadowMap      s1       1
					//
					
					    ps_3_0
					    def c22, 0.999999881, 0.75, 0, 1
					    def c23, 0, -4, -0.00613496918, 0.00609756075
					    defi i0, 164, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord2 v1.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    add r0.y, -r0.x, c22.x
					    if_lt c22.x, r0.x
					      mov r0.z, c22.y
					    else
					      mov r0.z, c22.z
					    endif
					    mad r0.x, c19.x, r0.x, c19.y
					    rcp r0.x, r0.x
					    mul r1.xyz, r0.x, v1
					    mad r2.xyz, v1, r0.x, c21
					    mov r3.w, c22.w
					    mov r4.xyz, r2
					    mov r0.x, c22.z
					    rep i0
					      add r5.xyz, r4, -c15
					      add r6.xyz, r4, -c16
					      add r7.xyz, r4, -c17
					      add r8.xyz, r4, -c18
					      dp3 r5.x, r5, r5
					      dp3 r5.y, r6, r6
					      dp3 r5.z, r7, r7
					      dp3 r5.w, r8, r8
					      add r5, r5, -c20
					      cmp r6, r5, c22.z, c22.w
					      cmp r5.xyz, r5, -c22.z, -c22.w
					      add_pp r5.xyz, r5, r6.yzww
					      max_pp r6.yzw, r5.xxyz, c22.z
					      dp4 r0.w, r6, c22.w
					      add r0.w, r0.w, c23.y
					      mad r5, r4.xyzx, c22.wwwz, c22.zzzw
					      dp4 r7.x, c0, r5
					      dp4 r7.y, c1, r5
					      dp4 r7.z, c2, r5
					      dp4 r8.x, c4, r5
					      dp4 r8.y, c5, r5
					      dp4 r8.z, c6, r5
					      dp4 r9.x, c8, r5
					      dp4 r9.y, c9, r5
					      dp4 r9.z, c10, r5
					      dp4 r10.x, c12, r5
					      dp4 r10.y, c13, r5
					      dp4 r10.z, c14, r5
					      mul r5.xyz, r6.y, r8
					      mad r5.xyz, r7, r6.x, r5
					      mad r5.xyz, r9, r6.z, r5
					      mad r3.xyz, r10, r6.w, r5
					      texldp r5, r3, s1
					      cmp r0.w, r0.w, c22.w, r5.x
					      add r0.x, r0.w, r0.x
					      mad r4.xyz, r1, c23.z, r4
					    endrep
					    mul_pp r0.x, r0.x, c23.w
					    cmp_pp oC0, r0.y, r0.x, r0.z
					
					// approximately 59 instruction slots used (2 texture, 57 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[24];
						vec3 u_CameraPosition;
						vec4 unused_0_2[5];
						float u_OcclusionSkyRefDistance;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityShadows {
						vec4 unity_ShadowSplitSpheres[4];
						vec4 unused_2_1[3];
						vec4 unity_ShadowSplitSqRadii;
						vec4 unused_2_3[3];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_2_5[14];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D u_CascadedShadowMap;
					uniform  sampler2DShadow hlslcc_zcmpu_CascadedShadowMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					float u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bvec4 u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					int u_xlati15;
					float u_xlat22;
					int u_xlati22;
					bool u_xlatb22;
					float u_xlat23;
					int u_xlati23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlatb7 = 0.999999881<u_xlat0.x;
					    if(u_xlatb7){
					        u_xlat7.xyz = vs_TEXCOORD2.xyz * vec3(u_OcclusionSkyRefDistance);
					        u_xlat1 = float(0.0);
					        u_xlat8.x = float(0.0);
					        u_xlati15 = int(0);
					        while(true){
					            u_xlatb22 = u_xlati15>=164;
					            if(u_xlatb22){break;}
					            u_xlat22 = u_xlat8.x * u_xlat8.x;
					            u_xlat2.xyz = vec3(u_xlat22) * u_xlat7.xyz + u_CameraPosition.xyz;
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat22 = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb23 = u_xlat22<4.0;
					            u_xlati22 = int(u_xlat22);
					            u_xlati22 = u_xlati22 << 2;
					            u_xlat3.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati22 + 1) / 4][(u_xlati22 + 1) % 4].xyz;
					            u_xlat3.xyz = unity_WorldToShadow[u_xlati22 / 4][u_xlati22 % 4].xyz * u_xlat2.xxx + u_xlat3.xyz;
					            u_xlat2.xyz = unity_WorldToShadow[(u_xlati22 + 2) / 4][(u_xlati22 + 2) % 4].xyz * u_xlat2.zzz + u_xlat3.xyz;
					            u_xlat2.xyz = u_xlat2.xyz + unity_WorldToShadow[(u_xlati22 + 3) / 4][(u_xlati22 + 3) % 4].xyz;
					            vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					            u_xlat22 = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec0, 0.0);
					            u_xlat22 = (u_xlatb23) ? u_xlat22 : 1.0;
					            u_xlat1 = u_xlat22 + u_xlat1;
					            u_xlati15 = u_xlati15 + 1;
					            u_xlat8.x = u_xlat8.x + 0.00609756075;
					        }
					    } else {
					        u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					        u_xlat0.x = float(1.0) / u_xlat0.x;
					        u_xlat7.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
					        u_xlat8.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_CameraPosition.xyz;
					        u_xlat1 = 0.0;
					        u_xlat2.xyz = u_xlat8.xyz;
					        u_xlati0 = 0;
					        while(true){
					            u_xlatb23 = u_xlati0>=164;
					            if(u_xlatb23){break;}
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat23 = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb3.x = u_xlat23<4.0;
					            u_xlati23 = int(u_xlat23);
					            u_xlati23 = u_xlati23 << 2;
					            u_xlat10.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati23 + 1) / 4][(u_xlati23 + 1) % 4].xyz;
					            u_xlat10.xyz = unity_WorldToShadow[u_xlati23 / 4][u_xlati23 % 4].xyz * u_xlat2.xxx + u_xlat10.xyz;
					            u_xlat10.xyz = unity_WorldToShadow[(u_xlati23 + 2) / 4][(u_xlati23 + 2) % 4].xyz * u_xlat2.zzz + u_xlat10.xyz;
					            u_xlat10.xyz = u_xlat10.xyz + unity_WorldToShadow[(u_xlati23 + 3) / 4][(u_xlati23 + 3) % 4].xyz;
					            vec3 txVec1 = vec3(u_xlat10.xy,u_xlat10.z);
					            u_xlat23 = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec1, 0.0);
					            u_xlat23 = (u_xlatb3.x) ? u_xlat23 : 1.0;
					            u_xlat1 = u_xlat1 + u_xlat23;
					            u_xlati0 = u_xlati0 + 1;
					            u_xlat2.xyz = u_xlat7.xyz * vec3(-0.00613496918, -0.00613496918, -0.00613496918) + u_xlat2.xyz;
					        }
					    }
					    SV_Target0 = vec4(u_xlat1) * vec4(0.00609756075, 0.00609756075, 0.00609756075, 0.00609756075);
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 176140
			Program "vp" {
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_NATIVE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 u_ViewportCorner;
					//   float3 u_ViewportRight;
					//   float3 u_ViewportUp;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   u_ViewportCorner    c8       1
					//   u_ViewportRight     c9       1
					//   u_ViewportUp        c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord2 o2.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.xyz, c9
					    mad r0.xyz, v1.x, r0, c8
					    mad o2.xyz, v1.y, c10, r0
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 15 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_NATIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[25];
						vec3 u_ViewportCorner;
						vec3 u_ViewportRight;
						vec3 u_ViewportUp;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_TEXCOORD0.xxx * u_ViewportRight.xyz + u_ViewportCorner.xyz;
					    vs_TEXCOORD2.xyz = in_TEXCOORD0.yyy * u_ViewportUp.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 u_ViewportCorner;
					//   float3 u_ViewportRight;
					//   float3 u_ViewportUp;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   u_ViewportCorner    c8       1
					//   u_ViewportRight     c9       1
					//   u_ViewportUp        c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord2 o2.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.xyz, c9
					    mad r0.xyz, v1.x, r0, c8
					    mad o2.xyz, v1.y, c10, r0
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 15 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[25];
						vec3 u_ViewportCorner;
						vec3 u_ViewportRight;
						vec3 u_ViewportUp;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_TEXCOORD0.xxx * u_ViewportRight.xyz + u_ViewportCorner.xyz;
					    vs_TEXCOORD2.xyz = in_TEXCOORD0.yyy * u_ViewportUp.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "SHADOWS_NATIVE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 u_ViewportCorner;
					//   float3 u_ViewportRight;
					//   float3 u_ViewportUp;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   u_ViewportCorner    c8       1
					//   u_ViewportRight     c9       1
					//   u_ViewportUp        c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord2 o2.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.xyz, c9
					    mad r0.xyz, v1.x, r0, c8
					    mad o2.xyz, v1.y, c10, r0
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 15 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "SHADOWS_NATIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[25];
						vec3 u_ViewportCorner;
						vec3 u_ViewportRight;
						vec3 u_ViewportUp;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_TEXCOORD0.xxx * u_ViewportRight.xyz + u_ViewportCorner.xyz;
					    vs_TEXCOORD2.xyz = in_TEXCOORD0.yyy * u_ViewportUp.xyz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float3 u_ViewportCorner;
					//   float3 u_ViewportRight;
					//   float3 u_ViewportUp;
					//   row_major float4x4 unity_MatrixVP;
					//   row_major float4x4 unity_ObjectToWorld;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   unity_ObjectToWorld c0       4
					//   unity_MatrixVP      c4       4
					//   u_ViewportCorner    c8       1
					//   u_ViewportRight     c9       1
					//   u_ViewportUp        c10      1
					//
					
					    vs_3_0
					    def c11, 1, 0, 0, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord2 o2.xyz
					    mad r0, v0.xyzx, c11.xxxy, c11.yyyx
					    dp4 r1.x, c0, r0
					    dp4 r1.y, c1, r0
					    dp4 r1.z, c2, r0
					    dp4 r1.w, c3, r0
					    dp4 r2.x, c4, r1
					    dp4 r2.y, c5, r1
					    dp4 r2.z, c6, r1
					    dp4 r2.w, c7, r1
					    mov r0.xyz, c9
					    mad r0.xyz, v1.x, r0, c8
					    mad o2.xyz, v1.y, c10, r0
					    mov o1.xy, v1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 15 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[25];
						vec3 u_ViewportCorner;
						vec3 u_ViewportRight;
						vec3 u_ViewportUp;
						vec4 unused_0_4[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 unity_ObjectToWorld;
						vec4 unused_1_1[6];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[17];
						mat4x4 unity_MatrixVP;
						vec4 unused_2_2[3];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * unity_ObjectToWorld[1];
					    u_xlat0 = unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + unity_ObjectToWorld[3];
					    u_xlat1 = u_xlat0.yyyy * unity_MatrixVP[1];
					    u_xlat1 = unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    gl_Position = unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat0.xyz = in_TEXCOORD0.xxx * u_ViewportRight.xyz + u_ViewportCorner.xyz;
					    vs_TEXCOORD2.xyz = in_TEXCOORD0.yyy * u_ViewportUp.xyz + u_xlat0.xyz;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					Keywords { "SHADOWS_NATIVE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//   float3 u_CameraPosition;
					//   sampler2D u_CascadedShadowMap;
					//   float4 unity_ShadowSplitSpheres[4];
					//   float4 unity_ShadowSplitSqRadii;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   unity_WorldToShadow      c0      15
					//   unity_ShadowSplitSpheres c15      4
					//   _ZBufferParams           c19      1
					//   unity_ShadowSplitSqRadii c20      1
					//   u_CameraPosition         c21      1
					//   _CameraDepthTexture      s0       1
					//   u_CascadedShadowMap      s1       1
					//
					
					    ps_3_0
					    def c22, 0.999999881, 0.75, 0, 1
					    def c23, 0, -4, -0.00411522621, 0.00409836043
					    defi i0, 244, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord2 v1.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    add r0.y, -r0.x, c22.x
					    if_lt c22.x, r0.x
					      mov r0.z, c22.y
					    else
					      mov r0.z, c22.z
					    endif
					    mad r0.x, c19.x, r0.x, c19.y
					    rcp r0.x, r0.x
					    mul r1.xyz, r0.x, v1
					    mad r2.xyz, v1, r0.x, c21
					    mov r3.w, c22.w
					    mov r4.xyz, r2
					    mov r0.x, c22.z
					    rep i0
					      add r5.xyz, r4, -c15
					      add r6.xyz, r4, -c16
					      add r7.xyz, r4, -c17
					      add r8.xyz, r4, -c18
					      dp3 r5.x, r5, r5
					      dp3 r5.y, r6, r6
					      dp3 r5.z, r7, r7
					      dp3 r5.w, r8, r8
					      add r5, r5, -c20
					      cmp r6, r5, c22.z, c22.w
					      cmp r5.xyz, r5, -c22.z, -c22.w
					      add_pp r5.xyz, r5, r6.yzww
					      max_pp r6.yzw, r5.xxyz, c22.z
					      dp4 r0.w, r6, c22.w
					      add r0.w, r0.w, c23.y
					      mad r5, r4.xyzx, c22.wwwz, c22.zzzw
					      dp4 r7.x, c0, r5
					      dp4 r7.y, c1, r5
					      dp4 r7.z, c2, r5
					      dp4 r8.x, c4, r5
					      dp4 r8.y, c5, r5
					      dp4 r8.z, c6, r5
					      dp4 r9.x, c8, r5
					      dp4 r9.y, c9, r5
					      dp4 r9.z, c10, r5
					      dp4 r10.x, c12, r5
					      dp4 r10.y, c13, r5
					      dp4 r10.z, c14, r5
					      mul r5.xyz, r6.y, r8
					      mad r5.xyz, r7, r6.x, r5
					      mad r5.xyz, r9, r6.z, r5
					      mad r3.xyz, r10, r6.w, r5
					      texldp r5, r3, s1
					      cmp r0.w, r0.w, c22.w, r5.x
					      add r0.x, r0.w, r0.x
					      mad r4.xyz, r1, c23.z, r4
					    endrep
					    mul_pp r0.x, r0.x, c23.w
					    cmp_pp oC0, r0.y, r0.x, r0.z
					
					// approximately 59 instruction slots used (2 texture, 57 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "SHADOWS_NATIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[24];
						vec3 u_CameraPosition;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityShadows {
						vec4 unity_ShadowSplitSpheres[4];
						vec4 unused_2_1[3];
						vec4 unity_ShadowSplitSqRadii;
						vec4 unused_2_3[3];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_2_5[14];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D u_CascadedShadowMap;
					uniform  sampler2DShadow hlslcc_zcmpu_CascadedShadowMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					bvec4 u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb7;
					bool u_xlatb10;
					float u_xlat22;
					int u_xlati23;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlatb7 = 0.999999881<u_xlat0.x;
					    if(u_xlatb7){
					        u_xlat0.z = 0.75;
					    }
					    if(!u_xlatb7){
					        u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					        u_xlat0.x = float(1.0) / u_xlat0.x;
					        u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
					        u_xlat0.xyw = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_CameraPosition.xyz;
					        u_xlat22 = 0.0;
					        u_xlat2.xyz = u_xlat0.xyw;
					        u_xlati23 = 0;
					        while(true){
					            u_xlatb3.x = u_xlati23>=244;
					            if(u_xlatb3.x){break;}
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat3.x = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb10 = u_xlat3.x<4.0;
					            u_xlati3 = int(u_xlat3.x);
					            u_xlati3 = u_xlati3 << 2;
					            u_xlat4.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati3 + 1) / 4][(u_xlati3 + 1) % 4].xyz;
					            u_xlat4.xyz = unity_WorldToShadow[u_xlati3 / 4][u_xlati3 % 4].xyz * u_xlat2.xxx + u_xlat4.xyz;
					            u_xlat4.xyz = unity_WorldToShadow[(u_xlati3 + 2) / 4][(u_xlati3 + 2) % 4].xyz * u_xlat2.zzz + u_xlat4.xyz;
					            u_xlat3.xzw = u_xlat4.xyz + unity_WorldToShadow[(u_xlati3 + 3) / 4][(u_xlati3 + 3) % 4].xyz;
					            vec3 txVec0 = vec3(u_xlat3.xz,u_xlat3.w);
					            u_xlat3.x = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec0, 0.0);
					            u_xlat3.x = (u_xlatb10) ? u_xlat3.x : 1.0;
					            u_xlat22 = u_xlat22 + u_xlat3.x;
					            u_xlati23 = u_xlati23 + 1;
					            u_xlat2.xyz = u_xlat1.xyz * vec3(-0.00411522621, -0.00411522621, -0.00411522621) + u_xlat2.xyz;
					        }
					        u_xlat0.z = u_xlat22 * 0.00409836043;
					    }
					    SV_Target0 = u_xlat0.zzzz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//   float3 u_CameraPosition;
					//   sampler2D u_CascadedShadowMap;
					//   float4 unity_ShadowSplitSpheres[4];
					//   float4 unity_ShadowSplitSqRadii;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   unity_WorldToShadow      c0      15
					//   unity_ShadowSplitSpheres c15      4
					//   _ZBufferParams           c19      1
					//   unity_ShadowSplitSqRadii c20      1
					//   u_CameraPosition         c21      1
					//   _CameraDepthTexture      s0       1
					//   u_CascadedShadowMap      s1       1
					//
					
					    ps_3_0
					    def c22, 0.999999881, 0.75, 0, 1
					    def c23, 0, -4, -0.00411522621, 0.00409836043
					    defi i0, 244, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord2 v1.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    add r0.y, -r0.x, c22.x
					    if_lt c22.x, r0.x
					      mov r0.z, c22.y
					    else
					      mov r0.z, c22.z
					    endif
					    mad r0.x, c19.x, r0.x, c19.y
					    rcp r0.x, r0.x
					    mul r1.xyz, r0.x, v1
					    mad r2.xyz, v1, r0.x, c21
					    mov r3.w, c22.w
					    mov r4.xyz, r2
					    mov r0.x, c22.z
					    rep i0
					      add r5.xyz, r4, -c15
					      add r6.xyz, r4, -c16
					      add r7.xyz, r4, -c17
					      add r8.xyz, r4, -c18
					      dp3 r5.x, r5, r5
					      dp3 r5.y, r6, r6
					      dp3 r5.z, r7, r7
					      dp3 r5.w, r8, r8
					      add r5, r5, -c20
					      cmp r6, r5, c22.z, c22.w
					      cmp r5.xyz, r5, -c22.z, -c22.w
					      add_pp r5.xyz, r5, r6.yzww
					      max_pp r6.yzw, r5.xxyz, c22.z
					      dp4 r0.w, r6, c22.w
					      add r0.w, r0.w, c23.y
					      mad r5, r4.xyzx, c22.wwwz, c22.zzzw
					      dp4 r7.x, c0, r5
					      dp4 r7.y, c1, r5
					      dp4 r7.z, c2, r5
					      dp4 r8.x, c4, r5
					      dp4 r8.y, c5, r5
					      dp4 r8.z, c6, r5
					      dp4 r9.x, c8, r5
					      dp4 r9.y, c9, r5
					      dp4 r9.z, c10, r5
					      dp4 r10.x, c12, r5
					      dp4 r10.y, c13, r5
					      dp4 r10.z, c14, r5
					      mul r5.xyz, r6.y, r8
					      mad r5.xyz, r7, r6.x, r5
					      mad r5.xyz, r9, r6.z, r5
					      mad r3.xyz, r10, r6.w, r5
					      texldp r5, r3, s1
					      cmp r0.w, r0.w, c22.w, r5.x
					      add r0.x, r0.w, r0.x
					      mad r4.xyz, r1, c23.z, r4
					    endrep
					    mul_pp r0.x, r0.x, c23.w
					    cmp_pp oC0, r0.y, r0.x, r0.z
					
					// approximately 59 instruction slots used (2 texture, 57 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[24];
						vec3 u_CameraPosition;
						vec4 unused_0_2[5];
						float u_OcclusionSkyRefDistance;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityShadows {
						vec4 unity_ShadowSplitSpheres[4];
						vec4 unused_2_1[3];
						vec4 unity_ShadowSplitSqRadii;
						vec4 unused_2_3[3];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_2_5[14];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D u_CascadedShadowMap;
					uniform  sampler2DShadow hlslcc_zcmpu_CascadedShadowMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					float u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bvec4 u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					int u_xlati15;
					float u_xlat22;
					int u_xlati22;
					bool u_xlatb22;
					float u_xlat23;
					int u_xlati23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlatb7 = 0.999999881<u_xlat0.x;
					    if(u_xlatb7){
					        u_xlat7.xyz = vs_TEXCOORD2.xyz * vec3(u_OcclusionSkyRefDistance);
					        u_xlat1 = float(0.0);
					        u_xlat8.x = float(0.0);
					        u_xlati15 = int(0);
					        while(true){
					            u_xlatb22 = u_xlati15>=244;
					            if(u_xlatb22){break;}
					            u_xlat22 = u_xlat8.x * u_xlat8.x;
					            u_xlat2.xyz = vec3(u_xlat22) * u_xlat7.xyz + u_CameraPosition.xyz;
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat22 = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb23 = u_xlat22<4.0;
					            u_xlati22 = int(u_xlat22);
					            u_xlati22 = u_xlati22 << 2;
					            u_xlat3.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati22 + 1) / 4][(u_xlati22 + 1) % 4].xyz;
					            u_xlat3.xyz = unity_WorldToShadow[u_xlati22 / 4][u_xlati22 % 4].xyz * u_xlat2.xxx + u_xlat3.xyz;
					            u_xlat2.xyz = unity_WorldToShadow[(u_xlati22 + 2) / 4][(u_xlati22 + 2) % 4].xyz * u_xlat2.zzz + u_xlat3.xyz;
					            u_xlat2.xyz = u_xlat2.xyz + unity_WorldToShadow[(u_xlati22 + 3) / 4][(u_xlati22 + 3) % 4].xyz;
					            vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					            u_xlat22 = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec0, 0.0);
					            u_xlat22 = (u_xlatb23) ? u_xlat22 : 1.0;
					            u_xlat1 = u_xlat22 + u_xlat1;
					            u_xlati15 = u_xlati15 + 1;
					            u_xlat8.x = u_xlat8.x + 0.00409836043;
					        }
					    } else {
					        u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					        u_xlat0.x = float(1.0) / u_xlat0.x;
					        u_xlat7.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
					        u_xlat8.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_CameraPosition.xyz;
					        u_xlat1 = 0.0;
					        u_xlat2.xyz = u_xlat8.xyz;
					        u_xlati0 = 0;
					        while(true){
					            u_xlatb23 = u_xlati0>=244;
					            if(u_xlatb23){break;}
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat23 = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb3.x = u_xlat23<4.0;
					            u_xlati23 = int(u_xlat23);
					            u_xlati23 = u_xlati23 << 2;
					            u_xlat10.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati23 + 1) / 4][(u_xlati23 + 1) % 4].xyz;
					            u_xlat10.xyz = unity_WorldToShadow[u_xlati23 / 4][u_xlati23 % 4].xyz * u_xlat2.xxx + u_xlat10.xyz;
					            u_xlat10.xyz = unity_WorldToShadow[(u_xlati23 + 2) / 4][(u_xlati23 + 2) % 4].xyz * u_xlat2.zzz + u_xlat10.xyz;
					            u_xlat10.xyz = u_xlat10.xyz + unity_WorldToShadow[(u_xlati23 + 3) / 4][(u_xlati23 + 3) % 4].xyz;
					            vec3 txVec1 = vec3(u_xlat10.xy,u_xlat10.z);
					            u_xlat23 = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec1, 0.0);
					            u_xlat23 = (u_xlatb3.x) ? u_xlat23 : 1.0;
					            u_xlat1 = u_xlat1 + u_xlat23;
					            u_xlati0 = u_xlati0 + 1;
					            u_xlat2.xyz = u_xlat7.xyz * vec3(-0.00411522621, -0.00411522621, -0.00411522621) + u_xlat2.xyz;
					        }
					    }
					    SV_Target0 = vec4(u_xlat1) * vec4(0.00409836043, 0.00409836043, 0.00409836043, 0.00409836043);
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "SHADOWS_NATIVE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//   float3 u_CameraPosition;
					//   sampler2D u_CascadedShadowMap;
					//   float4 unity_ShadowSplitSpheres[4];
					//   float4 unity_ShadowSplitSqRadii;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   unity_WorldToShadow      c0      15
					//   unity_ShadowSplitSpheres c15      4
					//   _ZBufferParams           c19      1
					//   unity_ShadowSplitSqRadii c20      1
					//   u_CameraPosition         c21      1
					//   _CameraDepthTexture      s0       1
					//   u_CascadedShadowMap      s1       1
					//
					
					    ps_3_0
					    def c22, 0.999999881, 0.75, 0, 1
					    def c23, 0, -4, -0.00411522621, 0.00409836043
					    defi i0, 244, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord2 v1.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    add r0.y, -r0.x, c22.x
					    if_lt c22.x, r0.x
					      mov r0.z, c22.y
					    else
					      mov r0.z, c22.z
					    endif
					    mad r0.x, c19.x, r0.x, c19.y
					    rcp r0.x, r0.x
					    mul r1.xyz, r0.x, v1
					    mad r2.xyz, v1, r0.x, c21
					    mov r3.w, c22.w
					    mov r4.xyz, r2
					    mov r0.x, c22.z
					    rep i0
					      add r5.xyz, r4, -c15
					      add r6.xyz, r4, -c16
					      add r7.xyz, r4, -c17
					      add r8.xyz, r4, -c18
					      dp3 r5.x, r5, r5
					      dp3 r5.y, r6, r6
					      dp3 r5.z, r7, r7
					      dp3 r5.w, r8, r8
					      add r5, r5, -c20
					      cmp r6, r5, c22.z, c22.w
					      cmp r5.xyz, r5, -c22.z, -c22.w
					      add_pp r5.xyz, r5, r6.yzww
					      max_pp r6.yzw, r5.xxyz, c22.z
					      dp4 r0.w, r6, c22.w
					      add r0.w, r0.w, c23.y
					      mad r5, r4.xyzx, c22.wwwz, c22.zzzw
					      dp4 r7.x, c0, r5
					      dp4 r7.y, c1, r5
					      dp4 r7.z, c2, r5
					      dp4 r8.x, c4, r5
					      dp4 r8.y, c5, r5
					      dp4 r8.z, c6, r5
					      dp4 r9.x, c8, r5
					      dp4 r9.y, c9, r5
					      dp4 r9.z, c10, r5
					      dp4 r10.x, c12, r5
					      dp4 r10.y, c13, r5
					      dp4 r10.z, c14, r5
					      mul r5.xyz, r6.y, r8
					      mad r5.xyz, r7, r6.x, r5
					      mad r5.xyz, r9, r6.z, r5
					      mad r3.xyz, r10, r6.w, r5
					      texldp r5, r3, s1
					      cmp r0.w, r0.w, c22.w, r5.x
					      add r0.x, r0.w, r0.x
					      mad r4.xyz, r1, c23.z, r4
					    endrep
					    mul_pp r0.x, r0.x, c23.w
					    cmp_pp oC0, r0.y, r0.x, r0.z
					
					// approximately 59 instruction slots used (2 texture, 57 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "SHADOWS_NATIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[24];
						vec3 u_CameraPosition;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityShadows {
						vec4 unity_ShadowSplitSpheres[4];
						vec4 unused_2_1[3];
						vec4 unity_ShadowSplitSqRadii;
						vec4 unused_2_3[3];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_2_5[14];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D u_CascadedShadowMap;
					uniform  sampler2DShadow hlslcc_zcmpu_CascadedShadowMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					int u_xlati3;
					bvec4 u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					bool u_xlatb7;
					bool u_xlatb10;
					float u_xlat22;
					int u_xlati23;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlatb7 = 0.999999881<u_xlat0.x;
					    if(u_xlatb7){
					        u_xlat0.z = 0.75;
					    }
					    if(!u_xlatb7){
					        u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					        u_xlat0.x = float(1.0) / u_xlat0.x;
					        u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
					        u_xlat0.xyw = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_CameraPosition.xyz;
					        u_xlat22 = 0.0;
					        u_xlat2.xyz = u_xlat0.xyw;
					        u_xlati23 = 0;
					        while(true){
					            u_xlatb3.x = u_xlati23>=244;
					            if(u_xlatb3.x){break;}
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat3.x = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb10 = u_xlat3.x<4.0;
					            u_xlati3 = int(u_xlat3.x);
					            u_xlati3 = u_xlati3 << 2;
					            u_xlat4.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati3 + 1) / 4][(u_xlati3 + 1) % 4].xyz;
					            u_xlat4.xyz = unity_WorldToShadow[u_xlati3 / 4][u_xlati3 % 4].xyz * u_xlat2.xxx + u_xlat4.xyz;
					            u_xlat4.xyz = unity_WorldToShadow[(u_xlati3 + 2) / 4][(u_xlati3 + 2) % 4].xyz * u_xlat2.zzz + u_xlat4.xyz;
					            u_xlat3.xzw = u_xlat4.xyz + unity_WorldToShadow[(u_xlati3 + 3) / 4][(u_xlati3 + 3) % 4].xyz;
					            vec3 txVec0 = vec3(u_xlat3.xz,u_xlat3.w);
					            u_xlat3.x = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec0, 0.0);
					            u_xlat3.x = (u_xlatb10) ? u_xlat3.x : 1.0;
					            u_xlat22 = u_xlat22 + u_xlat3.x;
					            u_xlati23 = u_xlati23 + 1;
					            u_xlat2.xyz = u_xlat1.xyz * vec3(-0.00411522621, -0.00411522621, -0.00411522621) + u_xlat2.xyz;
					        }
					        u_xlat0.z = u_xlat22 * 0.00409836043;
					    }
					    SV_Target0 = u_xlat0.zzzz;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   float4 _ZBufferParams;
					//   float3 u_CameraPosition;
					//   sampler2D u_CascadedShadowMap;
					//   float4 unity_ShadowSplitSpheres[4];
					//   float4 unity_ShadowSplitSqRadii;
					//   row_major float4x4 unity_WorldToShadow[4];
					//
					//
					// Registers:
					//
					//   Name                     Reg   Size
					//   ------------------------ ----- ----
					//   unity_WorldToShadow      c0      15
					//   unity_ShadowSplitSpheres c15      4
					//   _ZBufferParams           c19      1
					//   unity_ShadowSplitSqRadii c20      1
					//   u_CameraPosition         c21      1
					//   _CameraDepthTexture      s0       1
					//   u_CascadedShadowMap      s1       1
					//
					
					    ps_3_0
					    def c22, 0.999999881, 0.75, 0, 1
					    def c23, 0, -4, -0.00411522621, 0.00409836043
					    defi i0, 244, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord2 v1.xyz
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v0, s0
					    add r0.y, -r0.x, c22.x
					    if_lt c22.x, r0.x
					      mov r0.z, c22.y
					    else
					      mov r0.z, c22.z
					    endif
					    mad r0.x, c19.x, r0.x, c19.y
					    rcp r0.x, r0.x
					    mul r1.xyz, r0.x, v1
					    mad r2.xyz, v1, r0.x, c21
					    mov r3.w, c22.w
					    mov r4.xyz, r2
					    mov r0.x, c22.z
					    rep i0
					      add r5.xyz, r4, -c15
					      add r6.xyz, r4, -c16
					      add r7.xyz, r4, -c17
					      add r8.xyz, r4, -c18
					      dp3 r5.x, r5, r5
					      dp3 r5.y, r6, r6
					      dp3 r5.z, r7, r7
					      dp3 r5.w, r8, r8
					      add r5, r5, -c20
					      cmp r6, r5, c22.z, c22.w
					      cmp r5.xyz, r5, -c22.z, -c22.w
					      add_pp r5.xyz, r5, r6.yzww
					      max_pp r6.yzw, r5.xxyz, c22.z
					      dp4 r0.w, r6, c22.w
					      add r0.w, r0.w, c23.y
					      mad r5, r4.xyzx, c22.wwwz, c22.zzzw
					      dp4 r7.x, c0, r5
					      dp4 r7.y, c1, r5
					      dp4 r7.z, c2, r5
					      dp4 r8.x, c4, r5
					      dp4 r8.y, c5, r5
					      dp4 r8.z, c6, r5
					      dp4 r9.x, c8, r5
					      dp4 r9.y, c9, r5
					      dp4 r9.z, c10, r5
					      dp4 r10.x, c12, r5
					      dp4 r10.y, c13, r5
					      dp4 r10.z, c14, r5
					      mul r5.xyz, r6.y, r8
					      mad r5.xyz, r7, r6.x, r5
					      mad r5.xyz, r9, r6.z, r5
					      mad r3.xyz, r10, r6.w, r5
					      texldp r5, r3, s1
					      cmp r0.w, r0.w, c22.w, r5.x
					      add r0.x, r0.w, r0.x
					      mad r4.xyz, r1, c23.z, r4
					    endrep
					    mul_pp r0.x, r0.x, c23.w
					    cmp_pp oC0, r0.y, r0.x, r0.z
					
					// approximately 59 instruction slots used (2 texture, 57 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "ATMOSPHERICS_OCCLUSION" "ATMOSPHERICS_OCCLUSION_FULLSKY" "SHADOWS_NATIVE" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[24];
						vec3 u_CameraPosition;
						vec4 unused_0_2[5];
						float u_OcclusionSkyRefDistance;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					layout(std140) uniform UnityShadows {
						vec4 unity_ShadowSplitSpheres[4];
						vec4 unused_2_1[3];
						vec4 unity_ShadowSplitSqRadii;
						vec4 unused_2_3[3];
						mat4x4 unity_WorldToShadow[4];
						vec4 unused_2_5[14];
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D u_CascadedShadowMap;
					uniform  sampler2DShadow hlslcc_zcmpu_CascadedShadowMap;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					int u_xlati0;
					float u_xlat1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					bvec4 u_xlatb3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					bool u_xlatb7;
					vec3 u_xlat8;
					vec3 u_xlat10;
					int u_xlati15;
					float u_xlat22;
					int u_xlati22;
					bool u_xlatb22;
					float u_xlat23;
					int u_xlati23;
					bool u_xlatb23;
					void main()
					{
					    u_xlat0 = texture(_CameraDepthTexture, vs_TEXCOORD0.xy);
					    u_xlatb7 = 0.999999881<u_xlat0.x;
					    if(u_xlatb7){
					        u_xlat7.xyz = vs_TEXCOORD2.xyz * vec3(u_OcclusionSkyRefDistance);
					        u_xlat1 = float(0.0);
					        u_xlat8.x = float(0.0);
					        u_xlati15 = int(0);
					        while(true){
					            u_xlatb22 = u_xlati15>=244;
					            if(u_xlatb22){break;}
					            u_xlat22 = u_xlat8.x * u_xlat8.x;
					            u_xlat2.xyz = vec3(u_xlat22) * u_xlat7.xyz + u_CameraPosition.xyz;
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat22 = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb23 = u_xlat22<4.0;
					            u_xlati22 = int(u_xlat22);
					            u_xlati22 = u_xlati22 << 2;
					            u_xlat3.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati22 + 1) / 4][(u_xlati22 + 1) % 4].xyz;
					            u_xlat3.xyz = unity_WorldToShadow[u_xlati22 / 4][u_xlati22 % 4].xyz * u_xlat2.xxx + u_xlat3.xyz;
					            u_xlat2.xyz = unity_WorldToShadow[(u_xlati22 + 2) / 4][(u_xlati22 + 2) % 4].xyz * u_xlat2.zzz + u_xlat3.xyz;
					            u_xlat2.xyz = u_xlat2.xyz + unity_WorldToShadow[(u_xlati22 + 3) / 4][(u_xlati22 + 3) % 4].xyz;
					            vec3 txVec0 = vec3(u_xlat2.xy,u_xlat2.z);
					            u_xlat22 = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec0, 0.0);
					            u_xlat22 = (u_xlatb23) ? u_xlat22 : 1.0;
					            u_xlat1 = u_xlat22 + u_xlat1;
					            u_xlati15 = u_xlati15 + 1;
					            u_xlat8.x = u_xlat8.x + 0.00409836043;
					        }
					    } else {
					        u_xlat0.x = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;
					        u_xlat0.x = float(1.0) / u_xlat0.x;
					        u_xlat7.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
					        u_xlat8.xyz = vs_TEXCOORD2.xyz * u_xlat0.xxx + u_CameraPosition.xyz;
					        u_xlat1 = 0.0;
					        u_xlat2.xyz = u_xlat8.xyz;
					        u_xlati0 = 0;
					        while(true){
					            u_xlatb23 = u_xlati0>=244;
					            if(u_xlatb23){break;}
					            u_xlat3.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[0].xyz);
					            u_xlat4.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[1].xyz);
					            u_xlat5.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[2].xyz);
					            u_xlat6.xyz = u_xlat2.xyz + (-unity_ShadowSplitSpheres[3].xyz);
					            u_xlat3.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					            u_xlat3.y = dot(u_xlat4.xyz, u_xlat4.xyz);
					            u_xlat3.z = dot(u_xlat5.xyz, u_xlat5.xyz);
					            u_xlat3.w = dot(u_xlat6.xyz, u_xlat6.xyz);
					            u_xlatb3 = greaterThanEqual(u_xlat3, unity_ShadowSplitSqRadii);
					            u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
					            u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
					            u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
					            u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
					;
					            u_xlat23 = dot(u_xlat3, vec4(1.0, 1.0, 1.0, 1.0));
					            u_xlatb3.x = u_xlat23<4.0;
					            u_xlati23 = int(u_xlat23);
					            u_xlati23 = u_xlati23 << 2;
					            u_xlat10.xyz = u_xlat2.yyy * unity_WorldToShadow[(u_xlati23 + 1) / 4][(u_xlati23 + 1) % 4].xyz;
					            u_xlat10.xyz = unity_WorldToShadow[u_xlati23 / 4][u_xlati23 % 4].xyz * u_xlat2.xxx + u_xlat10.xyz;
					            u_xlat10.xyz = unity_WorldToShadow[(u_xlati23 + 2) / 4][(u_xlati23 + 2) % 4].xyz * u_xlat2.zzz + u_xlat10.xyz;
					            u_xlat10.xyz = u_xlat10.xyz + unity_WorldToShadow[(u_xlati23 + 3) / 4][(u_xlati23 + 3) % 4].xyz;
					            vec3 txVec1 = vec3(u_xlat10.xy,u_xlat10.z);
					            u_xlat23 = textureLod(hlslcc_zcmpu_CascadedShadowMap, txVec1, 0.0);
					            u_xlat23 = (u_xlatb3.x) ? u_xlat23 : 1.0;
					            u_xlat1 = u_xlat1 + u_xlat23;
					            u_xlati0 = u_xlati0 + 1;
					            u_xlat2.xyz = u_xlat7.xyz * vec3(-0.00411522621, -0.00411522621, -0.00411522621) + u_xlat2.xyz;
					        }
					    }
					    SV_Target0 = vec4(u_xlat1) * vec4(0.00409836043, 0.00409836043, 0.00409836043, 0.00409836043);
					    return;
					}"
				}
			}
		}
	}
}